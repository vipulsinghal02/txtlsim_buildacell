function mcmc_info = mcmc_info_tierra2018_calib_B(modelObj)
% mcmc_info_tierra2018_calib.m 
% Calibration: constitutive expression at 1, 2, 4, 8nM of pTet DNA
% Performed jointly over the two extracts. Initial try just set the kfdG
% to 1, and compute the krdG (along with the ESPs.) at the calibration
% step. 
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:

% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.

% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.

% User readable description of the circuit. Will be used in the log file generated
% from the MCMC inference procedure.
circuitInfo = ...
    [' D + pol <-> D__pol  (k_f, k_r \n'... )
    'D__pol -> D + pol + protien (kc)\n'...
    'single topology, two geometries.'];

namesUnord = ...
    {'kfdG'
    'krdG'
    'kcp'
    'pol'};

estParams = {'kfdG'
    'krdG'
    'kcp1'
    'kcp2'
    'pol1'
    'pol2'};

% !TODO notes: try to get starting numbers that get you close to the data in
% simulation. 
% rkfdG = 5; % nM-1s-1
% rkrdG = 300; % s-1
% rkcp1 = 0.012; %s-1
% rkcp2 = 0.024; %s-1
% cpol1 = 100; % nM
% cpol2 = 200; % nM

% changed to this because this is close the data. So we might be able to
% get much better fits this way. 

rkfdG = 10; % nM-1s-1
rkrdG = 120; % s-1
rkcp1 = 0.12; %s-1
rkcp2 = 0.12;%0.24; %s-1
cpol1 = 1.5; %4; % nM
cpol2 = 1.5; % nM

masterVector = log([...
rkfdG 
rkrdG
rkcp1
rkcp2
cpol1
cpol2]);

%    -0.6931
%     3.4012
%    -2.1203
%    -1.4271
%     1.3863
%     0.4055
% fixedParams vector
fixedParams = []; % just the rkfdG parameter is fixed

estParamsIx = setdiff((1:length(masterVector))', fixedParams);

% There are two geometries for this topology, and so two columns in the
% paramMaps field of the model_info struct. 
paramMap1 = [1 2 3 5]';
paramMap2 = [1 2 4 6]';
paramMap = [paramMap1 paramMap2];
lbshift = [-18;-12;0;0;-5;-5];% [-8;-2;-5;-5;-5];
ubshift = [+5;+24;22;22;15;15];%[27;27;26;18;18];
%lb and ub shifts are picked by looking at the corner plot. 
% cornerplot20181105_112220_tierra_calib_t1.jpg

% log transformed parameter ranges
paramRanges =  [masterVector(estParamsIx)+lbshift...
    masterVector(estParamsIx)+ubshift]; 
exp(paramRanges);
% paramRanges =
% 
%    10.6115   22.6115
%    -5.1203   11.8797
%    -1.9271   11.5729
%     1.8863    9.3863
%    -0.5945   10.4055
   
% The two geometries map to the first and second elements of the data_info
% struct array. 
dataIndices = [3 4]; % generated by the file data_info_tierra2018.m

%% next we define the dosing strategy.
dosedNames = {'dG'}; 
dosedVals = [1 2 4 8];

measuredSpecies = {{'pG'}};
msIx = 1; %

%% setup the MCMC simulation parameters
stdev = 1; % the standard deviation in the likelihood function.

tightening = 2; % default is 1. Type in help mcmc_info for more information 

nW = 400;  % number of walkers. good values: 200 - 400

stepsize = 1.2; % MCMC step size. try: 1.1 to 4 ish. DO NOT USE 1.

niter = 40;  % try: 2 - 50. Number of times to loop the MCMC. "help mcmc_info"

npoints = 4e4; % actual: 2e4 to 2e5 ish (or even 1e6 of the number of
%                        params is small)

thinning = 20;  % good values: 10 to 40 ish. 
% Number of steps to skip before recording positions of the walkers. 

%% pull all this together into an output struct.
% the mcmc info struct now is an array struct, the way struct should be used!

runsim_info = struct('stdev', {stdev}, ...
    'tightening', {tightening}, ...
    'nW', {nW}, ...
    'stepSize', {stepsize}, ...
    'nIter', {niter}, ...
    'nPoints', {npoints}, ...
    'thinning', {thinning}, ...
    'parallel', true);

% for now we simply make the model_info have just one model (topology).
% But the code will be written in a way such that multiple models can be used.

model_info = struct(...
    'circuitInfo',{circuitInfo},...
    'modelObj', {modelObj},... % array of model objects (different topologies)
    'modelName', {modelObj.name},...; % model names.
    'namesUnord', {namesUnord}, ... % names of parameters per model, unordered.
    'paramMaps', {paramMap}, ... % paramMap: matrix mapping elements in the 
    ...                   % master vector to the parameters or species given 
    ...                   % by active names for a given topology. 
    ...                   % Type help mcmc_info for more information. 
    'dosedNames', {dosedNames},... % cell arrays of species. cell array corresponds
    ...                               % to a model.
    'dosedVals', {dosedVals},...  % matrices of dose vals
    'measuredSpecies', {measuredSpecies}, ... % cell array of cell arrays of
    ...                  % species names. the elements of the inner
    ...                  % cell array get summed.
    'measuredSpeciesIndex', {msIx},...
    'dataToMapTo', dataIndices,...
    'doseWeighting', [1 1 1 1] ,... %[1*0.2 1/2*0.367 1/4*0.633 1/8]
    'experimentWeighting', 1); % each dataToMapTo property within an 
% element of the model_info array is a vector of length # of geometries.


%% IGNORE this for now. It has a subtle use, and we will update the
% documentation to describe how this is used in a future release. 
% Note to self (please ignore this). I tried the following:
% semanticGroups = {1, [2 4] [3 5]}; % cant do this, then the points never
% get differentiated at all. need some jitter I think. think about this....
% semanticGroups = num2cell((1:length(estParams))'); 
semanticGroups = {1; 2; [3, 4]; [5, 6]};
%% master parameter vector, param ranges,
master_info = struct(...
    'estNames', {estParams},...
    'masterVector', {masterVector},...
    'paramRanges', {paramRanges},...
    'fixedParams', {fixedParams},...
    'semanticGroups', {semanticGroups});


mcmc_info = struct('runsim_info', runsim_info, ...
    'model_info', model_info,...
    'master_info', master_info);

end