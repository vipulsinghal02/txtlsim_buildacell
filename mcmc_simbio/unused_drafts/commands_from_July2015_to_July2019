dosedose%-- 7/10/15, 2:47 PM --%
addpath(genpath(pwd))
%-- 7/12/15, 7:01 AM --%
addpath(genpath(pwd))
sessionNum = 1
FileName = ['T005_vivo_param_session_' num2str(sessionNum) '.csv'];
FileName
exist(FileName, 'file')
help exist
exist(FileName)
help warning
Test005_IFFLvivo_multistart_PLOT
help stem
acceptedParams
acceptedParams.kcon
setm(acceptedParams.kcon)
stem(acceptedParams.kcon)
hold; stem(rejected.kcon, 'r')
hold; stem(rejectedParam.kcon, 'r')
hold; stem(rejectedParams.kcon, 'r')
stem(1:length(acceptedParams.kcon),acceptedParams.kcon , 'g')
hold; stem(1:length(rejectedParams.kcon),rejectedParams.kcon, 'r')
stem(1:length(acceptedParams.kcon),acceptedParams.kcon , 'g')
hold; stem(length(acceptedParams.kcon) + (1:length(rejectedParams.kcon)),rejectedParams.kcon, 'r')
close all
stem(1:length(acceptedParams.kcon),acceptedParams.kcon , 'g')
hold; stem(length(acceptedParams.kcon) + (1:length(rejectedParams.kcon)),rejectedParams.kcon, 'r')
stem(1:length(acceptedParams(:,4)),acceptedParams(:,4) , 'g')
acceptedParams(:,4)
acceptedParams{:,4}
length(acceptedParams{:,4})
set(gca)
help scatter3
who
m1.parameters
help exist
clear all
clc
Test005_IFFLvivo_multistart_Jul11
Test005_IFFLvivo_multistart_PLOT
clear all
Test005_IFFLvivo_multistart_Jul11
m1
m1.parameters
mobj.parameters
updatedmobj
updatedmobj{1}.parameters
whos
who
%-- 7/13/15, 5:09 AM --%
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S1/s1_pre_estParams_2015January05_125022.mat')
params
clear all
edit txtl_init
txtl_init
geneexpr
%-- 7/13/15, 5:35 AM --%
edit estimation_example
pwd
sbioloadproject gprotein
who
m1
m1.species
m1.reactions
%-- 7/13/15, 8:14 AM --%
sbioloadproject gprotein
EAparameterchangeing0712
gd
m1.species
txtl_init
edit geneexpr
Mobj
geneexpr_for_loop
%-- 7/14/15, 7:58 AM --%
addpathgenpath(pwd))
addpath(genpath(pwd))
acceptedParams
acceptedParams.GlobalID
length(acceptedParams.GlobalID)
length(acceptedParams.GlobalID)-1
80000/1500
80000/500
acceptedParams
acceptedParams(4:end)
acceptedParams(:,4:end)
acceptedParams{:,4:end}
format short g
acceptedParams{:,4:end}
estParams
estNames
get(acceptedParams)
set(acceptedParams)
acceptedParams(1,:)
estNames'
acceptedParams(1,4:end)
estNames
Test005_IFFLvivo_multistart_Jul11
10^(numOrders/2)
initialEstimate/10^(numOrders/2)
Test005_IFFLvivo_multistart_Jul11
mex -setup
help exist
help mkdir
acceptedParams
%-- 7/14/15, 12:09 PM --%
addpath(genpath(pwd))
acceptedParams{parset+1,1}
acceptedParams{1+1,1}
acceptedParams.GlobalID
acceptedParams.GlobalID(2)
acceptedParams.GlobalID{2}
class(acceptedParams.GlobalID{2})
class(acceptedParams{1+1,1})
class(acceptedParams{1+1,1}{:})
class(acceptedParams{1+1,1}{1})
initialEstimate = acceptedParams{parset+1,4:end}
initialEstimate = acceptedParams{1+1,4:end}
class(initialEstimate)
help cd
cd
pwd
help mkdir
clc
clear all
Test005_IFFLvivo_multistart_Jul11
acceptedParams
Test005_IFFLvivo_multistart_Jul11
p = gcp('nocreate')
delete(p)
parpool
Test005_IFFLvivo_multistart_Jul11
acceptedParams.GlobalID{parset+1}
['seed_' acceptedParams.GlobalID{parset+1}]
exist(['seed_' acceptedParams.GlobalID{parset+1}], 'dir')
['seed_' acceptedParams.GlobalID{parset+1}]
exist(['seed_' acceptedParams.GlobalID{parset+1}])
exist([acceptedParams.GlobalID{parset+1}])
exist([acceptedParams.GlobalID{3+1}])
exist([acceptedParams.GlobalID{7+1}])
exist('3')
acceptedParams.GlobalID{7+1})
acceptedParams.GlobalID{7+1}
acceptedParams.GlobalID{2+1}
exist(acceptedParams.GlobalID{2+1})
exist([acceptedParams.GlobalID{2+1} '_seed'])
exist([acceptedParams.GlobalID{2+1} '_seed'], 'dir')
exist(['seed_' acceptedParams.GlobalID{2+1} '_seed'], 'dir')
exist(['seed_' acceptedParams.GlobalID{2+1}], 'dir')
Test005_IFFLvivo_multistart_Jul11
%-- 7/15/15, 5:25 AM --%
addpath(genpath('/Users/vipulsinghal/Dropbox/110114'))
Test005_IFFLvivo_multistart_PLOT
datestring
datestrings
%-- 7/15/15, 5:52 AM --%
addpath(genpath('/Users/vipulsinghal/Dropbox/110114'))
Test005_IFFLvivo_multistart_PLOT
acceptedParams
clear all
load Test005_param_sess_2
who
whos
acceptedParams
rejectedParams
clear all
load Test005_param_sess_1
whos
acceptedParams
rejectedParams
Test005_IFFLvivo_multistart_PLOT
parameterTable(simsToPlot2, :);
parameterTable(simsToPlot2, :)
clear all
load Test005_param_sess_1
acceptedParams
%-- 7/15/15, 7:24 AM --%
addpath(genpath(pwd))
Test005_IFFLvivo_multistart_PLOT
Test005_IFFLvivo_multistart_PLOT
Test005_IFFLvivo_multistart_PLOT
clear all
close all
vivo_init
path
vivo_init
acceptedParams
vivo_init
Test005_IFFLvivo_multistart_Jul11
gcp('nocreate')
delete(gcp('nocreate'))
Test005_IFFLvivo_multistart_Jul11
acceptedParams
clear all
load Test005_param_sess_1
acceptedParams
load Test005_param_sess_2
acceptedParams
vivo_init
Test005_IFFLvivo_multistart_PLOT
listOfDirs
listOfDirs.name
calss(listOfDirs.name)
class(listOfDirs.name)
class(listOfDirs(1).name)
Test005_IFFLvivo_multistart_PLOT
ls(sess3Dir)
dir('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/test005_simresults/July 4/070515_213000_session')
listod = ls(sess3Dir)
listod
class(listod
class(listod)
size(listod)
size(listod(1:20))
(listod(1:20))
(listod(1:50))
help ls
ls -1
listod = ls(sess3Dir, '-1')
ls sess3Dir -1
ls(sess3Dir -1)
ls(sess3Dir, -1)
ls(sess3Dir) -1
ls(sess3Dir) -1ls '/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/test005_simresults/July 4/070515_213000_session' -1
ls '/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/test005_simresults/July 4/070515_213000_session' -1
cd(sess3Dir); ls -1
cd(sess3Dir); a = ls -1
cd(sess3Dir); ls -1
ans
length(dataID)
help linspace
linspace(1,length(dataID),4)
floor(linspace(1,length(dataID),4))
floor(linspace(1,length(dataID),9))
floor(linspace(1,length(dataID),10))
ls
cd ..
ls
close all
help print
close all
help legend
simsToPlot2 = setdiff(12:21, [12 15 16 17 18 19 20])
setdiff(22:31, [31 24 26 25])
clear all
load pheno.mat ds
grpData = groupedData(ds);
grpData.Properties
ds
load pheno.mat
who
clear all
load pheno.mat
edit phenobarbdemo
ver
clc
%-- 7/16/15, 4:24 AM --%
simsToPlot2 = [2 4 9 13 14 21 22    23    27    28    29    30 33 39 33 39 62 71 82 84    87    90    91    93]
vivo_init
Test005_IFFLvivo_multistart_PLOT
close all
acceptedParams.VmT * acceptedParams.VpT
acceptedParams.VmT .* acceptedParams.VpT
order(acceptedParams.VmT .* acceptedParams.VpT)
[acceptedParams.localID order(acceptedParams.VmT .* acceptedParams.VpT)]
[acceptedParams.localID acceptedParams.VmT .* acceptedParams.VpT order(acceptedParams.VmT .* acceptedParams.VpT)]
[acceptedParams.localID acceptedParams.VmT .* acceptedParams.VpT ./ acceptedParams.KmT  acceptedParams.VmG .* acceptedParams.VpGs ./ acceptedParams.KmG]
[acceptedParams.localID acceptedParams.VmT .* acceptedParams.VpT ./ acceptedParams.KmT  acceptedParams.VmG .* acceptedParams.VpGs ./ acceptedParams.KmG order(acceptedParams.VmT .* acceptedParams.VpT ./ acceptedParams.KmT)  order(acceptedParams.VmG .* acceptedParams.VpGs ./ acceptedParams.KmG)]
a = [acceptedParams.localID acceptedParams.VmT .* acceptedParams.VpT ./ acceptedParams.KmT  acceptedParams.VmG .* acceptedParams.VpGs ./ acceptedParams.KmG order(acceptedParams.VmT .* acceptedParams.VpT ./ acceptedParams.KmT)  order(acceptedParams.VmG .* acceptedParams.VpGs ./ acceptedParams.KmG)]
a = a(2:end,:)
figure; subplot(2,2,1); stem(a(:,1), a(:,2)); subplot(2,2,2); stem(a(:,1), a(:,3)); subplot(2,2,3); stem(a(:,1), a(:,3)); subplot(2,2,4); stem(a(:,1), a(:,5));
close all
clear all
sessionNum = 3;
ParamFileName = ['Test005_param_sess_' num2str(sessionNum) '.mat'];
load(ParamFileName);
accepted
acceptedParams
T1 = acceptedParams(2:end, :)
size(T1, 1)
T1(1,:)
table2array( T)1(1,:)
table2array( T1(1,:))
table2array( T1(1,4:end))
format short g
table2array( T1(1,4:end))
j = 1:width(T1)-3
T1.Properties.VariableNames
paramidx = 1
clear all
close all
clc
paramidx = 1
m1
m1.parameters
acceptedParams(2,4:end)
edit transform
estParam{1}
T1.Properties.VariableNames == estParam{1}
T1.Properties.VariableNames{:} == estParam{1}
eval(['T1(1).' estParam{1}])
T1.VpGs
T1(1).VpGs
T1.VpGs(1)
eval(['T1.' estParam{1}(1)])
eval(['T1.' estParam{1} '(1)'])
paramIC = [eval(['T1.' estParam{1} '(' num2str(paramidx) ')']), eval(['T1.' estParam{2} '(' num2str(paramidx) ')'])]
TestScript
clear all
load('test008ME_062915_110151_DATA.mat', 'fitparam');
fitparam
addpath(genpath(pwd))
clear all
load test008ME_071515_160206_DATA.mat
fitparam
help trellis
trellis(simI)
help sbiotrellis
sbiotrellis(simI)
simI.plot
tduration/3600
tduration/60
gd_E
gd_I(1:2,:)
gd_E(1:2,:)
figure; t = sbiotrellis(gd_E, ID, time, GFP); hold on; t.plot(gd_I, 'ID_I', 't_I', 'GFP_I')
figure; t = sbiotrellis(gd_E, 'ID', 'time', 'GFP'); hold on; t.plot(gd_I, 'ID_I', 't_I', 'GFP_I')
figure; t = sbiotrellis(gd_E, 'ID', 'time', 'GFP'); hold on; t.plot(gd_I, 'ID_I', 'time_I', 'GFP_I')
%-- 7/16/15, 9:42 AM --%
clear all
load Test005_Estimation_Run_50starts_Feb8_15
whos
estNames
finalEstimate
m1
mobj.parameter
IFFL_vivo_2Feb2015_goodparam
IFFL_vivo_2Feb2015_goodparam.parameters
clear all
load mobj_IFFL_aTc_inflow_Feb15)estimated1
whos
m_aTc_input_feb15
m_aTc_input_feb15.parameters
clear all
load Workspace_test005_IFFL_aTc_inflow_Feb15_estimated_2
m_aTc_input_feb15.parameters
mobj.parameters
clear all
load mobj_IFFL_aTc_inflow_Feb15_estimated2_initialAtcparameter
m1
m1.parameters
for i = 1:16
aa{i} = m1.parameters(i).Name;
end
aa
for i = 1:16
bb{i} = m1.parameters(i).Value;
end
bb
for i = 1:16
bb(i) = m1.parameters(i).Value;
end
clear bb
for i = 1:16
bb(i) = m1.parameters(i).Value;
end
bb
format short g
bb
bb'
load('020615_Data.mat', 'gfp_over_od_TxBCD13')
clear all
load test008ME_042815_143024_DATA
clear all
test013_vitroTX_analysis
clear all
load test0012ME_071515_204347_DATA
addpath(genpath(pwd))
load test0012ME_071515_204347_DATA
who
tduration/60
plotinfo = struct('mode', 'isvivo',...
'axisStyle', 'diffregimes');
plotpanels(gd_E, gd_I, 'customsize', plotinfo)
fitparam
fitparam{2,1}
format short g
fitparam{2,1}
fitparam{2,2}
test013_vitroTX_analysis
clear all
Test014_methodology_verification
load('020615_Data.mat','gfp_over_od_404p')
squeeze(gfp_over_od_404p(1,1,1,:))
squeeze(gfp_over_od_404p(1,1,1,1:100))
gd1
Test014_methodology_verification
artificial_gfp_over_od_404p = zeros(2, nG, nT, length(timevector));
size(artificial_gfp_over_od_404p)
artificial_gfp_over_od_404p(1,i,j,:) = noise1+xGFP1;
size(artificial_gfp_over_od_404p(1,i,j,:))
pwd
Test014_methodology_verification
help suplabel
addpath(genpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB'
addpath(genpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB'))
help suplabel
Test014_methodology_verification
gcf
help print
set(h3,'FontSize',15)
set(h3,'FontSize',15)
set(h2,'FontSize',15)
set(h1,'FontSize',15)
print(cf,'-depsc','-tiff','-r300',[dirToSaveIn savestr '_image'])
print(cf,'-dpdf','-r300',[dirToSaveIn savestr '_pdf'])
print(cf,'-dpng','-r300',[dirToSaveIn savestr '_png'])
saveas(cf, [dirToSaveIn savestr '_fig'])
save([dirToSaveIn savestr],'gd1', 'gd2', 'artificial_gfp_over_od_404p', ...
'Mobj1', 'Mobj2', 'm1', 'baseG', 'baseT', 'GFPfactors', 'tetRfactors', 'aTc1', 'aTc2');
help print
clear all
fp10000
fp10000{2,1}
whos
m1
m1.parameters
who
fp10000{2,1}
fp10000
fp214
who
fp2140vivo_from10000vitro
vivo2140GFPfp10000{2,1}/vitro10000GFP
vivo2140GFP*fp10000{2,1}/vitro10000GFP
who
addpath(genpath(pwd))
clear all
GFPfactors = 0.4*fliplr([0.05 0.1 0.5 1 5 10 50]);
tetRfactors = 0.03*fliplr([0.05 0.1 0.5 1 5 10 50]);
help meshgrid
GFPfactors = 0.4*fliplr([0.05 0.1 0.5 1 5 10 50]);
tetRfactors = 0.03*fliplr([0.05 0.1 0.5 1 5 10 50]);
[GFP_arti,tetR_arti] = meshgrid(GFPfactors,tetRfactors);
GFP_arti
fitparam{2,1}
fitparam
[tetR_arti, GFP_arti] = meshgrid(tetRfactors,GFPfactors);
GFP_arti
tetR_arti
fitparam{2,2}
fitparam{2,2}./tetR_arti
help scatter
help reshape
help scatter
addpath(genpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB'))
gd_E(1:50,:)
960/60
scrsz = get(groot,'ScreenSize')
test015_generateVivoPredictions
%-- 7/16/15, 5:31 PM --%
addpath(genpath(pwd))
edit vivo_init
matlab_init
gcf
help linkaxes
linkaxes
set(gca, 'XTick', []);
hgload()
help hgload
h=get(gcf,'children');
h
for i = 1:length(h)-4
set(h(i), 'XTick', []);
end
for i = 1:length(h)-4
set(h(i), 'YTick', []);
end
manipulate_previouslysaved_subplots
set(gca, 'XTick', []);
linkaxes
h
h(end)
h(end-1)
h(end-3)
cla(h(end))
h(end-3)
h(end-1)
help cla
help delete
delete(h(end))
h
manipulate_previouslysaved_subplots
test015_generateVivoPredictions
test015_generateVivoPredictions
%-- 7/16/15, 11:05 PM --%
test015_generateVivoPredictions
matlab_init
load test0012ME_071515_204347_DATA
%-- 7/18/15, 7:00 AM --%
help reshape
enrique
2080/160
reshape(mydata,160,13)
clc
a = [1 2 3 4]
b = [1 2 3 4; 5 6 7 8]
a(1:3)
c =  [4 2 6 9]
c(1:3)
b
b(2,2:3)
1:3
[1 2 3 4]
1:4
c
c([1 2 3])
c(1:3)
c([1 3 4])
c
c([1 4 3])
d = c([1 4 3])
help mean
mystring = 'hello world'
mystring(1:4)
mystring([1 2 3 4])
mystring([1 4 3 4 6 2 3 2 4])
a
clear a
a
b
clc
help mean
X = [ 1 4 8]
mean(X)
X = magic(3)
mean(X)
Y = X'
mean(Y)
[1 2 3; 4 5 6; 7 8 9]
Z = [1 2 3; 4 5 6; 7 8 9]
mean(Z)
mean(Z,2)
A = zeros(3,3,2)
A(:,:,1) = Z
A(:,:,3) = magic(3)
help cat
D = cat(3, Z, magic(3))
D = cat(2, Z, magic(3))
D = cat(1, Z, magic(3))
%-- 7/22/15, 1:37 AM --%
txtl_init
dir(auxiliary)
cd auxiliary
ls
edit data_importer
help errorbar
y = sin(0:0.1:10);
t = 0:0.1:10;
plot(t,y)
help sd
help std
error = std(Y)
error = std(y)
help errorbar
figure; errorbar(t, y, error)
figure; errorbar(t, y, error*ones(length(t),1))
help interp1
figure; errorbar(t, y, error*ones(length(t),1))
newSinWave = interp1(t, y, 0:2:10)
figure; subplot(2,1,1); errorbar(t, y, error*ones(length(t),1)); subplot(2,1,2); errorbar(0:2:10, newSineWave, error*ones(length(newSineWave),1));
figure; subplot(2,1,1); errorbar(t, y, error*ones(length(t),1)); subplot(2,1,2); errorbar(0:2:10, newSinWave, error*ones(length(newSinWave),1));
newT = 0:0.5:10;newSinWave = interp1(t, y, newT); figure; subplot(2,1,1); errorbar(t, y, error*ones(length(t),1)); subplot(2,1,2); errorbar(newT, newSinWave, error*ones(length(newSinWave),1));
magic(6)
magic(7)
myData = magic(7)
mySubtractedData = myData(:, 2:end) - repmat(myData(:,1), 1, 6)
help repmat
myMagic
myData
help fliplr
a = [2 4 6 8; 2.5 5 7.5 10]
a(:,2)
a(:,[2 4])
a(:,[4 2])
size(a,2)
size(a)
1:4
a(:,1:4)
a(:,[1 2 3 4])
4:1
[4 3 2 1]
a(:,[4 3 2 1])
b = a(:,[4 1 2 3])
a
fliplr(a)
b = a(:,[4 1:3])
txtl_init
addpath(genpath('/Users/vipulsinghal/Dropbox/Documents/SURF/SURF 2015/AnushkaEnrique'))
path
clc
edit data_importer
experim =  data_importer('7-8CalibrationVICTORR.xls','victor')
experim =  data_importer('7-8CalibrationVICTORR.csv','victor')
strfind(experim.textdata(1,2),'TÂ°');
experim.textdata(1,2)
experim =  data_importer('7-8CalibrationVICTORR.csv','victor')
experim
extractVictor
C
C{1}
C{4}
C{5}
C{6}
C{6}c
c
C
C{3}
clc
strcmp(C{3}, 'F02')
Repeat = C{2}; Well = C{3}; Time = C{5}; GFP = C{6};
myfo2ID = strcmp(C{3}, 'F02');
Time(myfo2ID)
GFP(myfo2ID)
Time(myfo2ID)
tstring = Time(myfo2ID);
tstring(1)
tstring{1}
class(tstring{1})
class(tstring(1))
tstring(1)
a = tstring(1)
a([1 2 4 5 78])
size(a)
a = tstring{1}
size(a)
a([1 2 4 5 7 8])
class(a([1 2 4 5 7 8]))
str2num(a([1 2 4 5 7 8]))
a([1 2])
a([4 5])
a([7 8])
['hello %shelp fprintf
help fprintf
sprintf
help sprintf
a = sprintf('F0%s',1)
a = sprintf('F0%s',num2str(1))
a = sprintf('F0%s',num2str(2))
a = sprintf('F0%n',2)
a = sprintf(['F0' num2str('%n')],2)
a = sprintf('F0%s',num2str(2))
extractVictor
2
'2
'2'
class(2)
class('2')
help cellfun
who
b
'my_b_array'
help eval
stringofinterest = 'my_b_array'
eval([stringofinterest '= b'])
unique(C{3})
size(unique(C{3}))
length(unique(C{3}))
[1 1 1 0 0 0]
[1 1 1 0 0 0] == 1
size([1 1 1 0 0 0] == 1)
find([1 1 1 0 0 0], 1)
sum([1 1 1 0 0 0], 1)
sum([1 1 1 0 0 0])
help find
find([1 1 1 0 0 0],,1,last)
find([1 1 1 0 0 0],1,last)
find([1 1 1 0 0 0],1,'last')
unique(C{3})
txtl_init
load 050815_Data.mat
who
clc
path
Modeling7_21
clc
clear all
load 'GFP_and_tetR_variation_9Feb_2015.mat'
whos
obj
obj.parameters
simbiology
load('mobj_IFFL_aTc_inflow_Feb15_estimated2_initialAtcparameter.mat');
whos
clear all
load('mobj_IFFL_aTc_inflow_Feb15_estimated2_initialAtcparameter.mat');
whos
simbiology(m1)
who
t_run1
clear all
who
whos
t
values
values{1}
whos
c
x
for i = 1:25
subplot(5,5,i)
plot(t{i}, x{i}(:,6))
end
%-- 7/23/15, 3:29 AM --%
load('mobj_IFFL_aTc_inflow_Feb15_estimated2_initialAtcparameter.mat');
simbiology(m1)
whos
save('data_10by10_july2015')
values
scanNames
names
names{1}
clc
whos
scanNames
tobj
values
values{1}
names
names{1}
strcmp(names{1}, 'pGs')
help axes
help axis
GFPtetR_variation_10by10_script
%-- 7/23/15, 4:19 AM --%
addpath(genpath(pwd))
ls
%-- 7/23/15, 8:54 AM --%
txtl_init
edit geneexpr
geneexpr
negautoreg
who
whos
ver
Mobj
Mobj.Species
Mobj.reactions
%-- 7/25/15, 1:28 AM --%
ls
lead set1_ptetExpression_Mobj.mat
led set1_ptetExpression_Mobj.mat
load set1_ptetExpression_Mobj.mat
who
Mobj_s1
Mobj_s1.parameters
chemotaxis
load '/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S2/set2_placExpression_Mobj.mat'
whos
Mobj_s2
OverallPanelSummary
path
txtl_init
edit txtl_init
edit geneexpr
geneexpr
Mobj
simbiology(Mobj)
ptet_repreassion
path
ptet_repreassion
%-- 7/25/15, 5:48 AM --%
txtl_init
geneexpr
edit geneexpr
geneexpr
clc
geneexpr
clc
%-- 7/25/15, 5:56 AM --%
txtl_init
dir examples
edit ptet_repreassion.m
ptet_repreassion
path
edit geneexpr
txtl_init
edit ptet_repreassion
txtl_init
edit ptet_repreassion
ptet_repreassion
txtl_init
edit geneexpr
geneexpr
clc
clear all
close all
geneexpr
Mobj
Mobj.reactions
simbiology(Mobj)
Mobj.reaction
Mobj.reaction(1)
Mobj.reaction(1).KineticLaw
get(Mobj.reactions(1))
get(Mobj.reactions(1).Parent)
m = get(Mobj.reactions(1).Parent)
m
m.reactions
m.Reactions
get(Mobj.reactions(1))
get(Mobj.reactions(1).Products)
get(Mobj.reactions(1).Reactants)
get(Mobj.reactions(1).Reactants(1))
get(Mobj.reactions(1).Reactants(2))
clc
get(Mobj.reactions(1).KineticLaw)
get(Mobj.reactions(1))
Mobj.parameters
get(Mobj.reactions(5).KineticLaw)
clc
get(Mobj.reactions(5).KineticLaw)
geneexpr
edit genexpr
geneexpr
Mobj.reactions
simbiology(Mobj)
%-- 7/27/15, 1:20 AM --%
addpath(genpath(pwd))
path
clc
whos
load data_10by10_july2015
whos
clear all
concatenateVitroPanelData
whos
concatenateVitroPanelData
['plotpanels(gdE' uniqlblvitro{i} ', gdI' uniqlblvitro{i} ', ''customsize'', plotinfo)']
whos
concatenateVitroPanelData
clear all
concatenateVitroPanelData
whos
unique(gd_E.ID)
whos
clear gd_E gd_I
who
whos
concatenateVitroPanelData
gdE1
clc
gdE1
gdE1([1 161 321],:)
gdE1.ID == 1
gdE1(gdE1.ID == 1)
gdE1(gdE1.ID == 1,1)
gdE1(gdE1.ID == 1,:)
length(gdE1(gdE1.ID == 1,:))
class(gdE1(gdE1.ID == 1,:))
size(gdE1(gdE1.ID == 1,:))
size(gdE1(gdE1.ID == 2,:))
size(gdE1(gdE1.ID == 3,:))
(gdE1(gdE1.ID == 3,:))
gdE1.ID(gdE1.ID == 3,:)
length(gdE1.ID(gdE1.ID == 3,:) )
gdE1.ID(gdE1.ID == 3,:) = ones(length(gdE1.ID(gdE1.ID == 3,:)),1)
gdE1.ID(gdE1.ID == 3,:)
gdE1.ID(gdE1.ID == 1,:)
gdE2(1:200,:)
gdE2.ID(gdE2.ID == 1,:)
gdE2.ID(gdE2.ID == 1,:) = 2*ones(length(gdE2.ID(gdE2.ID == 1,:)),1);
gdE2(1:200,:)
clc
clear all
concatenateVitroPanelData_editmode
[unique(gdE1.ID) unique(gdI1.ID_I)]
concatenateVitroPanelData_editmode
workspace
concatenateVitroPanelData_editmode
gdE1.ID(gdE1.ID == j,:)
j
gdE1.ID(500:700,:)
gdE1.ID(800:1200,:)
gdE1
gdE1(1)
class(gdE1)
class(gdE1(1:10,:))
(gdE1(1:10,:))
(gdE1(115+1:10,:))
(gdE1(115+(1:10),:))
(gdE1(2*115+(1:10),:))
(gdE1(8*115+(1:10),:))
(gd_E(8*115+(1:10),:))
concatenateVitroPanelData_editmode
(gdE1(8*115+(1:10),:))
(gdE1(9*115+(1:10),:))
(gdE1(10*115+(1:10),:))
concatenateVitroPanelData_editmode
unique(gdE1.ID)
concatenateVitroPanelData_editmode
diff([unique(gdE1.ID) unique(gdI1.ID_I)])
diff([unique(gdE1.ID) unique(gdI1.ID_I)]')
sum(diff([unique(gdE1.ID) unique(gdI1.ID_I)]'))
concatenateVitroPanelData_editmode
[unique(gdE2.ID) unique(gdI2.ID_I)]
[unique(gdE1.ID) unique(gdI1.ID_I) unique(gdE2.ID) unique(gdI2.ID_I)]
diff([unique(gdE1.ID) unique(gdI1.ID_I) unique(gdE2.ID) unique(gdI2.ID_I)]')'
diff(diff([unique(gdE1.ID) unique(gdI1.ID_I) unique(gdE2.ID) unique(gdI2.ID_I)]')')
[unique(gdE1.ID) unique(gdI1.ID_I) unique(gdE2.ID) unique(gdI2.ID_I) unique(gdE3.ID) unique(gdI3.ID_I)]
concatenateVitroPanelData_editmode
[unique(gdE2.ID) unique(gdI2.ID_I)]
concatenateVitroPanelData_editmode
clear all
concatenateVitroPanelData_editmode
help sort
[X,I] = sort([gdE1.ID; gdE2.ID]);
I
origGDE = [gdE1.ID; gdE2.ID];
newGDE = origGDE(I, :);
newGDE(4*115+(1:10),:)
origGDE = [gdE1; gdE2];
newGDE = origGDE(I, :);
newGDE(4*115+(1:10),:)
newGDE(8*115+(1:10),:)
newGDE(16*115+(1:10),:)
clc
concatenateVitroPanelData_editmode
clear all;  load('020615_Data.mat')
whos
checkVitroSimulations
ls
clc
ls
%-- 7/31/15, 3:04 AM --%
txtl_init
edit geneexpr
edit negautoreg
addpath(genpath(pwd))
%-- 8/2/15, 2:36 AM --%
addpath(genpath(pwd))
dir('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/test011/SimData')
concatenateVitroPanelData2_editmode
who
concatenateVitroPanelData2_editmode
%-- 8/3/15, 12:53 PM --%
dir('characterization')
txtl_init
geneexpr_VNPRLtests
txtl_init
geneexpr_VNPRLtests
clc
geneexpr_VNPRLtests
RNAdegradation_test
close all; clear all; clc
RNAdegradation_test
geneexpr_DNAsweep
ktx_raw
class(ktx_raw)
RNA_Length
tube
tube.reactions
clear all
geneexpr_DNAsweep
set(lgh)
geneexpr_DNAsweep
help legend
geneexpr_DNAsweep
h
geneexpr_DNAsweep
geneexpr_VNPRLtests
RNAdegradation_test
geneexpr_DNAsweep
RNAdegradation_test
ls
addpath(genpath(pwd))
Test004_ptet_expression
Test004_s2_plac_expression
%-- 8/3/15, 4:13 PM --%
txtl_init
Test004_s2_plac_expression
%-- 8/3/15, 4:15 PM --%
txtl_init
Test004_s2_plac_expression
%-- 8/3/15, 4:20 PM --%
Test004_s2_plac_expression
max(finalGFP_exp, 0)
varSpecies
Test004_s2_plac_expression
close all; Test004_s2_plac_expression
clear all
Test004_s2_plac_expression
edit GenerateTrainingPlots
txtl_init
Test004_s2_plac_expression
Test004_ptet_expression
clear all
close all
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/set3set4_combined_grpData.mat', 'grpData_s3s4');
Test004_s3s4_combined
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S3/set3_tetRDNAvariation_Mobj.mat')
whos
Test004_s3s4_combined
%-- 8/3/15, 4:42 PM --%
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S3/s3s4 iterations/mObjs3s4.mat')
who
Test004_s3s4_combined
close all
Test004_s5_plasActivation
%-- 8/3/15, 4:48 PM --%
clear all
txtlDir = '/Users/vipulsinghal/Documents/toolbox/txtl-code-166-trunk';
cd(txtlDir)
addpath(txtlDir);
txtl_init
Test004_s5_plasActivation
who
Test004_s5_plasActivation
geneexpr
Mobj
clear all
geneexpr
Mobj
edit getparam
getparam(Mobj)
a = getparam(Mobj)
a(:,1)
%-- 8/10/15, 3:55 AM --%
addpath(genpath(pwd))
load('050815_Data.mat')
addpath(genpath(pwd))
load('050815_Data.mat')
whos
%-- 8/12/15, 7:57 AM --%
mainSSA
whos
%-- 8/12/15, 8:56 AM --%
txtl_init
edit txtl_extract
%-- 8/13/15, 9:02 AM --%
addpath(genpath(pwd))
%-- 8/14/15, 1:26 AM --%
dir('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/test013_vitroTX/SimulationData')
cd('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/test013_vitroTX/SimulationData')
ls
help hist
addpath(genpath(pwd))
edit transform
who
a = 1
who
save('DemoForCody')
clear all
who
load('DemoForCody')
who
a
help save
help load
clc
datestring = datestr(now, 'mmddyy_HHMMSS')
dirToSaveIn = [pwd '/SimulationData/test013ME_' datestring '/']
savestr = ['test013ME_' dataname{1} '_' num2str(j) '_' datestring]
clc
clear all
clear all; load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/test012_vivoTX/071515_211221/test0012ME_071515_211221_DATA.mat')
whos
m1.species
clear all; load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/test012_vivoTX/071515_204347/test0012ME_071515_204347_DATA.mat')
whos
m1.species
concatenateVitroPanelData_editmode
cell.ampty
cell.empty
size(cell.empty)
ID
ID'
concatenateVitroPanelData_editmode
whos
who
listOfVarsToSave
listOfVarsToSave'
help save
listOfVarsToSave'
clear all
whos
load('combinedVitroTLdata.mat')
whos
fp10
fp10{2,1}
clear all
load('test013ME_081015_151448')
dir('test013ME_081015_151448')
addpath(genpath(pwd))
dir('test013ME_081015_151448')
load('test013ME_endMatrixGFP_TxBCD13_vitroSet2_1_081015_151448_DATA')
whos
fitparam{2,1}
help plotpanels
edit plotpanels
%-- 8/14/15, 6:19 AM --%
addpath(genpath(pwd))
close all
help suptitle
clear all
load('combinedVitroTLdata.mat')
whos
fp10
fp10{2,1}
fp10set1_table = array2table(fp10{2,1});
fp10set1_table
writetable(fp10set1_table,'fp10set1_table','Sheet',1)
writetable(fp10set1_table,'fp10set1_table.xlsx','Sheet',1)
writetable(fp10set1_table,'fp10set1_table.txt')
clc
whos
evalstr = ['plotpanels(gdE' uniqlblvitro{i} ', gdI' uniqlblvitro{i} ', ''customsize'', plotinfo)'];
uniqlblvitro = {'10000'
'1000'
'100'
'10'
'1000set2'
'100set2'
'1000set3'
'100set3'}
i = 1
evalstr = ['plotpanels(gdE' uniqlblvitro{i} ', gdI' uniqlblvitro{i} ', ''customsize'', plotinfo)'];
evalstr
plotinfo = struct('mode', 'isvitro',...
'axisStyle', 'max');
plotpanels(gdE10000, gdI10000, 'customsize', plotinfo)
close all
help groupedData2table
writetable(groupedData2table(gdE10000), 'vitro10000_set1_TL.txt')
%-- 8/17/15, 6:29 AM --%
help plot
f1 = figure
f2 = figure
ax1 = f1.CurrentAxis
ax1 = f1.CurrentAxes
ax2 = f2.CurrentAxes
plot(ax1,0:10, sin(0:10))
[0:10; sin(0:10)]
ax1
f1 = figure
plot(0:10, sin(0:10))
ax1 = f1.CurrentAxis
ax1 = f1.CurrentAxes
f2 = figure
plot(0:10, cos(0:10))
ax2 = f2.CurrentAxes
plot(0:10, cos(2*(0:10)))
hold on; plot(ax1,0:10, cos(2*(0:10)))
set(f1,'CurrentAxes',ax1); hold on; plot(ax1,0:10, cos(3*(0:10)))
[x,y] = meshgrid([1 3 5], [6 7 9])
%-- 8/18/15, 8:13 AM --%
txtl_init
ls
editlacTetramertetDimergraphing
edit lacTetramertetDimergraphing
lacTetramertetDimergraphing
whos
save('51by51toggle')
ls
manualfit_test009
edit manualfit_test009
clear all
help clear
a = 1
clear vars
whos
clearvars
whos
a = 1
clearvars
who
a = 1
who
clear all
edit txtl_transcriptions
txtl_init
edit txtl_transcription
geneexpr
rna
get(rna)
edit geneexpr
RNA_LENGTH
RNA_length
RNA_Length
ktxExpression
clear all
ls
load('51by51toggle.mat')
whos
%-- 8/20/15, 5:41 AM --%
51000/1700
load('/Users/vipulsinghal/Dropbox/Backups/Backup_or_impt_work_feb2015/port from pc to mac 21 jan/TXTL/trunk/examples/Vipul/Genetic Toggle/old toggle simulations/0 to 30/lacI and tetR 0 to 30.mat')
whos
clear all
load('/Users/vipulsinghal/Dropbox/Backups/Backup_or_impt_work_feb2015/port from pc to mac 21 jan/TXTL/trunk/examples/Vipul/Genetic Toggle/old toggle simulations/0 to 30/lacI and tetR 0 to 30.mat')
whos
x_ode
clc
size(x_ode)
initial_lacI
initial_tetR
ls
dir examples
edit genetic_toggle_switch_trial2.m
txtl_init
edit genetic_toggle_switch_trial2.m
genetic_toggle_switch_trial2
%-- 8/21/15, 12:29 AM --%
txtl_init
genetic_toggle_switch_trial2
%-- 8/21/15, 12:40 AM --%
txtl_init
genetic_toggle_switch_trial2
%-- 8/21/15, 12:54 AM --%
txtl_init
genetic_toggle_switch_trial2
%-- 8/23/15, 4:51 AM --%
addpath(genpath(pwd))
who
help save
edit plotpanels
clear all
close all
%-- 9/17/15, 6:28 AM --%
txtl_init
ls
edit HandFit
HandFit
x_ode4
t_ode2
Mobj.species.Names
get(Mobj.species, 'Names')
get(Mobj.species, 'Name')
namelist = get(Mobj.species, 'Name');
size(namelist)
namelist = [namelist; {}]
size(namelist)
namelist = [namelist; {''}]
size(namelist)
Mobj_cellarray{1}
namelist = get(Mobj_cellarray{1}.species, 'Name');
size(namelist)
clc
edit HendFit
edit HandFit
35000/2600
help function
%-- 9/17/15, 8:00 AM --%
txtl_init
whos
ls
lacIexperimentaldata
%-- 9/20/15, 9:40 AM --%
txtl_init
edit HandFit
HandFit
Mobj
Mobj.cellarray
Mobj_cellarray
Mobj_cellarray{1}
get(Mobj_cellarray{1}.species, 'Name')
HandFit
speciesToPlot
0.0125*10^-6 / 444.435
0.0125*10^-6 / 444.435 *1000
2* 0.0125*10^-6 / 444.435 *1000
x = 100
x = 100 % ug/mL of aTc
MW = 468.22 %g/Mol
MW2 = (10^6)*(MW/(10^9)) % ug/nM
conc = x/MW2
checkaTcConcentrations
X2
conc2
MW2
x
checkaTcConcentrations
0.0125*10^-6 / 444.435
2* 0.0125*10^-6 / 444.435 *1000
MW2
checkaTcConcentrations
table(X2, conc2)
%-- 9/20/15, 4:14 PM --%
edit txtl_init
pwd
edit txtl_init
edit checkaTcConcentrations.m
checkaTcConcentrations
Mobj
ParaChangeRepInd
txtl_init
ParaChangeRepInd
Mobj.reactions
Mobj.reactions(13)
Mobj.reactions(13).KineticLaw
Mobj.reactions(13).KineticLaw.getparameters
3.590530999920000e+04/3600
104/0.23
rx = Mobj.reactions(13)
rx
rx.kineticlaw
rx.kineticlaw.getparameters
length(rx.kineticlaw.getparameters)
for i = 1:length(rx.kineticlaw.getparameters)
rx.kineticlaw.getparameters(i).name
end
get(rx.kineticlaw.getparameters(1), 'Name')
get(rx.kineticlaw.getparameters(1))
get(rx.kineticlaw.getparameters)
get(rx.kineticlaw.getparameters, 'Name')
parnames = get(rx.kineticlaw.getparameters, 'Name')
parnames{1}
table(parnames)
t = table(parnames)
t(1)
t.parnames(1)
class(t.parnames(1))
class(t.parnames{1})
t.parnames{1}
pwd
%-- 9/20/15, 9:22 PM --%
txtl_init
path
edit txtl_init
vs_TetRules
Mobj
Mobj.rules
ls
cd test011
ls
edit test011_mainscript
load('vitro_Mobj_may5_addedClpXRxn.mat')
whos
clear all
load('vitro_Mobj_may5_addedClpXRxn.mat')
whos
mobj
mobj.rules
edit getparam
edit setparam
ls
edit dataVal
whos
[p, pt] = getparam(mobj);
whos
pt
edit geneexpt
edit geneexpr
geneexpr
getparam(Mobj)
104/0.23
vs_TetRules
aTca
atcs
atca
aTca
DataHandFit
aTca
plot(aTca)
figure; plot(aTca)
figure; plot(aTcb)
figure; plot(aTcc)
figure; plot(aTca(:,1))
HandFit
p(idx) = plot(t_ode2{idx}, myGFPdata4{idx}.data);
plot(t_ode2{idx}, myGFPdata4{idx}.data);
idx
p
clear all
HandFit
close all
HandFit
size(aTcconc)
idx
Mobj_cellarray
HandFit
clc
clear all
tetRmins
tetRtimes
timetomins
help mod
DataHandFit
timetomins
d
r
y
tetRmins(i)
i
tetRtimes(55:65)
tetRmins
DataHandFit
aTctimes
HandFit
clc
HandFit
idxes
HandFit
close all
HandFit
ParaChangeRepInd
HandFit
ParaChangeRepInd
HandFit
%-- 9/22/15, 3:20 AM --%
txtl_init
HandFit
%-- 9/22/15, 1:35 PM --%
txtl_init
HandFit
whos
Mobj
Mobj.reactions
Mobj.reactions(25).getparameters
Mobj.reactions(25).KineticLaw
Mobj.reactions(25).KineticLaw.getparameters
HandFit
simbiology
%-- 9/23/15, 12:05 AM --%
txtl_init
path
who
ls
help ls
ls -a
ls
ls -t
clc
ls -t
edit Instructions.txt
edit handfittingIPTG
edit handfittingLacI
edit handfittingdataIPTG
edit handfittingdataLacI
edit placparameterestimation
edit placgroupeddata
edit placMobj
edit IPTGexperimentaldata
edit placexperimentaldata
edit lacIexperimentaldata
edit handfitting
edit BistableSwitchExperimentalData
edit BistableSwitchGrid
BistableSwitchGrid
BistableSwitchExperimentalData
handfitting
clc
GFP = [-0.109290101666667;1.78999463900000;5.34635362433333;13.4338211500000;25.1928453366667;41.0236642600000;58.7951209333333;78.3063578766667;97.2032072000000;117.172281093333;136.169559166667;155.617289700000;173.468498600000;192.242765800000;211.232659466667;227.378056600000;245.360709033333;261.783762166667;278.627729833333;294.350735566667;312.038009333333;327.272163333333;344.358341566667;359.509789566667;373.998112533333;389.174667733333;403.277521533333;417.792428533333;431.629441566667;443.212715466667;454.326337300000;466.605227900000;480.290120933333;490.247335333333;503.167197600000;511.635703600000;520.898778166667;530.269665966667;540.240172400000;550.154556866667;557.872801066667;567.847738200000;575.004763000000;583.064169566667;591.683318666667;597.205422566667;605.213137866667;610.908038266667;620.107606433333;627.031282100000;631.354148666667;636.072822666667;641.909504833333;650.038325400000;658.382772366667;663.163475866667;667.910210800000;671.044178300000;678.032837233333;682.680620366667;688.865849333333;693.572708200000;698.031448933333;703.425063166667;707.247262933333;714.162077200000;715.825059033333;720.664838266667;724.977366633333;730.447779266667;732.239250833333;737.099706533334;740.989843433333;741.906994100000;749.298844933333;750.777215066667;755.147342266667;757.931286066667;762.059202733333;763.243671133333;770.089071433333;772.187736733333;774.612795500000;777.609411933333;781.245523166667;783.227513966667;784.360291066667;789.595877700000;792.505357466667;794.552331500000;797.919648133333;797.894540966667;800.433320466667;804.744371900000;807.030602700000;808.752660266667;813.122787433333;814.270333466667;813.209924133333;819.629979166667;821.465757500000;822.214542366667;-0.180180978333333;1.26126684933333;3.74540132366667;8.04611451533333;15.7230057133333;24.6582099733333;34.5504410766667;44.9123242333333;56.1573895600000;67.7997391833333;79.2249854933333;89.9457537133333;100.772858266667;110.985575206667;122.096243253333;131.478946166667;142.474416500000;153.032726466667;161.925100866667;172.911709833333;181.889744033333;191.402413533333;201.099694733333;208.586066700000;218.871151400000;226.917265933333;233.424457666667;241.554755100000;247.816782500000;255.755083866667;261.340694166667;268.959986566667;275.831970900000;282.337685766667;287.334015666667;293.231250466667;298.583511666667;303.968264533333;309.453446133333;314.513282466667;320.375071833333;323.370211366667;327.444959900000;331.763395800000;336.446624333333;342.092787300000;344.501600233333;348.517273033333;352.327657633333;356.680062133333;359.691447466667;362.298164066667;366.319744400000;369.735798533333;372.982009966667;376.352280400000;376.945991500000;381.778386266667;384.117785200000;386.575335600000;388.467235866667;391.735600666667;394.241888533333;397.561944600000;398.396389300000;402.073853500000;404.981856366667;407.857367533333;408.521969533333;409.709391733333;413.512391833333;415.523920533333;416.975706600000;418.659364933333;421.608720766667;423.806337933333;423.954027266667;427.308051900000;427.646260466667;430.075749866667;433.127011333333;433.578940700000;432.954214833333;436.029106600000;438.601854666667;440.247113800000;441.636870366667;441.616193833333;443.220099933333;444.654163300000;445.750018100000;446.729198333333;448.564976666667;451.388796600000;451.180554633333;450.987081633333;452.647109633333;454.858018866667;456.936007700000;458.099799600000;457.398275266667;460.502704933333;0.446021766333333;1.20219111866667;2.50185719333333;5.29613925333333;9.21286019633333;14.4292472133333;19.8760295833333;25.4129024333333;31.1181411233333;37.4643514900000;43.2212814400000;49.5039853966667;55.5119872066667;61.0237528733333;66.9977861366667;72.7798232766667;78.6076441033333;83.8166466533333;89.3372736700000;94.7530412900000;99.9782896700000;104.240603650000;109.755323070000;113.747365586667;119.669707610000;124.398719833333;127.847265600000;131.908722100000;136.113437233333;139.847023400000;143.311815000000;145.787088133333;151.117195900000;152.741778500000;155.243635700000;159.748160133333;161.041918666667;164.369359200000;167.336437766667;169.158924066667;172.344582800000;173.280933133333;176.358778733333;178.361446033333;181.647533500000;183.464112233333;186.236240866667;185.722282000000;189.161966466667;190.666920700000;192.061107933333;194.145004333333;195.917276233333;197.156389700000;199.051243766667;199.380590966667;202.527850500000;202.829136733333;204.283876600000;205.199550466667;206.355957833333;208.814985133333;209.461864433333;210.683255166667;211.510315366667;214.453763633333;214.549761700000;216.090161400000;217.450380066667;217.422319133333;218.913981333333;220.321460566667;221.287348800000;221.308025266667;222.877962833333;224.896875933333;225.413788600000;225.595446433333;226.298447666667;226.480105500000;228.231700933333;229.391062133333;230.430795000000;230.984629966667;231.910642066667;232.987297233333;234.266286800000;234.899874000000;234.719693033333;235.409402200000;236.964570833333;237.186104800000;237.570097033333;238.708781766667;238.606876100000;239.962664133333;238.376480766667;239.206494766667;241.755612533333;242.464521333333;243.458470500000;244.000490366667;0.144735540000000;0.348546811000000;1.25535927666667;2.69089953133333;3.96693531366667;5.58561033366667;8.38875375200000;10.4829884046667;12.5240549013333;14.7305334380000;17.5100465666667;20.2216226033333;22.2804118166667;24.9993723233333;27.5115677700000;29.4108525033333;32.0279073766667;34.0807890166667;36.0568722066667;38.3903635666667;40.3265706400000;42.7028919066667;44.4515335300000;46.3936481766667;48.1038905800000;50.7032227266667;52.3381435766667;53.5226119733333;55.3007914666667;56.9785422200000;58.3343302366667;59.8924526300000;62.0265634066667;62.7576255700000;63.5197024933333;65.6907355966667;66.7156995233333;68.6489528100000;69.5941645000000;70.3237497700000;71.1478562166667;72.1550974233333;73.0264644533333;74.5210804366667;74.6259398566667;76.5326090666667;76.4144576033333;77.5959722233333;78.5205073900000;79.8762954266667;80.5098826266667;81.2527599300000;81.6515211166667;82.1359421333333;83.8373231733333;84.8386568033333;85.4943974200000;85.6302715933333;86.8723388200000;86.5680988000000;88.4821524700000;88.9222666633334;89.1999226133333;89.4731478566667;90.6782927766667;90.8259821000000;92.1330326233333;91.9233137900000;92.2009697266667;92.5820082100000;93.5759573733333;93.5848187233333;93.5789111566667;94.6127364500000;95.7617593766667;96.6464184433333;96.0541842433333;96.9949652733333;97.0245031300000;97.0658561333333;97.6743361700000;98.1321730733333;99.0448931400000;99.4761459600000;100.769904460000;100.090533550000;101.474382553333;100.857041160000;101.633887013333;101.013591856667;101.498012846667;102.989675056667;102.958660290000;103.357421446667;103.385482426667;103.586339913333;103.237793103333;104.243557426667;105.342366013333;105.555038643333;105.652513606667;104.866806370000;0.419437687666667;0.440114193666667;0.942257904000000;1.11357752300000;2.02038998866667;1.85202415600000;2.80314341966667;3.00990847666667;3.74540132366667;4.62267592366667;5.51767324333333;6.44220842800000;6.83506203700000;7.43468070266667;8.79046872200000;9.25716699400000;10.0487817863333;10.8019973503333;11.8889907956667;12.3852269320000;13.4367749400000;13.9064269933333;14.9018530600000;15.5575936666667;16.9813187766667;17.3446345200000;17.8674547366667;18.4139052466667;18.3430143666667;19.8686451166667;20.0547336633333;20.2733138666667;21.7324844166667;22.4473007600000;22.7604021266667;23.5756472100000;23.0823648600000;24.4086150166667;24.9846033866667;25.2799820400000;25.8855082800000;25.5724069100000;26.2399626633333;26.6003246233333;27.4598765033333;28.0151883700000;28.2130920700000;28.9131394766667;28.8717864633333;29.0874128800000;29.7490610666667;30.7843632466667;30.5775981900000;30.5259069266667;30.5643061466667;31.4474883233333;31.9703085366667;31.5818856100000;32.7501081833333;32.1076596100000;32.5669734166667;33.3364348100000;33.2832666533333;34.3023230066667;33.3822185000000;34.1014655233333;35.1766438200000;34.9373871100000;34.8694500200000;34.9846476933333;35.2977490666667;35.4218081033333;35.4099929566667;35.7378632600000;36.5088015433333;36.9843611766667;36.1336706566667;37.2442943933333;37.0729747733333;36.6948900966667;37.6489631466667;37.3831223600000;37.4835511000000;38.4036556066667;38.6104206633333;37.8173289800000;39.2395771966667;38.0048944233333;38.8526311566667;39.4936028366667;39.8391958600000;39.4374808933333;39.8982715933333;40.5835500666667;40.4358607400000;39.6176618733333;39.9632548933333;40.3590622900000;41.0413869800000;41.3869800066667;41.0059415400000;40.9380044500000];
time = [0.0108972220000000;0.0735361110000000;0.136177778000000;0.198816667000000;0.261455556000000;0.324094444000000;0.386733333000000;0.449377778000000;0.512019444000000;0.574658333000000;0.637302778000000;0.699947222000000;0.762591667000000;0.825236111000000;0.887880556000000;0.950525000000000;1.01316666700000;1.07581111100000;1.13845555600000;1.20110000000000;1.26374444400000;1.32638888900000;1.38903333300000;1.45167777800000;1.51432222200000;1.57696666700000;1.63961111100000;1.70225555600000;1.76489722200000;1.82755000000000;1.89019444400000;1.95283888900000;2.01548611100000;2.07813055600000;2.14077500000000;2.20341944400000;2.26606388900000;2.32870833300000;2.39135277800000;2.45400555600000;2.51665000000000;2.57929444400000;2.64193888900000;2.70458333300000;2.76722500000000;2.82986666700000;2.89251388900000;2.95515833300000;3.01780833300000;3.08045555600000;3.14310277800000;3.20575000000000;3.26839722200000;3.33105000000000;3.39370000000000;3.45634722200000;3.51899166700000;3.58163611100000;3.64428055600000;3.70693055600000;3.76957500000000;3.83221944400000;3.89486388900000;3.95750833300000;4.02015555600000;4.08280277800000;4.14545000000000;4.20809722200000;4.27074444400000;4.33338888900000;4.39603611100000;4.45868333300000;4.52133055600000;4.58397777800000;4.64662222200000;4.70927222200000;4.77191944400000;4.83456388900000;4.89721111100000;4.95985555600000;5.02250277800000;5.08515277800000;5.14780000000000;5.21044722200000;5.27309166700000;5.33574166700000;5.39838611100000;5.46103055600000;5.52367500000000;5.58631944400000;5.64896388900000;5.71161111100000;5.77425555600000;5.83690277800000;5.89954444400000;5.96218888900000;6.02483333300000;6.08747777800000;6.15012222200000;6.21276944400000;6.27541944400000;6.33806388900000;0.0106583330000000;0.0732972220000000;0.135936111000000;0.198577778000000;0.261213889000000;0.323852778000000;0.386491667000000;0.449136111000000;0.511777778000000;0.574416667000000;0.637061111000000;0.699705556000000;0.762350000000000;0.824994444000000;0.887638889000000;0.950283333000000;1.01292500000000;1.07556944400000;1.13821388900000;1.20085833300000;1.26350277800000;1.32614722200000;1.38879166700000;1.45143611100000;1.51408055600000;1.57672500000000;1.63936944400000;1.70201388900000;1.76465555600000;1.82730833300000;1.88995277800000;1.95259722200000;2.01524444400000;2.07788888900000;2.14053333300000;2.20317777800000;2.26582222200000;2.32846666700000;2.39111111100000;2.45376388900000;2.51640833300000;2.57905277800000;2.64169722200000;2.70434166700000;2.76698333300000;2.82962500000000;2.89227222200000;2.95491944400000;3.01756666700000;3.08021388900000;3.14286111100000;3.20550833300000;3.26815555600000;3.33080833300000;3.39345833300000;3.45610555600000;3.51875000000000;3.58139444400000;3.64404166700000;3.70668888900000;3.76933611100000;3.83198055600000;3.89462222200000;3.95726944400000;4.01991388900000;4.08256111100000;4.14520833300000;4.20785555600000;4.27050277800000;4.33314722200000;4.39579444400000;4.45844166700000;4.52108888900000;4.58373611100000;4.64638055600000;4.70903055600000;4.77167777800000;4.83432222200000;4.89696944400000;4.95961388900000;5.02226111100000;5.08491111100000;5.14755833300000;5.21020555600000;5.27285277800000;5.33550000000000;5.39814444400000;5.46078888900000;5.52343333300000;5.58607777800000;5.64872222200000;5.71136944400000;5.77401388900000;5.83666111100000;5.89930555600000;5.96195000000000;6.02459166700000;6.08723611100000;6.14988055600000;6.21252777800000;6.27517777800000;6.33782222200000;0.0104166670000000;0.0730555560000000;0.135697222000000;0.198336111000000;0.260975000000000;0.323613889000000;0.386252778000000;0.448894444000000;0.511536111000000;0.574177778000000;0.636819444000000;0.699463889000000;0.762111111000000;0.824752778000000;0.887397222000000;0.950041667000000;1.01268611100000;1.07533055600000;1.13797222200000;1.20061944400000;1.26326111100000;1.32590833300000;1.38855277800000;1.45119722200000;1.51383888900000;1.57648333300000;1.63913055600000;1.70177222200000;1.76441388900000;1.82706944400000;1.88971111100000;1.95235555600000;2.01500277800000;2.07765000000000;2.14029166700000;2.20293888900000;2.26558333300000;2.32822777800000;2.39087222200000;2.45352222200000;2.51616666700000;2.57881388900000;2.64145555600000;2.70410000000000;2.76674166700000;2.82938611100000;2.89203055600000;2.95467777800000;3.01732500000000;3.07997222200000;3.14261944400000;3.20526666700000;3.26791388900000;3.33056944400000;3.39321666700000;3.45586388900000;3.51851111100000;3.58115277800000;3.64380000000000;3.70644722200000;3.76909444400000;3.83173888900000;3.89438055600000;3.95702777800000;4.01967222200000;4.08231944400000;4.14496666700000;4.20761388900000;4.27026111100000;4.33290555600000;4.39555277800000;4.45820000000000;4.52084722200000;4.58349444400000;4.64614166700000;4.70878888900000;4.77143611100000;4.83408055600000;4.89672777800000;4.95937222200000;5.02201944400000;5.08466944400000;5.14731666700000;5.20996388900000;5.27261111100000;5.33525833300000;5.39790277800000;5.46055000000000;5.52319166700000;5.58583611100000;5.64848333300000;5.71112777800000;5.77377500000000;5.83641944400000;5.89906388900000;5.96170833300000;6.02435277800000;6.08699722200000;6.14963888900000;6.21228611100000;6.27493611100000;6.33758333300000;0.0101750000000000;0.0728138890000000;0.135455556000000;0.198094444000000;0.260733333000000;0.323372222000000;0.386011111000000;0.448652778000000;0.511294444000000;0.573936111000000;0.636580556000000;0.699225000000000;0.761869444000000;0.824513889000000;0.887158333000000;0.949800000000000;1.01244444400000;1.07508888900000;1.13773055600000;1.20037777800000;1.26302222200000;1.32566666700000;1.38831111100000;1.45095555600000;1.51360000000000;1.57624444400000;1.63888888900000;1.70153055600000;1.76417500000000;1.82682777800000;1.88946944400000;1.95211666700000;2.01476111100000;2.07740833300000;2.14005277800000;2.20269722200000;2.26534166700000;2.32798611100000;2.39063055600000;2.45328333300000;2.51592777800000;2.57857222200000;2.64121666700000;2.70385833300000;2.76650000000000;2.82914444400000;2.89178888900000;2.95443611100000;3.01708333300000;3.07973055600000;3.14237777800000;3.20502500000000;3.26767222200000;3.33032777800000;3.39297500000000;3.45562222200000;3.51826944400000;3.58091388900000;3.64355833300000;3.70620555600000;3.76885277800000;3.83149722200000;3.89413888900000;3.95678611100000;4.01943055600000;4.08207777800000;4.14472500000000;4.20737222200000;4.27001944400000;4.33266388900000;4.39531111100000;4.45795833300000;4.52060555600000;4.58325277800000;4.64590000000000;4.70854722200000;4.77119444400000;4.83383888900000;4.89648611100000;4.95913055600000;5.02177777800000;5.08442777800000;5.14707500000000;5.20972222200000;5.27236944400000;5.33501666700000;5.39766388900000;5.46030833300000;5.52295277800000;5.58559444400000;5.64824166700000;5.71088611100000;5.77353333300000;5.83617777800000;5.89882222200000;5.96146666700000;6.02411111100000;6.08675555600000;6.14940000000000;6.21204444400000;6.27469444400000;6.33734166700000;0.00993333300000000;0.0725722220000000;0.135213889000000;0.197852778000000;0.260491667000000;0.323130556000000;0.385769444000000;0.448413889000000;0.511055556000000;0.573694444000000;0.636338889000000;0.698983333000000;0.761627778000000;0.824272222000000;0.886916667000000;0.949558333000000;1.01220277800000;1.07484722200000;1.13748888900000;1.20013611100000;1.26278055600000;1.32542500000000;1.38806944400000;1.45071388900000;1.51335833300000;1.57600277800000;1.63864722200000;1.70128888900000;1.76393333300000;1.82658611100000;1.88922777800000;1.95187500000000;2.01451944400000;2.07716666700000;2.13981111100000;2.20245555600000;2.26510000000000;2.32774444400000;2.39038888900000;2.45304166700000;2.51568611100000;2.57833055600000;2.64097500000000;2.70361944400000;2.76625833300000;2.82890277800000;2.89154722200000;2.95419444400000;3.01684166700000;3.07948888900000;3.14213611100000;3.20478333300000;3.26743055600000;3.33008611100000;3.39273333300000;3.45538055600000;3.51802777800000;3.58067222200000;3.64331666700000;3.70596388900000;3.76861111100000;3.83125555600000;3.89390000000000;3.95654444400000;4.01918888900000;4.08183611100000;4.14448333300000;4.20713055600000;4.26977777800000;4.33242222200000;4.39506944400000;4.45771666700000;4.52036388900000;4.58301111100000;4.64565833300000;4.70830555600000;4.77095277800000;4.83359722200000;4.89624444400000;4.95888888900000;5.02153611100000;5.08418611100000;5.14683333300000;5.20948055600000;5.27212777800000;5.33477500000000;5.39742222200000;5.46006666700000;5.52271111100000;5.58535555600000;5.64800000000000;5.71064444400000;5.77329166700000;5.83593611100000;5.89858055600000;5.96122500000000;6.02386944400000;6.08651388900000;6.14915833300000;6.21180277800000;6.27445277800000;6.33710000000000];
GFP
gd
lacImean
figure; plot(lacImean)
figure; plot(timeI, lacImean)
timeI
figure; plot(timeIPTG, IPTGmean)
IPTGmean
lacImean
handfittingIPTG
handfittingLacI
clear all
handfittingLacI
gd
gd.Time(gd.ID == 1)
{'1.6nM','0.8nM','0.4nM', '0.2nM','0.1nM'}
fliplr({'1.6nM','0.8nM','0.4nM', '0.2nM','0.1nM'})
Mobj
Mobj.species
vs_HandFit
Mobj
vs_CreateModelObject
Mobj.reactions
Mobj.reactions(29).KineticLaw.getparameters
vs_LacRules
Mobj
Mobj.reactions
Mobj.reactions(29).KineticLaw.getparameters
Mobj.rules
vs_HandFit
10000/30
10000/30*0.7
(10000/30*0.7)*(1.6)
vs_HandFit
233*0.4
vs_HandFit
Mobj.species
get(Mobj.species, 'Names')
get(Mobj.species, 'Name')
get(Mobj.species, 'Name')'
get(Mobj.species, 'Name')
vs_HandFit
speciesToPlot
vs_HandFit
Mobj.reactions
Mobj.reactions(17).KineticLaw.getparameters
Mobj.reactions(40).KineticLaw.getparameters
vs_HandFit
for i = [8 9 10 11 12 32 33 34 35 36]
Mobj.reactions(i).KineticLaw.getparameters
end
for i = [8 9 10 11 12 32 33 34 35 36]
Mobj.reactions(i)
Mobj.reactions(i).KineticLaw.getparameters
end
1.2e+10/100000
1.2e7/100
vs_HandFit
%-- 9/25/15, 8:14 PM --%
txtl_init
run('/Users/vipulsinghal/Dropbox/Documents/surf/surf 2015/AnushkaEnrique/MATLAB_code/Enrique_Handfit/trunk_Enrique - BS/trunk_Enrique/vs_TetLacRules.m')
edit vs_BSsimulation
vs_BSsimulation
14*3600
vs_BSsimulation
help legend
vs_BSsimulation
h_legend
vs_BSsimulation
%-- 9/29/15, 6:52 AM --%
help rank
rank([-1 1 0 0 0 0 0 0; 1 -1 -1 1 0 0 0 0 ; 0 0 1 -1 0 0 0 0 ; 0 0 0 0 1 -1 0 0 ; 0 0 0 0 0 0 -1 1; 0 0 0 0 0 0 1 -1; 0 0 -1 1 -1 1 -1 1])
help rre
rref([-1 1 0 0 0 0 0 0; 1 -1 -1 1 0 0 0 0 ; 0 0 1 -1 0 0 0 0 ; 0 0 0 0 1 -1 0 0 ; 0 0 0 0 0 0 -1 1; 0 0 0 0 0 0 1 -1; 0 0 -1 1 -1 1 -1 1])
help rref
[R, jb] = rref([-1 1 0 0 0 0 0 0; 1 -1 -1 1 0 0 0 0 ; 0 0 1 -1 0 0 0 0 ; 0 0 0 0 1 -1 0 0 ; 0 0 0 0 0 0 -1 1; 0 0 0 0 0 0 1 -1; 0 0 -1 1 -1 1 -1 1])
A = [-1 1 0 0 0 0 0 0; 1 -1 -1 1 0 0 0 0 ; 0 0 1 -1 0 0 0 0 ; 0 0 0 0 1 -1 0 0 ; 0 0 0 0 0 0 -1 1; 0 0 0 0 0 0 1 -1; 0 0 -1 1 -1 1 -1 1]
A(:,jb)
Bastin1
Cfperm
edit Bastin1
Bastin1
inv(T)
syms a
a
syms f1 f2 f3 f4 f5 f6 f7 f8
syms f9
inv(T)*[f1 f2 f3 f4 f5 f6 f7 f8 f9]'
T
(T)*[f1 f2 f3 f4 f5 f6 f7 f8 f9]'
(T)*[f1; f2; f3; f4; f5; f6; f7; f8; f9]
inv(T)*[f1; f2; f3; f4; f5; f6; f7; f8; f9]
T31
Bastin1
help vpa
Bastin1
class(epsilon)
epsilon
class(k1)
Tsym = sym(T)
sym(inv(T))*[f1; f2; f3; f4; f5; f6; f7; f8; f9]
b = sym(inv(T))*[f1; f2; f3; f4; f5; f6; f7; f8; f9]
class(b)
Bastin1
xi
Bastin1
deal([p;x1;x2;x3;z1;z2;z3;eta;nu]) = xstar
p
x1
help deal
xstar = deal([p;x1;x2;x3;z1;z2;z3;eta;nu])
xstar(:) = deal([p;x1;x2;x3;z1;z2;z3;eta;nu])
xstar{:} = deal([p;x1;x2;x3;z1;z2;z3;eta;nu])
help solve
xi
xstar
[p;x1;x2;x3;z1;z2;z3;eta;nu] = inv(T)*xi
[p,x1,x2,x3,z1,z2,z3,eta,nu] = inv(T)*xi
xstar
xi
A
[bigA, bigB] = equationsToMatrix(xstar,xi)
rank(bigA)
size(bigA)
help subs
Cf11
Cf11*A1
Cf11*A1*phif1
subs(phif1, p,xi1)
subs(phif1, [p, x1] ,[xi1, xi2])
syms(T)
sym(T)
sym(inv(T))
sym(inv(T))*sym(xi)
clear xstar
xstar = sym(inv(T))*sym(xi)
subs(phif1, [p, x1, x2,x3,z1,z2,z3,eta,nu] ,sym(inv(T))*sym(xi))
subs(phif1, [p; x1; x2;x3;z1;z2;z3;eta;nu] ,sym(inv(T))*sym(xi))
Cf11*A1*subs(phif1, [p; x1; x2;x3;z1;z2;z3;eta;nu] ,sym(inv(T))*sym(xi))
S = subs(phif1, [p; x1; x2;x3;z1;z2;z3;eta;nu] ,sym(inv(T))*sym(xi))
S
Cf11*A1*S
Bastin1
help equationsToMatrix
[bigA, bigB] = equationsToMatrix(xstar,xi)
xstar
xi
syms x y z
eq1 = x + y + z
eq2 = x - 2*y - 5*z == 0
eq3 = x - z == 1
[A,B] = equationsToMatrix([eq1,eq2,eq3],[x,y,z])
A = equationsToMatrix([eq1,eq2,eq3],[x,y,z])
[A,B] = equationsToMatrix(eq1,eq2,eq3,x,y,z)
A = equationsToMatrix(eq1,eq2,eq3,x,y,z)
[A,B] = equationsToMatrix([eq1,eq2,eq3])
A = equationsToMatrix([eq1,eq2,eq3])
[A,B] = equationsToMatrix(eq1,eq2,eq3)
A = equationsToMatrix(eq1,eq2,eq3)
Bastin1
help solve
solve(DAE==0, xi1, xi2, xi3, xi4,xi5,xi6,xi7,xi8,xi9)
solve(DAE==0, xi1, xi2, xi3, xi4,xi5,xi6,xi7,xi8)
solve(DAE==0, xi1, xi2, xi3, xi4)
Bastin1
solve(eq1, eq2, eq3, eq4, xi1, xi2, xi3, xi4)
xi1
xstar
Bastin1
xstar
Vora1
clear all
Vora1
Vf2
help jacobian
jacobian(rf2,[p z1 x1 z2 x2 z3 x3 eta nu])
rank(jacobian(rf2,[p z1 x1 z2 x2 z3 x3 eta nu]))
%-- 10/3/15, 7:19 AM --%
Kumar
inv(T)
who
1+1
Bastin1
Kumar
Vora1
Bastin1
%-- 10/7/15, 4:54 AM --%
help subs
Kumar
help jacobian
jacobian(K1,x)
Kumar
L2'
L2
L2(:,end-2:end)
L2(:,end-1:end)
L2(:,end)
L2(:,end-1)
inv(L2)
inv(L2)*L2
rank L2
rank (L2)
rank (L1)
Vora1
help null
null(Vf2')
Vf2
Vf2'
%-- 10/9/15, 9:48 AM --%
help solve
%-- 10/17/15, 8:15 AM --%
txtl_init
HandFir
HandFit
%-- 11/3/15, 5:42 PM --%
help licols
X = [1 -1 0 0 0 0 0 0
1 -1 0 0 0 0 0 0
0 1 -1 0 0 0 0 0
0 0 1 -1 0 0 0 0
0 0 0 1 -1 0 0 0
0 0 0 0 1 -1 0 0
0 0 0 0 0 1 -1 0
0 0 0 0 0 0 1 -1
0 0 -1 0 -1 0 -1 0
-1 0 0 0 0 0 0 1
]
[Xlc, idxc] = licols(X)
[Xlr, idxr] = licols(X')
rank(x)
rank(X)
inv(X)
inv(X(idxr, idxc))
Vora1
Bastin1
clc
Bastin1
TXMR_reactionextents
Eq1
TXMR_reactionextents
help sub
help subs
TXMR_reactionextents
help solve
Jacobian_for_stability
S.gamma
S.D
Jacobian_for_stability
Eq1
Jacobian_for_stability
clear all
Jacobian_for_stability
Sg
Sg(1)
Jacobian_for_stability
(50000*4360506022040200000^(1/2))/400004040010201 + 900505050000000/400004040010201
Jacobian_for_stability
clc
Jacobian_for_stability
help solve
clc
Jacobian_for_stability
Kumar
help jacobian
Jacobian_for_stability
clc
TXMR_reactionextents
rank(A)
licols(A)
help licols
[Asub,idx]=licols(A)
[Asubrow,idxrow]=licols(A')
inv(Asubrow')
help perm
help permute
clc
[A, b] = equationsToMatrix(Eqn,Vars)
permcol1 = randperm(12)
Qperm_invertible1
Qperm_invertible2
Qperm_invertible3
QpermLIcolid1
permcol1
permcol1(QpermLIcolid1)
sort(permcol1(QpermLIcolid1))
clc
sort(permcol1(QpermLIcolid1))clc
sort(permcol1(QpermLIcolid1))*clc
clc
rank(S3(2:9, :))
rank(S3([2:7 9 10], :))
any(Qrows4 == 7)
~any(Qrows4 == 7)
~any(Qrows4 == 7)+ ~any(Qrows3 == 7)
clc
ls
geneexpr
edit geneexpr
txtl_init
edit txtl_init
edit geneexpr
geneexpr
Mobj
simbiology(Mobj)
edit negautoreg
dir examples
edit SpikeIn_SIM.m
edit SpikeIn_SIM
edit RNA_represion_CSHLdata
edit induction
edit TXTL_workshop_scripts
edit txtl_addspecies
edit geneexpr
ones(size(t_ode2))
geneexpr_spikein_andrey
size(x_ode)
size(x_ode1)
size(x_ode2)
%-- 11/19/15, 7:40 AM --%
txtl_init
edit geneexpr
geneexpr
rankOf_xi_subsystem
%-- 11/20/15, 7:21 AM --%
rankOf_xi_subsystem
solveForIsolatedRoots
help jacobian
solveForIsolatedRoots
help sub
help subs
help solve
solveForIsolatedRoots
x1
solveForIsolatedRoots
S
S.x1
eval(S.x1)
eval(S.x2)
eval(S.x3)
eval(S.x4)
solveForIsolatedRoots
f
f(1)
solve(f(1), x1)
solve(f(1), x2)
solve(f(2), x2)
solve(f(2), x1)
f21 = solve(f(2), x1)
f12 = solve(f(2), x1)
f21 = solve(f(2), x1)
f12 = solve(f(1), x2)
subs(f12, {x1}, f21)
f12 = solve(f(1), x2)
f21 = solve(f(2), x1)
clc
f43 = solve(f(4), x3)
f34 = solve(f(3), x4)
f12 = solve(f(2), x1)
f21 = solve(f(2), x1)
f12 = solve(f(1), x2)
solveForIsolatedRoots
solve(z1+z2, z1)
%-- 11/25/15, 8:54 AM --%
addpath(pwd)
solveForIsolatedRoots
%-- 12/1/15, 12:34 AM --%
solveForIsolatedRoots
clear all
solveForIsolatedRoots
%-- 12/7/15, 12:25 PM --%
TXMR_reactionextents
S3 = [1 -1 0 0 0 0 0 0
1 -1 0 0 0 0 0 0
0 1 -1 0 0 0 0 0
0 0 1 -1 0 0 0 0
0 0 0 1 -1 0 0 0
0 0 0 0 1 -1 0 0
0 0 0 0 0 1 -1 0
0 0 0 0 0 0 1 -1
0 0 -1 0 -1 0 -1 0
-1 0 0 0 0 0 0 1];
s = rank(S3)
S3 = [1 -1 0 0 0 0 0 0
1 -1 0 0 0 0 0 0
0 1 -1 0 0 0 0 0
0 0 1 -1 0 0 0 0
0 0 0 1 -1 0 0 0
0 0 0 0 1 -1 0 0
0 0 0 0 0 1 -1 0
0 0 0 0 0 0 1 -1
0 0 -1 0 -1 0 -1 0
-1 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0];
s = rank(S3)
s = rank(S3(3:end,:))
s = rank(S3([3:8, 10, 11],end,:))
rank(S3([3:8, 10, 11],end,:))
S3([3:8, 10, 11],end,:)
S3([3:8, 10, 11],:)
s = rank(S3([3:8, 10, 11],:))
s = rank(S3([3:8, 10],:))
%-- 12/10/15, 1:21 AM --%
solveForIsolatedRoots
jacobian(f, [z1, z2, z3, z4])
%-- 1/20/16, 8:26 AM --%
txtl_init
extract_delay
M
M{:,:}
M{1}
size(M{1},1)
size(M{1})
extract_delay
timevec(i)
time_vec(i)
extract_delay
time_vec
extract_delay
help legend
extract_delay
close all
clear all
extract_delay
%-- 2/2/16, 10:35 AM --%
addpath(genpath(pwd))
ls
load([pwd 'S1/set1_ptetExpression_grpData.mat'])
load([pwd '/S1/set1_ptetExpression_grpData.mat'])
whos
trellis(grpData_s1)
help trellis
sbiotrellis(grpData_s1)
grpData_s1(1,:)
sbiotrellis(grpData_s1, 'ID', 'time', )
sbiotrellis(grpData_s1, 'ID', 'time', 'GFP')
grpData_s1(1:200,4)
clc
clear all
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S1/s1_pre_estParams_2015January05_125022.mat')
whos
params
%-- 2/2/16, 11:38 AM --%
source_part1
who
clear all
source_part1
whos
m = copyobj(Mobj_s1)
simbiology(m)
clc
txtl_init
tube1 = txtl_extract('E30_2');
tube2 = txtl_buffer('E30_2');
tube3 = txtl_newtube('ptet_strength_charac');
dna_deGFP = txtl_add_dna(tube3, 'ptetNov4(50)', 'rbs(20)', 'deGFP(1000)', 0.01, 'plasmid');%%
Mobj_s1 = txtl_combine([tube1, tube2, tube3]);
simData = txtl_runsim(Mobj_s1,8*60*60);
Mobj_s1
Mobj_s1.Events
Mobj_s1.Parameters
source_part1
Mobj_s1
Mobj_s1.parameters
%-- 2/2/16, 9:44 PM --%
'hello'
pause
path
%-- 2/2/16, 10:11 PM --%
S1_ptet_estimation
m_e
%-- 2/2/16, 10:21 PM --%
S1_ptet_estimation
clear all
close all
S1_ptet_estimation
%-- 2/2/16, 10:27 PM --%
Test004_s5_plasActivation
Test004_ptet_expression
params
help sbioselect
sbioselect(m, 'AGTPdegrate')
sbioselect(m, 'parameter' 'AGTPdegrate')
sbioselect(m, 'parameter', 'AGTPdegrate')
sbioselect(m, 'Type', 'parameter','Name', 'AGTPdegrate')
params
estParam
x
%-- 2/2/16, 10:59 PM --%
S1_ptet_estimation
S1_ptet_estimation_part2
geneexpr
edit geneexpr
geneexpr
Mobj.reactions
mobj.reactions
edit enzyme_resource_degradation
edit txtl_enzyme_resource_degradation
whos
mobj.parameters
sbioselect(mobj,'Type', 'parameter','Name', 'AGTPdeg_F')
aa = sbioselect(mobj,'Type', 'parameter','Name', 'AGTPdeg_F')
aa
get(aa)
mobj.reactions
mobj.reactions(25)
get(mobj.reactions(25))
%-- 2/5/16, 7:58 AM --%
edit negautoreg
txtl_init
edit negautoreg
negautoreg
Mobj
Mobj.species
Mobj.reactins
Mobj.reactions
negautoreg
Mobj.reactions
edit txtl_dna_degradation
edit txtl_add_dna
edit TXTL_workshop_scripts.m
TXTL_workshop_scripts
%-- 2/6/16, 4:05 AM --%
txtl_init
TXTL_workshop_scripts
%-- 2/6/16, 4:07 AM --%
txtl_init
TXTL_workshop_scripts
edit txtl_prom_p70
%-- 2/6/16, 4:09 AM --%
txtl_init
TXTL_workshop_scripts
%-- 2/6/16, 4:10 AM --%
txtl_init
TXTL_workshop_scripts
who
whos
maturedVersion
[protein.name '*']
tube.species
%-- 2/6/16, 4:14 AM --%
txtl_inti
txtl_init
TXTL_workshop_scripts
%-- 2/6/16, 4:23 AM --%
txtl_init
TXTL_workshop_scripts
Mobj.species
tube3 = txtl_newtube('negautoreg_linear_GamS');
txtl_add_dna(tube3, 'ptet(50)', 'rbs(20)',...
'tetR(1200)', 1, 'linear');
txtl_add_dna(tube3, 'ptet(50)', 'rbs(20)',...
'deGFP(1000)', 10, 'linear');
txtl_add_dna(tube3, 'ptet(50)', 'rbs(20)',...
'RFP(1000)', 0, 'linear');
txtl_add_dna(tube3, 'ptet(50)', 'rbs(20)',...
'CFP(1000)', 0, 'linear');
Mobj = txtl_combine([tube1, tube2, tube3]);
txtl_addspecies(Mobj, 'aTc', 500);
txtl_addspecies(Mobj, 'protein gamS', 3500);
configsetObj = getconfigset(Mobj);
set(configsetObj.SolverOptions, 'AbsoluteToleranceScaling', 1);
set(configsetObj.SolverOptions, 'AbsoluteTolerance', 1.0e-8);
set(configsetObj.SolverOptions, 'AbsoluteToleranceStepSize', 10*60*60*1.0e-8*0.1);
set(configsetObj.SolverOptions, 'RelativeTolerance', 1.0e-6);
[simData] = txtl_runsim(Mobj,14*60*60);
Mobj.species
Mobj.reactions
edit negautoreg
negautoreg
edit addspecies
edit txtl_addspecies
inv([1 0 0 0; 0 0 0 1; 0 1 1 0; 1 -1 0 1])
InvPH = inv([1 0 0 0; 0 0 0 1; 0 1 1 0; 1 -1 0 1])
InvPH*[eye(2);zeros(2)]
%-- 2/10/16, 6:56 AM --%
txtl_init
whos
negautoreg
edit addspecies
help addspecies
help delete
delete(addspecies)
delete addspecies
delete addspecies.m
ls
help addspecies
help simbiology.addspecies
help simbiology
help simbiology/addspecies
help addreactions
help addreaction
help sbiomodel
edit txtl_addreaction
edit txtl_addspecies
rdit txtl_protein_tetR
edit txtl_protein_tetR
negautoreg
edit txtl_protein_tetR
edit txtl_protein_deGFP
edit txtl_utr_rbs
edit txtl_prom_ptet
edit txtl_translation
negautoreg
['AA:AGTP:' Ribobound.Name]
edit txtl_protein_deGFP
edit txtl_dna_degradation
edit txtl_extract
edit txtl_buffer
txtl_mrna_degradation
edit txtl_mrna_degradation
edit txtl_protein_degradation
edit negautoreg
negautoreg
Mobj.reactions
negautoreg
Mobj.reactions
edit txtl_protein_ClpX
(25 + 2 + 25 + 2 + 25 + 10)
(25 + 2 + 25 + 3 + 25 + 10)
6*(25 + 2 + 25 + 3 + 25 + 10)
6*(25 + 2 + 25 + 3 + 25 + 10)/60
edit txtl_runsom
edit txtl_runsim
negautoreg
edit txtl_newtube
edit txtl_runsom
edit txtl_runsm
edit txtl_runsim
ls
edit Test004_ptet_expression
%-- 2/11/16, 4:19 PM --%
addpath(genpath(pwd))
Test004_ptet_expression
Mobj
mobj
m
m.species
m.reactions
get(m.species, 'Name')
a = get(m.species, 'Name')
a
a(1)
class(a(1))
for i = 1:length(a)
a = get(m.reactions, 'Name')
end
a = get(m.reactions, 'Reaction')
a = get(m.reactions)
m.reactions
a = get(m.reactions)
a = get(m.reactions, 'Index')
Test004_ptet_expression
m.reactions
clear all
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S2/set2_placExpression_Mobj.mat', 'Mobj_s2');
whos
Mobj_s2
Mobj_s2.events
Mobj_s2.reactions
get(Mobj_s2.species,'Name')
edit txtl_protein_tetRNov4
edit txtl_prom_placNov4
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S3/s3s4 iterations/mObjs3s4.mat')
Mobj_s3s4
Mobj_s3s4.reactions
Test004_s3s4_combined
%-- 2/11/16, 5:47 PM --%
addpath(genpath('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools'));
Test004_s3s4_combined
Mobj_s3s4.reactions
get(Mobj_s3s4.species,'Name')
%-- 2/12/16, 12:33 AM --%
addpath(genpath('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools'));
txtl_init
help getparam
getparam(m1_s50
getparam(m1_s5)
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S5/mobj_set5_3OC12_variant1.mat', 'm1_s5')
whos
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S5/mobj_set5_3OC12_variant1.mat', 'm1_s5')
getparam(m1_s5)
a = getparam(m1_s5)
a(:,1:2)
m1_s5.reactions
Test004_s5_plasActivation
m1_s5.reactions
Mobj.reactions
Mobj.species
get(Mobj.species,'Name')
Simbiology
simbiology
%-- 2/12/16, 5:04 AM --%
addpath(genpath('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools'));
txtlDir = '/Users/vipulsinghal/Documents/toolbox/txtl-code-166-trunk';
cd(txtlDir)
addpath(txtlDir);
txtl_init
edit txtl_prom_plas_ptetNov4
%-- 2/12/16, 5:08 AM --%
addpath(genpath('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools'));
txtlDir = '/Users/vipulsinghal/Documents/toolbox/txtl-code-166-trunk';
cd(txtlDir)
addpath(txtlDir);
txtl_init
%-- 2/12/16, 5:16 AM --%
addpath(genpath('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools'));
Test004_Test_trainedFFL
%-- 2/12/16, 5:20 AM --%
addpath(genpath('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools'));
Test004_Test_trainedFFL
Mobj
Mobj.reactions
Test004_Test_trainedFFL
close all
%-- 2/23/16, 7:39 PM --%
help solve
q4
p11
[p11 p12 p13]*P1
q4
p11
eval(p11)
help eval
q4
A = [(eye(3) - P1) ones(3,1)]
q4
ls
Im = imread('ikp3aseipn7ow.jpg');
whos
mean(Im,3)
Im2 = mean(Im,3);
whos
imshow(Im2)
help Imshow
imshow(Im2,[0,255])
I2(1:10,1:10)
I2(300:310,300:310)
imshow(sign(B),[-1,1])
randi(1)
help randi
randi(numel(B), 1)
numel(B)
randi(numel(B), 1)
randi(size(B,1), 1)
size(B)
help rand
rand(2,2)
ACM216_HW3_q6
help parfor
ACM216_HW3_q6
i
ACM216_HW3_q6
help rand
ACM216_HW3_q6
help mod
ACM216_HW3_q6
help save
save('n500k_uniformInitial')
ACM216_HW3_q6
save('n1M_uniformInitial')
whos
figure;imshow(xi, [-1,1])
ACM216_HW3_q6
%-- 3/8/16, 6:41 AM --%
inv([0 0 1 0; 0 0 0 1; 1 0 1 0; 0 1 1 1])
help syms
%-- 3/10/16, 4:21 AM --%
[a, v] = eig([2/3 1/6 1/6 ; 1/3 13/24 1/8; 1/3 1/8 13/24])
[a, v] = eig([2/3 1/6 1/6 ; 1/3 13/24 1/8; 1/3 1/8 13/24]')
[a, v] = eig([2/3 1/6 1/6 ; 1/3 13/24 1/8; 1/3 1/8 13/24])
1/0.4167
ans*5
5/12
%-- 3/11/16, 9:29 AM --%
[a, v] = eig([2/3 1/6 1/6 ; 1/3 13/24 1/8; 1/3 1/8 13/24]')
1./a(:,1)
5./a(:,1)
13./a(:,1)
11./a(:,1)
16./a(:,1)
9./a(:,1)
p = 1./a(:,1)
p/(sum(p))
[a, v] = eig([2/3 1/6 1/6 ; 1/3 13/24 1/8; 1/3 1/8 13/24]')
p = a(:,1)
p/(sum(p))
P = [2/3 1/6 1/6 ; 1/3 13/24 1/8; 1/3 1/8 13/24]
P^2
1/0.4167
*5
ans*5
5/12
18*12
%-- 3/12/16, 12:57 PM --%
size(D)
min(3 , 5)
help rand
ln(100)
help logn
help log
log(100)
CTSP_VS
help unirnd
x_n
%-- 3/15/16, 9:37 AM --%
P = [ 1 zeros(1, 14)
0 0 eye(10) 0 0 0
zeros(1,13) 1 0]
P = [ 1 zeros(1, 14)
zeros(10,2) eye(10) zeros(10,3)
zeros(1,13) 1 0]
P*S
P*x
help real
help transpose
xd
%-- 3/18/16, 5:52 AM --%
p1+p3
q1+q3
%-- 3/31/16, 1:49 PM --%
help ss2tf
%-- 4/21/16, 8:27 AM --%
ls
run('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/test008_IFFL_ME/plot_param_hist.m')
addpath(genpath(pwd))
whos
load('020615_Data.mat','gfp_over_od_404p')
load('mobj_IFFL_aTc_inflow_Feb15_estimated2_initialAtcparameter.mat');
addpath(genpath('/Users/vipulsinghal/Dropbox/110114'))
close all
load('020615_Data.mat','gfp_over_od_404p')
load('mobj_IFFL_aTc_inflow_Feb15_estimated2_initialAtcparameter.mat');
whos
m1
m1.reactions
m1.parameters
help fmincon
getequations(m1)
help sbiosimulate
m1
m1.parameters
whos
size(gfp_over_od_404p)
edit transform404
960/60
openExample('optim/IncludeGradientExample')
help openExample
optim/IncludeGradientExample
optsim/IncludeGradientExample
m1.parameters
m1.species
mobj = copyobj(m1);
% Get and display model parameters to be estimated
Klaw = get(mobj.reactions,'KineticLaw');
for i = 1:length(Klaw)
Klaw{i}.parameters
end
edit initialTests.m
edit fitvivo
help squeeze
help resample
help simData
m1.species
help norm
m1.speciea
m1.species
help abs
ADMM_Apr20
test016_ADMMvivo_Apr20
ADMM_Apr20
test016_ADMMvivo_Apr20
ADMM_Apr20
test016_ADMMvivo_Apr20
obj
objval
format short g
objval
format long
objval
test016_ADMMvivo_Apr20
obj
whos
xfull = [0.035676797371055
0.266714714501005
0.005681698666044
0.225483884059131
0.056460854451971
0.023000153814532
0.003216487084334
0.035346487248379]
EqualityConst = [xfull(1)-xfull(2);
xfull(3)-xfull(4);
xfull(5)-xfull(6);
xfull(7)-xfull(8)]
norm(EqualityConst,2)
test016_ADMMvivo_Apr20
norm(EqualityConst,2)
abs(xfull)
xfull
mean(xfull)
EqualityConst
mean(EqualityConst)
sum(xfull)
norm(EqualityConst,2)/sum(xfull)
norm(EqualityConst,2)
test016_ADMMvivo_Apr20
ysim.data(1:10)
size(ysim.data)
size(d11)
d11(1:10)
err
0.5*norm(constraints,2)^2
test016_ADMMvivo_Apr20
obj
test016_ADMMvivo_Apr20
1 >= 2
clc
test016_ADMMvivo_Apr20
whos
LAMBDA
XF
F_VAL
FVAL
plot(1:nITER, LAMBDA)
plot(1:3, LAMBDA)
plot(1:3, FVAL)
figure; plot(1:3, FVAL)
figure; plot(1:3, XF)
figure; plot(1:3, F_ERR)
help norm
nITER = 3
help legend
FVALS
FVAL
test016_ADMMvivo_Apr20
whos
test016_ADMMvivo_Apr20
THETA = nITER
nITER = 4
for r = [1 100 1000]
r
end
close all
a = cell(2)
a{1, 1} = 'hello'
a(2,2) = 1
test016_ADMMvivo_Apr20
close all
beep
beep ; beep ; beep;
beep
pause(1)
beep
pause(1)
beep
pause(1)
beep
clc
test016_ADMMvivo_Apr20
%-- 4/21/16, 6:03 PM --%
test016_ADMMvivo_Apr20
%-- 4/21/16, 9:32 PM --%
load allDATA_APR2016
whos
figure
subplot(4,1,1)
p1 = plot(1:nITER, LAMBDA);
title(['lambda, rho = ' num2str(rho)])
legend(p1, {'L1', 'L2', 'L3', 'L4'})
subplot(4,1,2)
p2 = plot(1:nITER, XF);
title(['parameters, rho = ' num2str(rho)])
legend(p2, {'g11', 'g12', 'g21', 'g22', 't11', 't12', 't21', 't22'})
subplot(4,1,3)
p3= plot(1:nITER, FVAL);
title(['fvals, rho = ' num2str(rho)])
legend(p3, {'11', '12', '21', '22'})
subplot(4,1,4)
p4= plot(1:nITER, F_ERR);
title(['f_error, rho = ' num2str(rho)])
figure
p5= plot(1:nITER, THETA);
title(['Theta, rho = ' num2str(rho)])
legend(p5, {'g11', 'g12', 'g21', 'g22', 't11', 't12', 't21', 't22'})
disp(['ITERATION ' num2str(count) 'Just Ended'])
whos
nITER
count
c2LAMBDA
size(THETA)
(THETA(end,:))
load allDATA_APR2016_mini
THETA
cTHETA
test016_ADMMvivo_Apr20
whos
THETA
THETA(end,:)
help legend
p3
p3(1)
figure
subplot(4,1,1)
p1 = plot(1:nITER, LAMBDA);
title(['lambda, rho = ' num2str(rho)])
legend(p1', {'L1', 'L2', 'L3', 'L4'})
subplot(4,1,2)
p2 = plot(1:nITER, XF);
title(['parameters, rho = ' num2str(rho)])
legend(p2', {'g11', 'g12', 'g21', 'g22', 't11', 't12', 't21', 't22'})
subplot(4,1,3)
p3= plot(1:nITER, FVAL);
title(['fvals, rho = ' num2str(rho)])
legend(p3', {'11', '12', '21', '22'})
subplot(4,1,4)
p4= plot(1:nITER, F_ERR);
title(['f_error, rho = ' num2str(rho)])
figure
p5= plot(1:nITER, THETA);
title(['Theta, rho = ' num2str(rho)])
legend(p5', {'g11', 'g12', 'g21', 'g22', 't11', 't12', 't21', 't22'})
disp(['ITERATION ' num2str(count) 'Just Ended'])
THETA(end,:)
close all
THETA(end,:)
LAMBDA(end,:)
test016_ADMMvivo_Apr20
load allDATA_APR2016_apr21
load allDATA_APR2016
THETA(end,:)
THETA(end,:)'
test016_ADMMvivo_Apr20
close close all
close all
THETA(end, :)
test016_ADMMvivo_Apr20
%-- 4/23/16, 9:58 AM --%
test016_ADMMvivo_Apr20
c2THETA
c2THETA{4}
test016_ADMMvivo_Apr20
THETA
XF
test016_ADMMvivo_Apr20
ysim.data
d11
norm(ysim.data - d11, 2)
1e-7*0.5*norm(ysim.data - d11, 2)^2
test016_ADMMvivo_Apr20
m1
m1.parameters
load test008ME_042815_175027_DATA
whos
fitparam
fitparam{2,1}
fitparam{2,1}([1,6],[1,11])
fitparam{2,2}([1,6],[1,11])
test016_ADMMvivo_Apr20
clear all
whos
close all
whos
test016_ADMMvivo_Apr20
edit test016_ADMMvivo_Apr20
whos
%-- 4/24/16, 9:33 AM --%
ls
load allDATA_APR2016_apr22_0.
whos
plotall
simbiology
help lsqnonlin
Inf
help optimoptions
op = optimoptions('lsqnonlin')
op.Algorithm
op = optimoptions('lsqnonlin'help surf)
help surf
p = surf([1 10 100], [3, 30 300], [1 10 100]'*[3, 30 300])
p = surf([1 10 100], [3, 30 300], [1 10 100]'*log([3, 30 300]))
close all
p = surf([1 10 100], [3, 30 300], [1 10 100]'*log([3, 30 300]))
set(p)
set(p,'XScale','log');
clear all
load('mobj_IFFL_aTc_inflow_Feb15_estimated2_initialAtcparameter.mat');
whos
main_CostFcnPlots
length(0.0:0.02:2)
length(0.0:0.02:2)^2
length(0.0:0.02:0.2)^2
main_CostFcnPlots
10201*19.618386/121
10201*19.618386/121/60
length(0.0:0.05:5)^2
main_CostFcnPlots
edit transform
whos
save('visualizeCostfcn_4_24_2016')
close all
load('visualizeCostfcn_4_24_2016')
main_CostFcnPlots
toc
main_CostFcnPlots
%-- 4/29/16, 8:16 AM --%
ls
cvx_setup
%-- 6/1/16, 3:15 AM --%
help eig
A = [0 0 0; 0 0 -1/2; 0 -1/2 0]
[V,D] = eig(A)
%-- 7/8/16, 12:58 PM --%
addpath(genpath(pwd))
edit ADMM_Apr20
%-- 7/9/16, 6:23 AM --%
ls
Test004_allTraining_combined
Test004_ptet_expression
whos
clear all
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S1/s1_pre_estParams_2015January05_125022.mat')
whos
Test004_ptet_expression
Mobj_s1
Mobj_s1.Events
Mobj_s1.Parameters
m = Mobj_s1;
titl = '';
titl
isempty(titl)
help axes
help axis
Test004_s2_plac_expression
Test004_ptet_expression
Test004_s3s4_combined
xaxisticks{j}
xaxisticks{j} = [2^10^-6 2*10^-4 2*10^-2 2]
close all
Test004_s5_plasActivation
%-- 7/15/16, 4:16 AM --%
help scatter
IPTGexperimentaldata
close all
clear all
close all
placgroupeddata
who
whos
gd(1:100)
gd(1:100,1:4)
ls
txtl_init
whos
clear all
ls
edit placMobj.m
placMobj
whos
simbiology(Mobj)
whos
%-- 7/21/16, 7:58 AM --%
ls
txtl_init
placparameterestimation
clc
clear all
close all
%-- 7/23/16, 5:23 AM --%
txtl_init
%-- 7/23/16, 8:54 AM --%
edittxtl_init
edit txtl_init
txtl_init
vs_HandFit
LacIsolo
handfitting
%-- 7/26/16, 7:28 AM --%
ls
l
ls
edit handfitting
handfittingdata
whos
handfitting
txtl_init
handfitting
handfittingdataLacI
clear all
handfittingdataLacI
handfittingLacI
lacI1
size(lacI1)
size(lacI2)
size(lacI3)
dose = nan(160,5);
dose(1,1) = 0.1;
dose(1,2) = 0.2;
dose(1,3) = 0.4;
dose(1,4) = 0.8;
dose(1,5) = 1.5;
dose = reshape(dose, 160*5, 1);
dose(1:200)
size(dose)
lacI_gd
timeI
lacI_gd
clc
gd_lacI1
trellis(gd_lacI1)
sbiotrellis(gd_lacI1)
sbiotrellis(gd_lacI1, 'ID', 'time', 'GFP1')
lacI_gd
close all
%-- 7/30/16, 7:00 AM --%
vs_K_calibration_e35_July2016
distinguishable_colors
HELP distinguishable_colors
help distinguishable_colors
p(1)
get(gcf)
set(gcf)
%-- 7/31/16, 5:09 AM --%
help print
vs_Mg_calibration_e35_July2016
clear all
vs_Mg_calibration_e35_July2016
%-- 8/6/16, 4:48 AM --%
vs_Mg_calibration_e35_July2016
vs_K_calibration_e35_July2016_2
vs_K_calibration_e35_July2016
%-- 8/7/16, 1:32 PM --%
vs_K_calibration_e35_July2016_2
close all
clear all
vs_K_calibration_e35_July2016_2
%-- 8/7/16, 10:10 PM --%
ls
edit lacI_gd
%-- 8/7/16, 10:30 PM --%
txtl_init
lacI_gd
edit vs_CreateModelObject
edit vs_CreateModelObjectBS.m
ls
edit handfittingLacI
handfittingLacI
Mobj
who
simbiology(Mobj)
gd_lacImean
ls
edit vs_LacRules.m
vs_LacRules
clear all
vs_LacRules
simbiology(Mobj)
lacI_gd
Mobj
Mobj.parameters
Mobj.reactions
%-- 8/8/16, 3:01 AM --%
txtl_init
Plot_lacI_repression_Fits
Mobj
Mobj.parameters
vs_LacRules
Simbiology(Mobj)
simbiology(Mobj)
lacI_gd
Mobj.parameters
close all
Plot_lacI_repression_Fits
myGFPdata{1}.data
Plot_lacI_repression_Fits
vs_BSsimulation
clear all
vs_BSsimulation
BistableSwitchGrid
ParaChangeRepInd
vs_HandFit
Plot_lacI_repression_Fits
Mobj.parameters
Mobj.rules
Plot_lacI_repression_Fits
%-- 8/8/16, 7:21 AM --%
txtl_init
geneexpr
addpath('/Users/vipulsinghal/Dropbox/Documents/a_Research/ModelBasedCalibrations/MatlabFiles')
MBC_test1
DNAobj = sbioselect(Mobj2, 'Name', 'DNA p70--rbs--deGFP');
DNAobj
DNAobj.InitialAmount
DNAobj.InitialAmount = 2
[t,x] = txtl_runsim(Mobj2,8*60*60);
t
x
size(x)
[sd] = txtl_runsim(Mobj2,8*60*60);
sd
sd.Names
get(sd)
get(sd, 'DataNames')
ls
edit make_gd.m
selectbyname(sd, 'RNA rbs--deGFP');
a = selectbyname(sd, 'RNA rbs--deGFP');
a
a.data
MBC_test1
whos
MBC_test1
whos
tvec
(0:6:480)';
(0:6:480)'
MBC_test1
gd
close all
MBC_test1
gd
Mobj2.species
MBC_test1
sd1
sd1.data
clc
temp
temp.data
MBC_test1
temp.data
MBC_test1
gd
help sbiosimulate
MBC_test1
gd
MBC_test1
close all
MBC_test1
gd
clear all
close all
MBC_test1
gd
MBC_test1
gd
Mobj1.species
MBC_test1
gd
MBC_test1
whos
Mobj2.reactions
Mobj2.reactions(5)
get(Mobj2.reactions(5))
get(Mobj2.reactions(5).KineticLaw)
get(Mobj2.reactions(5).KineticLaw.Parameters)
get(Mobj2.reactions(5).KineticLaw.Parameters(1))
get(Mobj2.reactions(5).KineticLaw.Parameters(2))
get(Mobj2.reactions(4).KineticLaw.Parameters(2))
addpath('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools')
whos
ls
load('Workspace_test005_IFFL_aTc_inflow_Feb15_estimated_2.mat')
whos
clear all
load('Workspace_test005_IFFL_aTc_inflow_Feb15_estimated_2.mat')
whos
mobj
mobj.events
clear all
load('vitro_Mobj_may5_addedClpXRxn.mat')
whos
getparam(mobj)
help getparam
edit getparam
[p, pt] = getparam(mobj);
p
p(:,1:2)
p(:,1:3)
edit setparam
edit updateparam
pt
p = getparam(mobj)
clear all
close all
p = getparam(Mobj2);
p
p(1,1)
p{1,1}
Mobj2.reactions
p = getparam(Mobj2);
p(:,1:3)
who
load('vitro_Mobj_may5_addedClpXRxn.mat')
who
p_ref = getparam(mobj);
p_ref(:,1:3)
pNew={'TXTL_RNAP_S70_F', 10;
'TXTL_RNAP_S70_R' , 0.1;
'TXTL_UTR_RBS_F', 0.23;
'TXTL_UTR_RBS_R' , 104;
'TXTL_P70_RNAPbound_F' , 0.06;
'TXTL_P70_RNAPbound_R' , 725.07;
'TXTL_AA_F' , 9.0550;
'TXTL_AA_R', 325046;
'AGTPdegrate' , 2.4000e-04}
for i = 1:size(pNew, 1)
p1 = sbioselect(Mobj2.parameters, 'Name',  pNew{i,1});
set(p1, 'Value', pNew{i,2});
end
p = getparam(Mobj2);
p
p(:,1:3)
help sbioselect
pNew={'TXTL_RNAP_S70_F', 10;
'TXTL_RNAP_S70_R' , 0.1;
'TXTL_UTR_RBS_F', 0.23;
'TXTL_UTR_RBS_R' , 104;
'TXTL_P70_RNAPbound_F' , 0.06;
'TXTL_P70_RNAPbound_R' , 725.07;
'TXTL_AA_F' , 9.0550;
'TXTL_AA_R', 325046;
'AGTPdegrate' , 1.4650e-04}
for i = 1:size(pNew, 1)
p1 = sbioselect(Mobj2, 'Type', 'parameters', 'Name',  pNew{i,1});
set(p1, 'Value', pNew{i,2});
end
p = getparam(Mobj2);
p(:,1:3)
p(:,[1 3])
p(:,[3])
MBC_test1
p = getparam(Mobj1);
p(:,1:3)
MBC_test1
help addrule
ruleExpr = ['TotalRNA = [RNA rbs--deGFP]+[Ribo:RNA rbs--deGFP]' ...
'[AA:AGTP:Ribo:RNA rbs--deGFP] + [RNA rbs--deGFP:RNase]'...
'+ [AA:AGTP:Ribo:RNA rbs--deGFP:RNase] + [Ribo:RNA rbs--deGFP:RNase]']
ruleExpr = ['TotalRNA = [RNA rbs--deGFP] + [Ribo:RNA rbs--deGFP] + ' ...
'[AA:AGTP:Ribo:RNA rbs--deGFP] + [RNA rbs--deGFP:RNase]'...
' + [AA:AGTP:Ribo:RNA rbs--deGFP:RNase] + [Ribo:RNA rbs--deGFP:RNase]']
MBC_test1
help txtl_addspecies
MBC_test1
%-- 8/10/16, 2:27 AM --%
addpath(genpath('pwd'))
txtl_init
MBC_test2
MBC_test2
gd(ID==1)
gd
gd(gd.ID==1)
gd(gd.ID==1,:)
edit createKdRules
edit createKdrules
edit createKdRules
Mobj2.reactions
clear all
MBC_test2
Mobj2.parameters
MBC_test2
finalEstimate
fval
startPointMatrix
format long
startPointMatrix
format short g
startPointMatrix
finalEstimate
Mobj2.parameters
sbioselect(Mobj2, 'TXTL_RBS_Ribo_deGFP_Kd')
p1 = sbioselect(Mobj2, 'TXTL_RBS_Ribo_deGFP_Kd')
p1 = sbioselect(Mobj2,'Name', 'TXTL_RBS_Ribo_deGFP_Kd')
set(p1)
set(p1, 'Value', 2)
p1 = sbioselect(Mobj2,'Name', 'TXTL_RBS_Ribo_deGFP_Kd')
dnaConcIDToUse = 5
GFP1
gd5_1
close all
MBC_test2
finalEstimate
725.07/0.06
104/0.23
help print
print('extractx', '-djpg', '-r300')
print('extractx', '-djpeg', '-r300')
datestr
datestr(now)
MBC_test2
finalEstimate
MBC_test2
finalEstimate
MBC_test2
finalEstimate
%-- 8/12/16, 1:25 AM --%
grabcode('http://web.stanford.edu/~boyd/papers/admm/basis_pursuit/basis_pursuit.html')
measuredVars = struct('colNames', 'objectNames', 'Type')
help struct
measuredVars = struct('cols', {'RNA', 'GFP'}, ...
'objectName',{'TotalRNA', 'protein deGFP*'}, ...
'type', {'species', 'species'})
measuredVars.objectName
length(measuredVars.objectName)
a = (measuredVars.objectName)
[a, b] = deal(measuredVars.objectName)
[a, b] = size(measuredVars)
help accelerate
modelObj = sbmlimport('lotka');
em = export(modelObj)
accelerate(em);
em.isAccelerated
mex -setup
accelerate(em);
mex -setup
accelerate(em);
em.isAccelerated
speciesGroups = struct('groupedSpecies', {'TotalRNA'},...
'speciesToGroup', {{'[RNA rbs--deGFP]', '[Ribo:RNA rbs--deGFP]',...
'[AA:AGTP:Ribo:RNA rbs--deGFP]', '[RNA rbs--deGFP:RNase]',...
'[AA:AGTP:Ribo:RNA rbs--deGFP:RNase]', '[Ribo:RNA rbs--deGFP:RNase]'}})
speciesGroups = struct('groupedSpecies', {'TotalRNA','TotalProt'},...
'speciesToGroup', {{'[RNA rbs--deGFP]', '[Ribo:RNA rbs--deGFP]',...
'[AA:AGTP:Ribo:RNA rbs--deGFP]', '[RNA rbs--deGFP:RNase]',...
'[AA:AGTP:Ribo:RNA rbs--deGFP:RNase]', '[Ribo:RNA rbs--deGFP:RNase]'}, {'hello'}})
specieGroups.groupedSpecies
speciesGroups.groupedSpecies
length(speciesGroups.groupedSpecies)
length(speciesGroups)
length(speciesGroups.SpeciesToGroup{1})
(speciesGroups.SpeciesToGroup
speciesGroups.SpeciesToGroup
speciesGroups.speciesToGroup
speciesGroups.speciesToGroup(1)
speciesGroups(1).speciesToGroup
length(speciesGroups(1).speciesToGroup)
a = 1
for i = 1:length(a)-1
a
end
for i = 1:length(a)
a
end
speciesGroups(1).speciesToGroup
speciesGroups(1).speciesToGroup{1}
class(speciesGroups(1).speciesToGroup{1})
expr
globalKdRules
globalKdRules(1)
globalKdRules(1).rxStr
class(globalKdRules(1).rxStr)
addpath('/Users/vipulsinghal/Dropbox/Documents/a_Research/ModelBasedCalibrations/NonlinearMBC/Code_NonlinearMBC')
addpath('/Users/vipulsinghal/Dropbox/Documents/toolbox/txtl-code-166-trunk')
%-- 8/17/16, 3:27 AM --%
-nodesktop
-desktop
clc
help sbiosimulate
dosingStrat = struct('species', {'DNA p70--rbs--deGFP'},...
'concentrations', {[1 2 4 8 16]});
dosingStrat(1).concentrations
length(dosingStrat(1).concentrations)
help sbioselect
help simdata/resample
help iscol
help isrow
magic(2)
reshape(magic(2))
reshape(magic(2), 4, 1)
reshape(magic(4), 8, 2)
magic(4)
reshape(magic(4), 16, 1)
reshape(magic(4), 1, 16)
help reshape
help selectbyname
randn(10, 1)
help randn
help trunc
help min
min([zeros(1, 10); randn(1,10)])
max([zeros(1, 10); randn(1,10)])
max([zeros(1, 10); randn(1,10)]', 1)
max([zeros(1, 10); randn(1,10)]', [],1)
max([zeros(1, 10)', randn(1,10)'], [],1)
max([zeros(1, 10)', randn(1,10)'], [],2)
max([zeros(10, 1), randn(10,1)], [],2)
max([zeros(10, 1), randn(10,1)])
max([zeros(10, 1), randn(10,1)], [],1)
max([zeros(10, 1), randn(10,1)], [],2)
help SimBiology.Export.Model
txtl_init
ls
clc
MBC_test2
clear all
clc
clear all
MBC_test2
exportedMdlObj
get(exportedMdlObj)
get(exportedMdlObj.SimulationOptions)
8*3600
get(exportedMdlObj.ValueInfo)
get(exportedMdlObj(1).ValueInfo)
get(exportedMdlObj.ValueInfo(1))
get(exportedMdlObj.ValueInfo(2))
get(exportedMdlObj.DependentFiles)
a = get(exportedMdlObj.DependentFiles)
a = get(exportedMdlObj.DependentFiles{1})
a = get(exportedMdlObj.DependentFiles(1))
a = get(exportedMdlObj.DependentFiles{1}{1})
exportedMdlObj.DependentFiles
exportedMdlObj.DependentFiles{1}
sI = get(exportedMdlObj.SimulationOptions)
get(exportedMdlObj)
help error
defaultMode = struct('simMode', {'default'}, 'paramsToEst', {})
defaultMode = struct('simMode', {'default'}, 'paramsToEst', {''})
whos
who
exportedMdlObj
get(exportedMdlObj)
set(exportedMdlObj)
sbioselect(exportedMdlObj, 'Type', 'species', 'Name', 'protein deGFP*')
help Simbiology.export
getIndex(exportedMdlObj)
getIndex(exportedMdlObj, 'protein deGFP*')
measuredSpecies = struct('cols', {'RNA', 'GFP'}, ...
'objectName',{'TotalRNA', 'protein deGFP*'}, ...
'type', {'species', 'species'})
struct2cell(measuredSpecies)
a = struct2cell(measuredSpecies)
a(1,1,:)
b = a(1,1,:)
b = deal(a(1,1,:))
[b1 , b2] = deal(a(1,1,:))
dosingStrat = struct('species', {'DNA p70--rbs--deGFP'},...
'concentrations', {[1 2 4 8 16]});
dosedNames = {};
for i = 1:length(dosingStrat)
dosedNames = [dosedNames {dosingStrat(i).species}]
end
estNames = {'TXTL_RBS_Ribo_deGFP_Kd',  'TXTL_P70_RNAPbound_deGFP_Kd' };
estParameters = sbioselect(Mobj2, 'Type', 'parameter', 'Name', estNames);
estSpecies = sbioselect(Mobj2, 'Type', 'species', 'Name', estNames);
dosedSpecies = {};
for i = 1:length(dosingStrat)
dosedSPecies = [dosedSpecies {dosingStrat(i).species}]
end
estNames = {'TXTL_RBS_Ribo_deGFP_Kd',  'TXTL_P70_RNAPbound_deGFP_Kd' };
estParameters = sbioselect(Mobj2, 'Type', 'parameter', 'Name', estNames);
estSpecies = sbioselect(Mobj2, 'Type', 'species', 'Name', estNames);
dosedNames = {};
for i = 1:length(dosingStrat)
dosedNames = [dosedNames {dosingStrat(i).species}]
end
dosedSpecies = sbioselect(Mobj2, 'Type', 'species', 'Name', dosedNames);
[estParameters; estSpecies; dosedSpecies]
a = [estParameters; estSpecies; dosedSpecies]
a(1)
a(2)
a(3)
estParameters
estNames = {'TXTL_RBS_Ribo_deGFP_Kd';  'TXTL_P70_RNAPbound_deGFP_Kd' };
estParameters = sbioselect(Mobj2, 'Type', 'parameter', 'Name', estNames);
estSpecies = sbioselect(Mobj2, 'Type', 'species', 'Name', estNames);
dosedNames = {};
for i = 1:length(dosingStrat)
dosedNames = [dosedNames; {dosingStrat(i).species}]
end
dosedSpecies = sbioselect(Mobj2, 'Type', 'species', 'Name', dosedNames);
a = [estParameters; estSpecies; dosedSpecies]
clear all
close all
clc
MBC_test2
exportedMdlObj
get(exportedMdlObj)
VI = get(exportedMdlObj)
VI = (exportedMdlObj.ValueInfo)
getIndex(exportedMdlObj, 'DNA p70--rbs--deGFP')
VI(getIndex(exportedMdlObj, 'DNA p70--rbs--deGFP'))
gfp = VI(getIndex(exportedMdlObj, 'DNA p70--rbs--deGFP'))
gfp.InitialValue
gfp.InitialValue = 1
VI(getIndex(exportedMdlObj, 'DNA p70--rbs--deGFP'))
get(exportedMdlObj)
exportedMdlObj.SimulationOptions
SI = exportedMdlObj.SimulationOptions
SI.StopTime
exportedMdlObj.InitialValues
format long
exportedMdlObj.InitialValues
gd_1
gd_1.GFP1(gd_1.ID==1)
a = {ones(4,1), 2*ones(4,1);3*ones(5,1), 4*ones(5,1)}
a{:}
vertcat(a{:})
mean(magic(3))
mean(magic(3),1)
mean(magic(3),2)
meanVals = [1 5 10]
relativeWt = 1./(meanVals/sum(meanVals))
relativeWt.*meanVals
sum(meanVals)/meanVals
sum(meanVals)./meanVals
a = sum(meanVals)./meanVals
a/sum(a)
function_design_script
repmat(1:nDoseCombinations, length(tvec), 1)
numel(repmat(1:nDoseCombinations, length(tvec), 1))
prod(length(tvec), nDoseCombinations)
ID = reshape(repmat(1:nDoseCombinations, length(tvec), 1) , ...
prod([length(tvec), nDoseCombinations]), 1);
ID
function_design_script
DOSE1
CONC
function_design_script
measuredSpecies(i).cols
GFP
RNA
help groupedData
function_design_script
length(gdi.TIME)
measuredSpecies(i).cols
function_design_script
gd
gd.RNA
function_design_script
dosedInitVals
function_design_script
finalEstimate
format short g
finalEstimate
m1.reactions
m1.reactions(12)
m1.reactions(12).getparameters
get(m1.reactions(12))
get(m1.reactions(12).KineticLaw)
get(m1.reactions(12).KineticLaw.Parameters)
m1.Species
sbioselect(m1, 'Name', 'RNAP')
sbioselect(m1, 'Type', 'Species', 'Name', 'RNAP')
rnap = sbioselect(m1, 'Type', 'Species', 'Name', 'RNAP')
rnap.InitialAmount
rnap.InitialAmount = 20
nlMBC_T2
finalEstimate
scatter(finalEstimate)
help scatter
scatter(finalEstimate(:,1), finalEstimate(:,2))
sc = scatter(finalEstimate(:,1), finalEstimate(:,2))
set(sc)
ca = gca
set(ca, 'XScale', 'log', 'YScale', 'Log')
nlMBC_T2
finalEstimate
startPointMatrix
startPointMatrix{1}
figure; sc2 = scatter(startPointMatrix{1}finalEstimate(:,1), startPointMatrix{1}(:,2)); set(gca, 'XScale', 'log', 'YScale', 'Log');
figure; sc2 = scatter(startPointMatrix{1}(:,1), startPointMatrix{1}(:,2)); set(gca, 'XScale', 'log', 'YScale', 'Log');
startPointMatrix{:}
vertcat(startPointMatrix{:})
vertcat(startPointMatrix{:})(:,1)
vertcat(startPointMatrix{:}(:,1))
spm = vertcat(startPointMatrix{:});
spm(:,1)
spm = vertcat(startPointMatrix{:});spm = vertcat(startPointMatrix{:});
figure; sc2 = scatter(spm(:,1), spm{1}(:,2)); set(gca, 'XScale', 'log', 'YScale', 'Log');
figure; sc2 = scatter(spm(:,1), spm(:,2)); set(gca, 'XScale', 'log', 'YScale', 'Log');
help axis
close all
help tight_subplot
help smplot
%-- 8/18/16, 8:03 AM --%
clc
help smplot
smplot(3,4,1,'right',0.2,'bottom',0.5)
smplot(3,4,12,'right',0.2,'bottom',0.5)
for k = 1:21
smplot(7,3,k)
imagesc(peaks(300))
axis off
end
% Create some example data:
[X,Y,Z] = peaks(300);
xv=[-66,-104,-151,-193,-133,-125,-75,-6,133,234,196,204,132,117]/100;
yv=[276,220,89,-38,-134,-222,-268,-280,-259,-213,-104,66,162,252]/100;
in = inpolygon(X,Y,xv,yv);
Z(~in) = NaN;
% Plot 24 datasets:
for k = 1:24
smplot(6,4,k,'right',0.1)
pcolor(X,Y,Z+3*randn(1)+3*sin(k/4))
shading flat
caxis([-12 12])
axis off
end
cb = colorbar('east');
set(cb,'Position',[0.92 0.1 0.04 0.8])
close all
% Create some example data:
[X,Y,Z] = peaks(300);
xv=[-66,-104,-151,-193,-133,-125,-75,-6,133,234,196,204,132,117]/100;
yv=[276,220,89,-38,-134,-222,-268,-280,-259,-213,-104,66,162,252]/100;
in = inpolygon(X,Y,xv,yv);
Z(~in) = NaN;
% Plot 24 datasets:
for k = 1:24
smplot(6,4,k,'right',0.1)
pcolor(X,Y,Z+3*randn(1)+3*sin(k/4))
shading flat
caxis([-12 12])
axis off
end
cb = colorbar('east');
set(cb,'Position',[0.92 0.1 0.04 0.8])
close all
for k = 1:12
smplot(3,4,k,'axis','on')
plot(rand(6,2),'p');
axis tight
end
help subaxis
subaxis(2,1,1,'SpacingVert',0,'MR',0);
imagesc(magic(3))
close all
subaxis(2,1,1,'SpacingVert',0,'MR',0);
imagesc(magic(3))
close all
subaxis(2,'p',.02);
subaxis(2,1,1,'SpacingVert',0,'MR',0);
imagesc(magic(3))
subaxis(2,'p',.02);
imagesc(magic(4))
edit subaxis
help tightplot
help tightPlot
help tightPlots
edit tightPlots
addpath(genpath(pwd))
help tightPlots
nlMBC_T2
clear all
nlMBC_T2
who
help save
save('first_run')
fval{1}
fval{end}
help subtightplot
figure;
subtightplot(2,2,1, 0.3, 0.1, 0.1)
subtightplot(2,2,2, 0.3, 0.01, 0.01)
subtightplot(2,2,2, 0.1, 0.01, 0.01)
subtightplot(2,2,2, 0.01, 0.01, 0.01)
subtightplot(2,2,1, 0.01, 0.01, 0.01)
subtightplot(2,2,1, 0.07, 0.01, 0.01)
subtightplot(2,2,2, 0.07, 0.01, 0.01)
subtightplot(2,2,2, 0.05, 0.05, 0.05)
subtightplot(2,2,3, 0.05, 0.05, 0.05)
subtightplot(2,2,4, 0.05, 0.05, 0.05)
subtightplot(2,2,4, 0.04, 0.04, 0.04)
edit testScript
close all
ff
get(ff)
set(ff)
close all
help subtightplot
close all
testScript
edit subtightplot
help ind2sub
testScript
help subplot
help legend
help xlabel
ff
ff.CurrentAxes
ff.Children
ff.Children(1)
ff.Children(2)
help suplabel
edit suplabel
[ax4,h3]=suplabel('super Title'  ,'t');
testScript
close all
testScript
nR = 5
c = 7
mod(c, nR)
testScript
%-- 8/19/16, 10:38 AM --%
help deal
axBuf=.02;
[leftBuff, rightBuff, topBuff, BotBuff] = deal(axBuf);
leftBuff
help inputParser
help isstring
ischar
help ischar
a = [1 2 3 4]
[p q r s] = deal(a)
[p q r s] = deal(a(:))
a = {1 2 3 4}
[p q r s] = deal(a{:})
class(p)
help mfilename
help isstr
testScript
help ylabel
ylabel(ax4, 'This YLabel')
testScript
suplabel_vs
testScript
suplabel_vs
testScript
help smallplots
edit suplabel_vs
%-- 8/23/16, 3:56 AM --%
help iscell
help addParameter
struct('legends', {''}, 'position', [0.87,0.85,0.05,0.1])struct('legends', {''}, 'position', {[0.87,0.85,0.05,0.1]})
struct('legends', {''}, 'position', [0.87,0.85,0.05,0.1])*struct('legends', {''}, 'position', {[0.87,0.85,0.05,0.1]})
struct('legends', {''}, 'position', {[0.87,0.85,0.05,0.1]})
struct('legends', {{}}, 'position', {[0.87,0.85,0.05,0.1]})
a = struct('legends', {{}}, 'position', {[0.87,0.85,0.05,0.1]})
a.legends
isempty(a.legends)
isempty({''})
isempty({})
isempty({{}})
help index
help indices
help findindex
help ind2sub
[h,v] = ind2sub([5,7], 12)
[r,c] = ind2sub([5,7], 12)
% i see, it counts downwards
[col, row] = ind2sub([7,5], 12)
%-- 9/4/16, 11:28 AM --%
mcmc_example1
%-- 9/4/16, 11:33 AM --%
% METROPOLIS SAMPLING EXAMPLE
randn('seed',12345);
% DEFINE THE TARGET DISTRIBUTION
p = inline('(1 + x.^2).^-1','x')
% SOME CONSTANTS
nSamples = 5000;
burnIn = 500;
nDisplay = 30;
sigma = 1;
minn = -20; maxx = 20;
xx = 3*minn:.1:3*maxx;
target = p(xx)
plot(target)
plot(xx,target)
%-- 9/4/16, 11:41 AM --%
p = @(x)((1 + x.^2).^-1)
p(3)
randn('seed',12345);
randn('seed',12345)
nSamples = 5000;
burnIn = 500;
nDisplay = 30;
sigma = 1;
minn = -20; maxx = 20;
xx = 3*minn:.1:3*maxx;
target = p(xx)
pauseDur = .8;
x = zeros(1 ,nSamples);
x(1) = randn;
t = 1;
mcmc_example1
a =
a = normrnd(2,1)
%-- 9/7/16, 6:08 AM --%
magic(4)
%-- 9/7/16, 6:20 AM --%
help toolbox_path_cache
%-- 9/7/16, 6:29 AM --%
ls
cd toolbox
%-- 9/7/16, 6:31 AM --%
ls
cd toolbox
ls
cd txtl-code-166-trunk
ls
txtl_init
geneexpr
dir examples
negautoreg
simbiology
clc
randn('seed',12345);
p = @(x)((1 + x.^2).^-1)
mcmc_example1
test_001_ODE23
help ode23
help ode15s
help sprintf
%-- 9/7/16, 10:19 AM --%
clc
%-- 9/7/16, 10:46 AM --%
1 + 1
%-- 9/7/16, 11:11 AM --%
filebrowser
%-- 9/7/16, 1:43 PM --%
filebrowser
%-- 9/7/16, 1:44 PM --%
untitled
edit ex_linefit.m
ex_linefit
ex_behappy
edit ex_behappy.m
%-- 9/8/16, 5:21 AM --%
help polyfit
help log
log([1, 2, 3])
ex_linefit
help fminsearch
polyfit(x,y,1)
[polyfit(x,y,1) 0]'
10*rand(length(tspan),1)
close all
tic
a_m = 40;
a_p = 100;
K_m = 30;
K_p = 20;
d_m = 0.1;
dil = 0.5;
p = [a_m, a_p, K_m, K_p, d_m, dil];
tspan = [0:1:20];
DNAconc = [1 16 128];
sconc = cell(length(DNAconc),1);
figure
for i = 1:length(DNAconc)
sp0 = [DNAconc(i) 0 0];
[t,sconc{i}] = ode15s(@(t,sp) constitutive_gfp(t,sp,p), tspan, sp0);
noise_gfp = 10*rand(length(tspan),1);
noise_rna = 15*rand(length(tspan),1);
sconc{i}(:,2) = sconc{i}(:,2) + noise_rna;
sconc{i}(:,3) = sconc{i}(:,3) + noise_gfp;
subplot(length(DNAconc),1,i)
plot(tspan,sconc{i}(:,2),'-',t,sconc{i}(:,3),'-.')
title(sprintf('Initial DNA concentration %s units', num2str(DNAconc(i))))
legend({'mRNA', 'GFP'})
xlabel('time/arbitrary units')
ylabel('AFU')
end
genemodel = @(p, sp0) ode15s(@(t,sp) constitutive_gfp(t,sp,p), tspan, sp0);
gene
genemodel
p
genemodel(p,sp0)
sp0
conc = genemodel(p,sp0)
conc.extdata
conc.x
tspan
conc.y
conc.stats
conc.idata
[t, conc] = genemodel(p,sp0)
figure; plot(t,conc)
help rand
help randn
m = magic(4)
a = m(:)
1>2 || 3>2
[1>2 || 3>2;
4 = 3 || 2<6]
[1>2 || 3>2;
4 == 3 || 2<6]
[1>2 || 3>2 ...
&& 4==3 || 2<6]
[1>2 || 3>2 ...
&& 4==3 || 2>6]
exp(2)
a = [-3; 2; 4]
a>-6
istrue(a>-6)
all(a>-6)
e^-12
exp(-12_
exp(-12)
exp(-18)
exp(-20)
help bsxfun
help lhs
help lhsample
help lhsdesign
X = lhsdesign(4, 3)
X = lhsdesign(4, 9)
a_m = 40;
a_p = 100;
K_m = 30;
K_p = 20;
d_m = 0.1;
dil = 0.5;
logp = log([a_m, a_p, K_m, K_p, d_m, dil])
edit constitutive_gfp.m
clear all
test_002_ODE23_test
minit
size(minit)
test_002_ODE23_test
clear all
close all
clc
test_002_ODE23_test
help rand
test_002_ODE23_test
help suplabel
whos
help save
save('t002_8Sep2016_1545')
help gwmcmc
test_002_ODE23_test
a = 1
test_002_ODE23_test
whos
save('t002_big_sim_sep8_2016')
close all
test_002_ODE23_test
exp(-12)
exp(12)
exp(6)
exp(-6)
nparam
lhsamp = 24*(lhsdesign(nW, nparam)-0.5);
size(lhsamp)
lhsamp
exp(lhsamp)
format short g
exp(lhsamp)
help gwmcmc
test_002_ODE23_test
%-- 9/9/16, 10:03 PM --%
size(m)
save('giiiid 5mil lhs')
close all
clear all
load('giiiid 5mil lhs')
%-- 9/16/16, 5:04 AM --%
ls
load test003_sep15_simresults4param
whos
estParameters
ls
edit testScript.m
addpath('/Users/vipulsinghal/Dropbox/Documents/a_Research/Advanced Matlab Tools/mcmc_grinsted-gwmcmc-2c86b0e')
testScript
clear all
load test003_sep14_simresults3param
estParameters
testScript
load test003_sep15_simresults4param
testScript
%-- 9/17/16, 12:45 PM --%
load NESSA_test003_6param_sep15_1
whos
estNames
testScript
clc
testScript
addpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB')
testScript
exp([-6 0 -5.33 2.6])
113414/3600
%-- 9/19/16, 7:33 AM --%
close all
clear all
addpath('/Users/vipulsinghal/Dropbox/Documents/a_Research/Advanced Matlab Tools/mcmc_grinsted-gwmcmc-2c86b0e')
addpath('/Users/vipulsinghal/Dropbox/Documents/vipul_repo/MBC/Code_NonlinearMBC')
currdir = pwd;
txtldir = '/Users/vipulsinghal/Dropbox/Documents/toolbox/txtl-code-166-trunk';
cd(txtldir)
txtl_init % txtl toolbox subdirectories path initialization
cd(currdir)
help meshgrid
meshgrid(1:5,6:10)
reshape(meshgrid(1:5,6:10),25,1)
reshape(meshgrid(1:5,6:10),25,1)'
xcol1 = reshape(meshgrid(1:6,6:11),36,1)'
length(xcol)
length(ycol)
close all
concat_arrays
help axis
whos
concat_arrays
scplot = scatter(m(:,c),m(:,r),'.')
concat_arrays
p.range
help prctile
help position
help clf
help gcf
concat_arrays
set(ff, 'Position', [100 100 900 800])
set(gcf, 'Position', [100 100 900 800])
set(gcf, 'Position', [200 100 900 800])
set(gcf, 'Position', [50 100 900 800])
set(gcf, 'Position', [50 200 400 400])
set(gcf, 'Position', [50 400 400 400])
get(0)
get(0, 'ScreenSize')
xs = 500; ys = 600; set(gcf, 'Position', [50 850-ys xs ys])
xs = 500; ys = 900; set(gcf, 'Position', [50 850-ys xs ys])
xs = 500; ys = 1400; set(gcf, 'Position', [50 850-ys xs ys])
xs = 500; ys = 1800; set(gcf, 'Position', [50 850-ys xs ys])
help print
%-- 9/19/16, 5:19 PM --%
addpath('/Users/vipulsinghal/Dropbox/Documents/a_Research/Advanced Matlab Tools/mcmc_grinsted-gwmcmc-2c86b0e')
addpath('/Users/vipulsinghal/Dropbox/Documents/vipul_repo/MBC/Code_NonlinearMBC')
currdir = pwd;
txtldir = '/Users/vipulsinghal/Dropbox/Documents/toolbox/txtl-code-166-trunk';
cd(txtldir)
txtl_init % txtl toolbox subdirectories path initialization
cd(currdir)
concat_arrays
%-- 9/20/16, 2:33 PM --%
addpath('/Users/vipulsinghal/Dropbox/Documents/a_Research/Advanced Matlab Tools/mcmc_grinsted-gwmcmc-2c86b0e')
addpath('/Users/vipulsinghal/Dropbox/Documents/vipul_repo/MBC/Code_NonlinearMBC')
load test002_lhInitialpts_5million_sep8_2016
%-- 9/21/16, 2:04 AM --%
load test004_sep19_2016_E1
whos
m1 = m;
load test004_sep19_2016_E2
m2 = m;
size(m)
close all
exp([3.6 3.8 3.9 0.9 -1.2 -0.9])
exp([3.9 3.6 1.2 5 -1.2 -0.6])
load test004_sep20_2016_E1_linp
whos
linp
m1 = m;
%-- 9/21/16, 5:37 AM --%
m1
clc
whos
save('this_is_m1', 'm1')
m1
clear all
load this_is_m1
m1
load this_is_m1
m1
m1.reactions
m1.reactions(3)
m1.reactions(3).KineticLaw
m1.reactions(3).KineticLaw.getparameters
m1.reactions(4).KineticLaw.getparameters
m1.reactions(5).KineticLaw.getparameters
%-- 9/28/16, 7:02 AM --%
help subplot
%-- 9/28/16, 11:52 AM --%
process_test_005_sep26_MBP
logp2
%-- 9/30/16, 9:39 AM --%
exp([11.5
-9.61
3.23
-2.5
-7.51
-9.89
2.11
-0.549
2.66
9.77
-14
-0.732
7.38
-6.47
14.6])
format short g
14.6])
exp([11.5
-9.61
3.23
-2.5
-7.51
-9.89
2.11
-0.549
2.66
9.77
-14
-0.732
7.38
-6.47
14.6])
%-- 10/2/16, 3:01 AM --%
edit poolStartup.m
test003_sep30_3
minit
size(minit)
whos
load('test003_sep30_2', 'm')
size(m)
load('test003_sep30', 'm')
size(m)
load('test003_sep30_2', 'm') % size(m) is 15 x  1600  x  14
minit = m(:,1:4:1600,end);
size(minit)
test003_sep30_3
whos
load('test003_sep30_3', 'm')
whos
test003_sep30_3
process_test003_30_3
size(m1)
size(m2)
size(m3)
load('test004_sep30_E1_5_MBP.mat', 'm', 'logp')
logp
log p
logp
exp(1.1)
exp(5.25)
test007_plot_posterior_simpleE1_oct2
clear all
load('test003_sep30.mat')
m0 = m(:,:)';
whos
tspan
size(tspan)
size(tspan,1)*5
clear all
close all
test007_plot_posterior_simpleE1_oct2
whos
test007_plot_posterior_simpleE1_oct2
measuredSpecies
measuredSpecies(2)
test007_plot_posterior_simpleE1_oct2
h
test007_plot_posterior_simpleE1_oct2
size(conc)
test007_plot_posterior_simpleE1_oct2
r
mtxtl(r,:)
help hist
help histogram
mm = mtxtl(r,:);
histogram(mtxtl(:,10))
close all
histogram(mtxtl(:,10))
I = find(-1.5<mtxtl(:,10)<0);
size(I)
help find
I = find(-1.5<mtxtl(:,10) && mtxtl(:,10)<0);
(-1.5<mtxtl(:,10) && mtxtl(:,10)<0)
I = find(-1.5<mtxtl(:,10) & mtxtl(:,10)<0);
size(I)
I = find(-1.5<mtxtl(:,10) & mtxtl(:,10)<-1);
size(I)
test007_plot_posterior_simpleE1_oct2
r
format short g
r
test007_plot_posterior_simpleE1_oct2
exp([-1.5 -1])
exp([-1.5 -1 0])
test007_plot_posterior_simpleE1_oct2
histogram(mtxtl(:,11))
close all
histogram(mtxtl(:,11))
test007_plot_posterior_simpleE1_oct2
whos
figure; subplot(3,1,1); plot(tspan, simulatedDataMatrix(1:161:1))
figure; subplot(3,1,1); plot(tspan, simulatedDataMatrix(1:161,1))
subplot(3,1,2); plot(tspan, simulatedDataMatrix(161+1:2*161,1))
subplot(3,1,3); plot(tspan, simulatedDataMatrix(2*161+1:3*161,1))
figure; subplot(3,1,1); plot(tspan, simulatedDataMatrix(1:161,1))
subplot(3,1,2); plot(tspan, simulatedDataMatrix(161+1:2*161,1))
figure; subplot(3,1,1); plot(tspan, simulatedDataMatrix(1:161,1))
subplot(3,1,2); plot(tspan, simulatedDataMatrix(161+1:2*161,1))
subplot(3,1,3); plot(tspan, simulatedDataMatrix(2*161+1:3*161,1))
test003_sep30_3
measuredSpecies(k).objectName
help reshape
figure; subplot(3,1,1); plot(tvec, CONC(:,1,1))
figure; subplot(3,1,2); plot(tvec, CONC(:,1,2))
subplot(3,1,3); plot(tvec, CONC(:,1,3))
test003_sep30_3
figure; subplot(3,1,1); plot(tspan, simulatedDataMatrix(1:161,1))
subplot(3,1,2); plot(tspan, simulatedDataMatrix(161+1:2*161,1))
subplot(3,1,3); plot(tspan, simulatedDataMatrix(2*161+1:3*161,1))
test003_oct3_fixed_reshape_bug
test008_simplemodel_combinedOptimization
test003_oct3_fixed_reshape_bug
%-- 10/7/16, 8:02 AM --%
27*25
27*25/7
3^5
243*3
3^4
3^4*3
3^4*3/7
%-- 10/8/16, 6:36 PM --%
test009s0s1
%-- 10/11/16, 10:03 AM --%
logpjoint
median(msimple_l10)
logp_simple_l10
prctile(msimple_l10,[45 48 52 55])
prctile(msimple_l10,[25 45 48 52 55 75])
exp(prctile(msimple_l10,[25 45 48 52 55 75]))
10.^(prctile(msimple_l10,[25 45 48 52 55 75]))
10.^logp_simple_l10
10.^(0:0.05:2)
prctile(msimple_l10,[25 45 48 52 55 75])
logp_simple_l10
size(mtxtl_l10)
i
eval(['load(''test003_oct11_' num2str(i) '.mat'', ''m'', ''logp'');'])
clear all
eval(['load(''test003_oct11_' num2str(i) '.mat'');'])
i = 5
eval(['load(''test003_oct11_' num2str(i) '.mat'');'])
whos
tspan
tspan/3600
measuredNames
whos
measuredSpecies
measuredSpecies{1}
measuredSpecies(1)
measuredSpecies(2)
help std
dosedInitVals(i,:)'
process_test003_oct11_tightLikelihood
size(spSD.Data)
size([RNAsampleTraj(:,i, kk), GFPsampleTraj(:,i,kk)])
[RNAsampleTraj(:,i, kk), GFPsampleTraj(:,i,kk)] = spSD.Data
help deal
spSD.Data(:,1)
[RNAsampleTraj(:,i, kk), GFPsampleTraj(:,i,kk)] = deal(spSD.Data(:,1), spSD.Data(:,2))
process_test003_oct11_tightLikelihood
aaaa = []
aaaa = [aaaa;2]
setdiff(1:10, [2 3 6])
process_test003_oct11_tightLikelihood
help ceil
maxRNA
maxGFP
round(maxRNA+5, 10)
round(maxGFP+5, 10)
round(maxGFP+5, 1)
round(maxGFP+5, 2)
round(maxGFP+5, -1)
process_test003_oct11_tightLikelihood
I
size(I)
help hist
histc(mtxtl, -10:0.1:10)
for i = 1:15
subplot(3,5,i)
title(legs{i})
end
for i = 1:15
subplot(3,5,i)
title(legs{i})
histogram(mtxtl, -10:0.1:10)
end
for i = 1:15
subplot(3,5,i)
title(legs{i})
histogram(mtxtl(:,i), -10:0.1:10);
end
%-- 10/13/16, 7:03 AM --%
ls
load test003_oct12_step20_tightening4_burnin1.mat
whos
size(m)
[nParam, nWalkers, nSamples] = size(m)
twofactors(nParam)
unique([1 1 2 5 6 6 7])
leg
legs
who
legends = {  'k_{term}'
'RNAd_{cat}'
'RBS_{Kd}'
'prom_{Kd}'
's70_{Kd}'
'NTP_{Kd1}'
'NTP_{Kd2}'
'AA_{Kd}'
'RNAd_{Kd}'
'k_{emrna}'
'k_{eprot}'
'RNAP'
's70'
'Ribo'
'RNase'};
plotChains(m, 100, legends)
m(i, wix(j), :)
squeeze(m(i, wix(j), :))
plotChains(m, 100, legends)
wix
size(m)
length(wix)
nWalkers
plotChains(m, 100, legends)
plotChains(m, 300, legends)
p
set(p)
get(p)
plotChains
size(m)
plotChains(m, 300, legends)
plotChains(m, 30, legends)
plotChains(m, 200, legends)
load test003_oct12_step20_tightening4_ID1
plotChains(m, 200, legends)
help cat
concat_MC_t003_oct12_ss20t4
close all
plotChains(mcat, 200, legends);
concat_MC_t003_oct12_ss20t4
datafiles
hep suptitle
help suptitle
datafiles{1}
concat_MC_t003_oct12_ss20t4
close all
%-- 10/13/16, 1:20 PM --%
test003_oct11_tightLikelihood
ssz
sdtStr
minit = m(:,:,end);
tic
[m, lP, nim] =gwmcmc_vse(minit,{logprior loglike},3e5, 'StepSize',ssz , ...
'ThinChain',1, 'Parallel', true);% NO BURN IN since continuation
toc
save(['test003_oct12_step' sszStr '_tightening' sdtStr '_ID' num2str(i) ]);
i
tic
[m, lP, nim] =gwmcmc_vse(minit,{logprior loglike},3e5, 'StepSize',ssz , ...
'ThinChain',1, 'Parallel', true);% NO BURN IN since continuation
toc
save(['test003_oct12_step' sszStr '_tightening' sdtStr '_ID' num2str(i) ]);
legends
legs
legends =  {  'k_{term}'
'RNAd_{cat}'
'RBS_{Kd}'
'prom_{Kd}'
's70_{Kd}'
'NTP_{Kd1}'
'NTP_{Kd2}'
'AA_{Kd}'
'RNAd_{Kd}'
'k_{emrna}'
'k_{eprot}'
'RNAP'
's70'
'Ribo'
'RNase'};
plotChains(m, 200, legends);
plotChains(m, 20, legends);
plotChains(m, 50, legends);
plotChains(m(1:4,:,:), 50, legends(1:4));
plotChains(m(1:4,:,:), 25, legends(1:4));
plotChains(m(1:4,:,:), 75, legends(1:4));
plotChains(m(1,:,:), 75, legends(1));
plotChains(m(1,:,:), 150, legends(1));
plotChains(m(12,:,:), 150, legends(12));
plotChains(m(11,:,:), 150, legends(11));
plotChains(m(10,:,:), 250, legends(10));
close all
ssz
sdt
i
size(m)
sd = 0.5;
rnsamp = sd*randn(nparam,nW)-sd/2;
rnsamp
help scatter3
figure; scatter3(rnsamp(1,:),rnsamp(2,:),rnsamp(3,:) )
test003_oct11_tightLikelihood
toc
for i = 1:100
toc
end
for i = 1:100
toc
end
help toc
toc
tic
toc
to
toc
test003_oct11_tightLikelihood
edit gwmcmc_vse.m
edit poolStartup.m
sszStr
strcmp(sszStr, '2p5') && (strcmp(sdtStr, '2') || strcmp(sdtStr, '15'))
test003_oct11_tightLikelihood
%-- 10/14/16, 1:33 PM --%
help MPinterval
help join
load test003_oct12_step2p5_tightening50_ID2
whos
[Ikeep, bds, mx, mp] = sampleIntersections(m(:,:)', [10 11 12]);
sampleIntersections
[Ikeep, bds, mx, mp] = sampleIntersections(m(:,:)', [10 11 12]);
m(:,colIdx(i))>bds(1,colIdx(i))
[Ikeep, bds, mx, mp] = sampleIntersections(m(:,:)', [10 11 12]);
size(Ikeep)
Ikeep
plot(Ikeep)
bds
mx
mp
length(size(m))
help ndim
ndim(m)
ndims(m)
[Ikeep] = sampleIntersections(m(:,:)', [10 11 12]);
Ikeep
colorschemes
colorschemes('plot')
tspan
length(tspan)
clear all
close all
clc
process_test003_oct12_withFunctions
whos
process_test003_oct12_withFunctions
rejProp
plotChains(m)
help plotchains
edit plotChains
plotChains(m, 100, legs)
legends =  {  'k_{term}'
'RNAd_{cat}'
'RBS_{Kd}'
'prom_{Kd}'
's70_{Kd}'
'NTP_{Kd1}'
'NTP_{Kd2}'
'AA_{Kd}'
'RNAd_{Kd}'
'k_{emrna}'
'k_{eprot}'
'RNAP'
's70'
'Ribo'
'RNase'};
plotChains(m, 100, legends)
process_test003_oct12_withFunctions
whos
rejProp
plot(rejProp)
gcf
figure; plot(rejProp)
close all
clear all
lead test003_oct11_ss_0p011
load test003_oct11_ss_0p011
whos
loglike
clc
process_test003_oct12_withFunctions
p.mass
help addOptional
process_test003_oct12_withFunctions
help break
process_test003_oct12_withFunctions
close all
clear all
help MPestimate
ls
help MPinterval
edit MPinterval
edit test008_oct11_tightLikelihood.m
edit test009s0s1
test009s0s1
clear all
close all
clc
whos
test009s0s1
log([1e-4 1e4])
exp([-8 8])
format short g
exp([-8 8])
exp([-7 7])
test008_oct11_tightLikelihood
m
whos
clear all
close all
clc
load test008_oct14_burnin_smallerlims
whos
logpjoint
logpjoint/log(10)
I = sampleIntersections(mcat_l10, 1:8, 'mass', 0.02, 'npoints', 500);
mean(mcat_l10(I, :))
I = sampleIntersections(mcat_l10(:,:)', 1:8, 'mass', 0.02, 'npoints', 500);
mm = (mcat_l10(:, :)');
mean(mm(I, :))
mcat_l10
mm = (mcat_l10(:, :)');
I = sampleIntersections(mm, 1:8, 'mass', 0.02, 'npoints', 500);
I(1:10)
size(I)
I = sampleIntersections(mm, 1:8, 'mass', 0.2, 'npoints', 500);
I
size(mm)
I = sampleIntersections(mm, 1:8, 'mass', 0.2, 'npoints', 50);
I
I = sampleIntersections(mm, 1:8, 'mass', 0.5, 'npoints', 50);
I
size(I)
I = sampleIntersections(mm, 1:8, 'mass', 0.5, 'npoints', 500);
size(I)
mean(mm(I, :))
logpjoint/log(10)
I = sampleIntersections(mm, 1:8, 'mass', 0.5, 'npoints', 100);
I = sampleIntersections(mm, 1:8, 'mass', 0.5, 'npoints', 100); mean(mm(I, :))
I = sampleIntersections(mm, 1:8, 'mass', 0.2, 'npoints', 100); mean(mm(I, :))
I = sampleIntersections(mm, 1:8, 'mass', 0.9, 'npoints', 100); mean(mm(I, :))
I = sampleIntersections(mm, 1:8, 'mass', 0.99, 'npoints', 100); mean(mm(I, :))
logpjoint/log(10)
mean(mm)
median(mm)
exp(logpjoint(3:6))
I = sampleIntersections(mm, 1:8, 'mass', 0.5, 'npoints', 100); mean(mm(I, :))
clc
estparams
logpjoint
100*(logpjoint-estparams)./logpjoint
(logpjoint-estparams)./logpjoint
round(100*(logpjoint-estparams)./logpjoint)
exp(estparams)
exp(estparams)'
exp(median(msimple))'
test009s0s1
%-- 10/16/16, 1:53 PM --%
test008_oct11_tightLikelihood
43000/3600
test003_oct11_tightLikelihood
m1
m1.parameters
exp(8)
exp(9)
exp(-9)
exp(-8)
exp(8)
test003_oct11_tightLikelihood
18*rand(1)+lb/(ub-lb)
18*rand(10)+lb/(ub-lb)
lb
lb/(ub-lb)
rsamp = (ub-lb)*rand(nparam, 5) +lb
hist(rsamp())
hist(rsamp(:))
figure; hist(rsamp(:))
rsamp = (ub-lb)*rand(nparam, nW) +lb;
figure; hist(rsamp(:))
figure; hist(rsamp(:), 100)
rsamp = (ub-lb)*rand(nparam, nW*3) +lb;
figure; hist(rsamp(:), 100)
test003_oct11_tightLikelihood
rsamp
clear all
clc
close all
test003_oct11_tightLikelihood
logprior(rsamp)
logprior(rsamp(:,1))
for i = 1:nW
end
check = 1
for i = 1:nW
check = logprior(rsamp(:,i))*check;
end
check
test003_oct11_tightLikelihood
logP(:,:,1)
test003_oct11_tightLikelihood
%-- 10/17/16, 12:27 PM --%
randn(1)
estparams'
logpjoint'
exp(estparams')
clear all
load test009s0s1_oct15_burnin_smallerlims
whos
legs
legends
size(m)
legends{1:2, 5:6}
legends{[1:2, 5:6]}
legends{[1:2, 5:6]}'
legends([1:2, 5:6])'
edit plotChains
datafiles = {'test009s0s1_oct15_burnin_smallerlims'
'test009s0s1_oct15_1_MBP_smallerlims'
'test009s0s1_oct15_2_MBP_smallerlims'
'test009s0s1_oct15_3_MBP_smallerlims'
'test009s0s1_oct15_4_MBP_smallerlims'
'test009s0s1_oct15_5_MBP_smallerlims'};
legends = {'a_m'    'a_p'    'K_m_2'    'K_p_2'};
mcat = catMC(datafiles);
plotChains(mcat, 200, legends );
test009s2
a_m_est = partmedian(1)
a_p_est = partmedian(2)
d_m_est = partmedian(3)
d_p_est = partmedian(4)
K_m_est_e1 = exp(estparams(3))
K_p_est_e1 = exp(estparams(4))
K_m_est_e2 = exp(estparams(5))
K_p_est_e2 = exp(estparams(6))
K_m_est_e1 = exp(estparams(3))
K_p_est_e1 = exp(estparams(4))
test009s2
clear all
load test008_oct14_2_MBP_smallerlims
tspan
load test009s0s1_oct15_2_MBP_smallerlims
tspan
test009s2
clc
maxRNA = max(max(spconc_e2data(:,2,:)))
get(f)
get(f, 'Children')
aaa = get(f, 'Children')
aaa(1)
class(aaa(1)
class(aaa(1))
class(aaa(2))
help isaxis
class(aaa(2))
aaa = get(f, 'Children')
help isa
isa(aaa(2), 'matlab.graphics.axis.Axes')
aaa(2)
get(aaa(2))
maxGFP = max(max(spconc_e2data(:,3,:)))
test009s2
close all
whos
test009s2
cc
test009s2
close all
clear all
close all
clear all
load('test008_oct14_10_MBP_smallerlims_ssp5')
whos
format short g
ans
process_test008_withFunctions
test009s2
whos
test009s2
close all
clc
ex_rosenbrockbanana
test003_oct11_tightLikelihood
eig([1 -1; -1 1])
%-- 10/19/16, 7:23 PM --%
HW3q5i
cvx_setup
HW3q5i
help NARGINCHK
HW3q5i
help nargchk
HW3q5i
warning('off','all')
HW3q5i
X
X(:,1:2)
help iszero
help isnan
sum(X(:,2) == 0)
HW3q5i
help norm
HW3q5i
(A*A')
(A*A')\y
A'*(A*A')\y
A'*((A*A')\y)
HW3q5i
imagesc(success)
success(1:5,1:5)
size(success)
clear all
cvx_quiet true
help cvx_quiet
cvx_quiet
cvx_quiet(TRUE)
cvx_quiet(true)
cvx_quiet
HW3q5i
cvx_quiet
cvx_quiet(true)
HW3q5i
x
sum(x)
(x(1)+3)^2 + (x(2)^2+1) + exp(x(3)/10) + 20*x(4)+2
y = x + [-3 +1 1 1]
y = x + [-3 +1 1 1]'
y = x
x = y + [-3 +1 1 1]'
(x(1)+3)^2 + (x(2)^2+1) + exp(x(3)/10) + 20*x(4)+2
help surf
help imagesc
success
save('cvx_hw3_q5')
%-- 10/20/16, 8:11 AM --%
test003_oct11_tightLikelihood
clc
size(simulatedDataMatrix)
nt = length(tspan);
for i = 1:5
subplot(5, 2, (i-1)*2+1)
plot(tspan, simulatedDataMatrix((i-1)*nt+1:(i-1)*nt, 1))
hold on
title('mrna')
subplot(5, 2, (i-1)*2+2)
plot(tspan, simulatedDataMatrix((i-1)*nt+1:(i-1)*nt, 2))
hold on
title('gfp')
end
nt = length(tspan);
for i = 1:5
subplot(5, 2, (i-1)*2+1)
plot(tspan, simulatedDataMatrix((i-1)*nt+1:(i)*nt, 1))
hold on
title('mrna')
subplot(5, 2, (i-1)*2+2)
plot(tspan, simulatedDataMatrix((i-1)*nt+1:(i)*nt, 2))
hold on
title('gfp')
end
estParameters
estSpecies
dosedNames
dosedSpecies
exportedMdlObj
[tt, cc] = simulate(exportedMdlObj);
size(tt)
size(cc)
[sdsd] = simulate(exportedMdlObj);
sdsd
get(sdsd)
get(sdsd, DataInfo)
get(sdsd, 'DataInfo')
get(sdsd, 'DataNames')
selectbyname(sdsd, 'protein deGFP*')
GFPdata = selectbyname(sdsd, 'protein deGFP*')
figure; plot(sdsd.time, GFPdata.Data)
doc selectbyname
sbioplot(sdsd)
test003_oct11_tightLikelihood
edit gwmcmc_vse.m
i
figure; plot(spSd.time, spSD.data)
spSD
get(spSD)
figure; plot(spSd.Time, spSD.Data)
figure; plot(spSD.Time, spSD.Data)
figure; plot(spSD.Time, spSD(2).Data)
figure; plot(spSD.Time, spSD.Data(:,2))
figure; plot(spSD.Time, spSD.DataNames(:,2))
figure; plot(spSD.Time, spSD.DataNames{2})
spSD.DataNames{2}
spSD.DataNames{1}
figure; plot(spSD.Time, spSD(2).Data)
figure; plot(spSD.Time, spSD.Data)
test003_oct11_tightLikelihood
logPfuns{fix}
minit(:,wix)
logPfuns{fix}(minit(:,wix))
size(CONC_temp,1)
exportedMdlObj
get(exportedMdlObj)
get(exportedMdlObj, 'ValueInfo')
vi = get(exportedMdlObj, 'ValueInfo')
vi.Name
vi.Name'
spSD.Data
clc
spSD
spSD.Names
spSD.Name
get(spSD)
get(sd)
get(sd, 'DataNames')
get(sd.Data )
figure; plot(timevec, selectbyname(sd, 'AGTP'))
agtp = selectbyname(sd, 'AGTP')
figure; plot(timevec, agtp.data)
logprior(logp)
logp
hist(randn(100,1))
close all
hist(randn(100,1))
hist(randn(1500,1))
hist(randn(15000,1))
hist(randn(150000,1))
hist(0.5randn(150000,1))
hist(0.5*randn(150000,1))
hist(2*randn(150000,1))
hist(1.5*randn(150000,1))
lb =logp-9;
ub =logp+9;
nW = 400; %number of walkers
sd = 1;
rnsamp = sd*randn(nparam,nW);
mdpts = (lb+ub)/2;
minit=bsxfun(@plus,mdpts,rnsamp);
logprior(minit(:,1))
for i = 1:400
lpr(i) = logprior(minit(:,i));
end
all(lpr)
minit=bsxfun(@plus,mdpts,rnsamp);
for i = 1:400
lpr(i) = logprior(minit(:,i));
end
all(lpr)
minit(:,1:10)
[minit(:,1:10), logp]
test003_oct11_tightLikelihood
help lhsample
help lhdesign
exp(-15)
exp(15)
exp(12)
exp(-12)
test003_oct20_LHS_truecentered
clear all
close all
clc
test003_oct20_LHS_truecentered
lhsamp(1:10, :)
figure; scatter(lhsamp(:, 1:2))
figure; scatter(lhsamp(:, 1),lhsamp(:, 1))
figure; scatter(lhsamp(:, 1),lhsamp(:, 2))
figure; scatter3(lhsamp(:, 1),lhsamp(:, 2), lhsamp(:, 3))
whos
size(nim)
numel(nim == 0)
numel(nim)
numel(m)
load test003_oct20_stp2p5_tght1_LHStruecenter_burnin
numel(m)
size(m)
whos
80*662
800*662
800*662/1.1
nim(1:10,1:10,1:10)
(nim == 0)
-Inf <-Inf
%-- 10/23/16, 6:20 AM --%
test003_oct11_tightLikelihood
clear all
close all
clc
test003_oct11_tightLikelihood
logP(:,:,1)
test003_oct11_tightLikelihood
logP(:,:,1)
test003_oct11_tightLikelihood
5e5/40/800
ceil(5e5/40/800)
15*40+1
15*40+1*1.1
15*40+1
(15*40+1)*1.1
16*40
ceil(3e5/40/800)
(3e5/40/800)
9*40+1
ans*1.1
test003_oct11_tightLikelihood
%-- 10/27/16, 6:46 PM --%
edit gwmcmc.m
test003_oct11_tightLikelihood
whos
exportedMdlObj
get(exportedMdlObj)
get(exportedMdlObj.SimulationOptions)
get(exportedMdlObj.SimulationOptions.AbsoluteTolerance)
get(exportedMdlObj.SimulationOptions)
get(exportedMdlObj.SimulationOptions, 'AbsoluteTolerance')
set(exportedMdlObj.SimulationOptions, 'AbsoluteTolerance')
set(exportedMdlObj.SimulationOptions, 'AbsoluteTolerance', 1e-8)
get(exportedMdlObj.SimulationOptions, 'AbsoluteTolerance')
IP = [1 0 1 1; 0 1 1 1; 1 1 1 1]
all(IP)
all(IP')
all(IP')'
find(all(IP')')
find(all(IP'==1)')
all(IP'==1)'
IP = [1 0 1 1; 1 1 1 2; 1 1 1 1]
all(IP'==1)'
all(IP')'
help surf
edit gwmcmc_vse
close all
logp = log([0.05, 0.003, 452, 12000,0.01, 120000, 120000, 36000, 200, 1.5, ...
4, 100, 35, 50 100]');
4, 100, 35, 50 100]')
logp = log([0.05, 0.003, 452, 12000,0.01, 120000, 120000, 36000, 200, 1.5, ...
4, 100, 35, 50 100]');
logp = log([0.05, 0.003, 452, 12000,0.01, 120000, 120000, 36000, 200, 1.5, ...
4, 100, 35, 50 100]');
logp = log([0.05, 0.003, 452, 12000,0.01, 120000, 120000, 36000, 200, 1.5, ...
4, 100, 35, 50 100]')
ls
help MPinterval
size(mcat)
[bds, mx, mp ] = MPinterval(mcat(:,:)');
size(mcat)
[bds, mx, mp ] = MPinterval(mcat(:,:)');
[F,XI,BW]=ksdensity(vec, 'npoints', p.npoints);
help catMC
edit catMC
MAPx
[MAPx' logp]
%-- 10/29/16, 4:56 AM --%
9000/3600
m1
set(m1.species
set(m1.species)
m1.species
sbioselect(m1, 'DNA p70--rbs--deGFP')
sbioselect(m1, 'Name', 'DNA p70--rbs--deGFP')
whos
MAPx'
m1.parametres
m1.Parameters
edit setparam
m1.parameters
MAPx
test010a_oct27
m1.species
test010a_oct27
exp(3.8)
exp(600)
log(600)
test010a_oct27
m1.species
m1.rules
clc
clear all
close all
test010a_oct27
%-- 10/31/16, 4:45 PM --%
exportedMdlObj
get(exportedMdlObj)
get(exportedMdlObj.ValueInfo)
(exportedMdlObj.ValueInfo)
(exportedMdlObj.ValueInfo(1))
(exportedMdlObj.ValueInfo(2))
(exportedMdlObj.ValueInfo(3))
(exportedMdlObj.ValueInfo(4))
100000/40/800
%-- 11/7/16, 1:46 PM --%
legends={'k_{term}','RNAd_{cat}','RBS_{Kd}','prom_{Kd}','s70_{Kd}',...
'NTP_{Kd1}','NTP_{Kd2}','AA_{Kd}','RNAd_{Kd}','k_{emrna}','k_{eprot}',...
'RNAP','s70','Ribo','RNase'}'
[legends MAPx' logp]
[legends {MAPx'} {logp}]
[legends {MAPx'(:)} {logp(:)}]
[legends {MAPxMAPx'(:)} {logp(:)}]
MAPx
logp'
legends'
3e5/8000
3e5/4000
3e5/8000
4e5/8000
measuredSpecies = struct('cols', {'RNA', 'GFP'}, ...
'objectName',{'TotalRNA', 'protein deGFP*'}, ...
'type', {'species', 'species'}) ;
mn = cell(2,1)
mn = cell(1, 2)
cat(1, measuredSpecies(:).objectName)
measuredSpecies(1).objectName)
measuredSpecies(1).objectName
deal(measuredSpecies(:).objectName)
deal(measuredSpecies.objectName)
mn{:} = deal(measuredSpecies.objectName)
mn = deal(measuredSpecies.objectName)
[a,b] = deal(measuredSpecies.objectName)
formatSpec = string('%s : %.3f');
A = {'RNA', 'DNA'};
B = [100 5];
str = compose(formatSpec,A, B)
formatSpec = string('%s : %.3f')
help string
openExample('matlab/FormatNumbersIntoStringsExample')
help compose
help savefig
help print
fig = figure
print(fig, 'abcd', '-djpeg')
help print
print( 'abcd', '-djpeg')
print(fig, 'abcd2', '-djpeg')
%-- 11/13/16, 1:22 PM --%
help assert
help isequal
help assert
help error
aa = [1:11];
estPS = [1 3 0 0; 1 3 5 7; 1 0 0 0];
aa(estPS(1,:))
estPS = [1 3 0 0; 1 3 5 7; 1 0 0 0];
find(estPS(1m:))
find(estPS(1:))
find(estPS(1,:))
[I, J] = find(estPS(1,:))
help find
[I, J, V] = find(estPS(1,:))
rr = [10 12 14 16 18 24 28]
dd = [10 12 14 16 18 24 28]
pp = [11 15 16 19 22 34 40]
pp./(pi*(dd/2).^2)
plot(0.1401    0.1326    0.1039    0.0945    0.0865    0.0752    0.0650)
plot([0.1401    0.1326    0.1039    0.0945    0.0865    0.0752    0.0650])
plot([1.091*(2.95+pp)./(pi*(dd/2).^2))
plot([1.091*(2.95+pp)./(pi*(dd/2).^2)])
figure; plot([1.091*(2.95+pp)./(pi*(dd/2).^2)])
[1.091*(2.95+pp)./(pi*(dd/2).^2)]
figure; subplot(2,1,1); plot((pi*(dd/2).^2), 1.091*(2.95+pp)]
figure; subplot(2,1,1); plot((pi*(dd/2).^2), 1.091*(2.95+pp))
figure; subplot(2,1,1); plot((pi*(dd/2).^2), 1.091*(2.95+pp), '*')
figure; subplot(2,1,1); plot((pi*(dd/2).^2), 1.091*(2.95+pp), '*-')
figure; subplot(2,1,1); plot((pi*(dd/2).^2), 1.091*(2.95+pp), '*-'); axes([0 700 0 60])
figure; subplot(2,1,1); plot((pi*(dd/2).^2), 1.091*(2.95+pp), '*-'); axis([0 700 0 60])
subplot(2,1,2); plot([1.091*(2.95+pp)./(pi*(dd/2).^2)])
nres = [122 345 800]
nres = [122 345 800 1345 1900 3000]
clc
sum(nres(1:(1-1))
sum(nres(1:(1-1)))
sum(nres(1:(2-1)))
sum(nres(1:(3-1)))
close all
m1
m1.parameters
0.65^3
0.65^2
800/0.4225
round(800/0.4225)
en
integrable
exportedMdlObj
test013_server
test012_server_test_onMBP
exportedMdlObj
sbioselect(exportedMdlObj, 'Type', 'Parameter', 'Name', estNames)
exportedMdlObj.ValueInfo
exportedMdlObj.ValueInfo(1).Name
C = {'efwef', 'fve', 'wefbeabla', 'dfblarergsx', 'bla'}
IndexC = strfind(C, 'bla');
Index = find(not(cellfun('isempty', IndexC)))
IndexC
IndexC = strcmp(C, 'bla');
IndexC = strcmp(C, 'bla')
Index = find(not(cellfun('isempty', IndexC)))
Index = find( IndexC)
%-- 11/15/16, 4:56 AM --%
dirToSaveIn
close all
10^5
180*60
%-- 12/8/16, 11:31 PM --%
help dataset
help subplot
dec6data
dec6data{2,1}
dec6data{2,1}{1}
12*60
help legend
dset
dset{2,1}
dset{2,1}{1}
dec6data
j = 1
dec6data{3, 2*(j-1)+1}
dec6data{2, 2*(j-1)+1}
dset
dset{2,1}
dset{2,1}{2}
dset{2,1}{3}
Ext
i
Ext{1}
clear all
close all
clc
ax
gca
h
close all
clear all
clc
colorschemes
edit colorschemes
colorschemes('plot')
help suplabel
colorschemes('plot')
test009s2
plot_dec6_2016
dec6data{2, 2*3+1}
dec6data
for i = [1 3 4]
i
end
dec6data
help suplabel
close all
[ymin, ymax]/1517
[ymin, ymax]
%-- 12/15/16, 5:34 AM --%
mainSSA
%-- 12/16/16, 12:04 PM --%
addpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB/mcmc_grinsted-gwmcmc-2c86b0e')
addpath(genpath(pwd))
%-- 1/14/17, 9:46 AM --%
load('020615_Data.mat', 'endMatrixGFP_TxBCD13_vitro')
addpath(genpath(pwd))
load('020615_Data.mat', 'endMatrixGFP_TxBCD13_vitro')
load('020615_Data.mat')
whos
peaks(squeeze(endMatrixGFP_404p_vitro(2,:,:,:)), false, 4)
warning('off','all')
whos
peaks(squeeze(endMatrixGFP_TxBCD13_vitro(2,:,:,:)), false, 4)
test010_fitwholeTLpanel
sgolayfit
help sgolayfilt
help sbiotrellis
trell = sbiotrellis(gd, 'ID', 't', 'GFP')
(0:6:720)'/60
test010_fitwholeTLpanel
edit smallplots
test010_fitwholeTLpanel
size(panel)
test010_fitwholeTLpanel
gLi
gLI
test010_fitwholeTLpanel
isempty(iLI)
iLI
whos
test010_fitwholeTLpanel
isempty(iLI)
exists(gLI.title)
exist(gLI.title)
help exist
isempty(gLI.title)
help isempty
what(iLI)
help what
test010_fitwholeTLpanel
close all
test010_fitwholeTLpanel
gca
help round
help ceil
order(16)
order(160)
13/(10^order(13))
ceil(13/(10^order(13)))
%-- 1/15/17, 9:46 PM --%
ceil(13/(10^order(13)))*(10^order(13))
test010_fitwholeTLpanel
%-- 1/15/17, 9:49 PM --%
addpath(genpath(pwd))
test010_fitwholeTLpanel
maxdata
test010_fitwholeTLpanel
close all
test010_fitwholeTLpanel
smallplots
test010_fitwholeTLpanel
gca
test010_fitwholeTLpanel
%-- 2/13/17, 4:58 PM --%
whos
dec6data
dec6data{2,1}
dec7data{2,1}
dset
dset{2,1}
dset{2,1}{1,1}
d7
d7{2,2}
d7{2,1}
d7{2,1}{1}
d7{2,2}{1}
d7{2,2}[dset, dec6data, dec7data] = Data_Dec6_7_2016_legendredefined
[dset, dec6data, dec7data] = Data_Dec6_7_2016_legendredefined
dec7data{3,1}
d7{2,1}{4}
d7{3,1}{4}
d7
ds
ds{2,1}
ds{2,1}{1,1}
ds{2,1}{1,2}
ds{2,1}{1,3}
help reshape
size(d7{2,1}{1,4})
test014_GFP_mga_full
whos
m1
m1.parameters
m1
m1.rules
edit txtl_translation
%-- 3/8/17, 7:27 AM --%
run('/Users/vipulsinghal/Dropbox/Documents/vipul_repo/MCMC/Code_MCMC/examples/test005_oct2_many_walkers.m')
txtl_init
edit geneexpr
geneexpr
%-- 3/9/17, 6:53 AM --%
txtl_init
geneexpr
Mobj.parameters
Mobj.reactions
Mobj.reactions(18)
get(Mobj.reactions(18))
set(Mobj.reactions(18))
KL_rnase = get(Mobj.reactions(18), 'KineticLaw')
get(KL_rnase)
get(KL_rnase, 'Parameters')
%-- 3/15/17, 7:04 AM --%
test012_AWS_030917
mcmc_init
test012_AWS_030917
slashes
mcmc_init
slashes
[tmg, ymg, metamg] = load_ACSDSG2014('MGapt'); % y is ntimepoints x ndoses
[tgfp, ygfp, metagfp] = load_ACSDSG2014('deGFP');
metamg
size(ymg
size(ymg)
size(ygfp)
metagfp
plot(tmg, ymg)
p = plot(tmg, ymg); legends('0.5','2', '5', '20')
p = plot(tmg, ymg); legend('0.5','2', '5', '20')
p = plot(tgfp, ygfp); legend('0.5','2', '5', '20')
p = plot(tgfp, ygfp(:,[2 4 5 6])); legend('0.5','2', '5', '20')
p = plot(tgfp, ygfp); legend('0.5','2', '5', '20')
size(ygfp)
length(tspan)
fig; plot(tspan, resahpe(dataspec(1:404), 101, 4))
figure; plot(tspan, resahpe(dataspec(1:404), 101, 4))
figure; plot(tspan, reshape(dataspec(1:404), 101, 4))
figure; plot(tspan, reshape(dataspec(404+ 1:808), 101, 4))
figure; p3 = plot(tspan, reshape(dataspec(404+ 1:808), 101, 4)); legend('0.5','2', '5', '20')
figure; p3 = plot(tspan, reshape(dataspec(1:404), 101, 4)); legend('0.5','2', '5', '20')
m1
m1.parameters
a + 1
close all
%-- 5/6/17, 6:50 AM --%
test014_GFP_mga_full
minit = integrableLHS(exportedMdlObj, nW, spread, logp,...
estNames_ordered, dosingStrat);
%-- 12/19/17, 6:44 AM --%
ver
help addpoints
help animatedline
%-- 12/20/17, 10:50 PM --%
x = 2
y = 4
x+y
%-- 12/20/17, 10:54 PM --%
ttl_init
txtl_init
geneexpr
mcmc_init
edit proj_acs_dsg2014
edit gwmcmc_vse.m
help textprogress
help noaction
log(rand(3, 10))
log(rand(3, 100))
((3-1)*rand(1, Nwalkers) + 1).^2/3
((3-1)*rand(1, 10) + 1).^2/3
hist(((3-1)*rand(1, 10) + 1).^2/3)
hist(((3-1)*rand(1, 10000) + 1).^2/3)
ss = 10
hist(((ss-1)*rand(1, 10000) + 1).^2/ss)
close all; figure; hist(((ss-1)*rand(1, 10000) + 1).^2/ss)
for ss = 1:15
subplot(15, 1, ss); hist(((ss-1)*rand(1, 10000) + 1).^2/ss);
end
close all
figure
for ss = 1:15
subplot(15, 1, ss); hist(((ss-1)*rand(1, 10000) + 1).^2/ss);
axis([0 10 0 15])
end
log(((ss-1)*rand(1, 10) + 1).^2/ss)
log(((ss-1)*rand(1, 100) + 1).^2/ss)
log(rand(1)) < 10*log(((ss-1)*rand(1, 100) + 1).^2/ss)
ss = 100
log(rand(1)) < 10*log(((ss-1)*rand(1, 100) + 1).^2/ss)
ss = 1
log(rand(1)) < 10*log(((ss-1)*rand(1, 100) + 1).^2/ss)
ss = 0.1
log(rand(1)) < 10*log(((ss-1)*rand(1, 100) + 1).^2/ss)
ss = 2
log(rand(1)) < 10*log(((ss-1)*rand(1, 100) + 1).^2/ss)
sbioselect(m1, 'P')
help sbioselect
sbioselect(m1, 'name', 'P')
clc
help sbiosimulate
help inputparser
help time
help struct
edit mcmc_runsim.m
help varargout
edit gen_residuals_3
load mcmc20171128_130412_ID10
addpath(genpath(pwd))
load mcmc20171128_130412_ID10
ls
who
da
whos
edit data_dsg2014
50/50000
50/50000*100
50/50000*50000
50000/(50/50000)
%-- 1/14/18, 7:54 AM --%
help randn
help chol
path
txtl_init
data_init
path
mcmc_init
proj_enzymatic_model
help addparameter
proj_enzymatic_model
p
p.Results
proj_enzymatic_model
cloe all
close all
clear all
proj_enzymatic_model
p
proj_enzymatic_model
emo
get(emo)
get(emo, 'ValueInfo')
vii = get(emo, 'ValueInfo')
vii(:)
vii(1)
vii(2)
vii(3)
vii(4)
edit model_dsg2014
edit mcmc_info_dsg2014
proj_enzymatic_model
emo
emo.ValueInfo
i = 1:5 emo.ValueInfo(i).Name end
for i = 1:5 ; emo.ValueInfo(i).Name end
for i = 1:5 ; emo.ValueInfo(i).Name; end
for i = 1:5 ; emo.ValueInfo(i).Name end
for i = 1:5 ; emo.ValueInfo(i).Name
end
help simulate
em.SimulationOptions
em.SimulationOptions.StopTime
proj_enzymatic_model
size(da)
proj_enzymatic_model
size(da)
proj_enzymatic_model
size(da)
proj_enzymatic_model
p.replicates
help inputParser
proj_enzymatic_model
help isinteger
proj_enzymatic_model
isinteger(3)
help isinteger
int8(3)
proj_enzymatic_model
size(da)
close all
help repmat
edit catMC
help std
cc = colorschemes
cc{1}
cc{2,1}
proj_enzymatic_model
help max
proj_enzymatic_model
squeeze(mxtemp)
squeeze(max(max(datmat, [], 1), [], 3))
squeeze(max(max(max(datmat, [], 1), [], 3),[],4))
proj_enzymatic_model
beep
gong
ring
rng
help beep
help sound
figure; plot(tv, da(:,1,1,1))
size(da)
geomean([0.005 50
0.005 50
0.05 50
5 500], 2)
close all
edit integrable LHS
geomean([[0.0005 .05
0.005 .5
.4 40
1 100])
geomean([0.0005 .05
0.005 .5
.4 40
1 100])
geomean([0.0005 .05
0.005 .5
.4 40
1 100], 2)
proj_enzymatic_model
loglike(minit)
logP(:,:,1)
logPfuns{2}
logPfuns{2}(minit(:, 1)
logPfuns{2}(minit(:, 1))
proj_enzymatic_model
loglike(minit(:,1))
proj_enzymatic_model
logP(:,:,1)
proj_enzymatic_model
logP(:,:,1)
logPfuns{1}
get(logPfuns{1})
set(logPfuns{1})
logprior = @(logp) all(mi.paramranges(:, 1) < logp) &&...
all(logp < mi.paramranges(:,2));
logprior(minit(:,1))
proj_enzymatic_model
logprior(minit(:,1))
mi.paramranges(:, 1)
minit(:,1)
help randn
minit
exp(minit)
exp(mi.paramranges)
geomean(mi.paramranges, 2)
geomean(exp(mi.paramranges), 2)
geomean(exp(mi.paramranges), 2).^2
proj_enzymatic_model
nOpt
proj_enzymatic_model
model_enzymatic
proj_enzymatic_model
((2 - 1)*rand(1,10) + 1).^2/2
((ssz - 1)*rand(40,1) + 1).^2/ssz
ssz = 3; ((ssz - 1)*rand(40,1) + 1).^2/ssz
ssz = 3; hist(((ssz - 1)*rand(40,1) + 1).^2/ssz)
close all; ssz = 3; hist(((ssz - 1)*rand(40,1) + 1).^2/ssz)
close all; ssz = 3; hist(((ssz - 1)*rand(4000,1) + 1).^2/ssz)
close all; ssz = 3; hist(((ssz - 1)*rand(400000,1) + 1).^2/ssz)
help hist
close all; ssz = 3; hist(((ssz - 1)*rand(400000,1) + 1).^2/ssz); set(gca,'xscale','log')
close all; ssz = 3; hist(((ssz - 1)*rand(4000000,1) + 1).^2/ssz);
close all; ssz = 2; hist(((ssz - 1)*rand(4000000,1) + 1).^2/ssz);
proj_enzymatic_model
close all; ssz = 1.5; hist(((ssz - 1)*rand(4000000,1) + 1).^2/ssz);
proj_enzymatic_model
help scatter3
figure; scatter3(mstacked(:,1), mstacked(:,3), mstacked(:,4))
figure; scatter3(mstacked(:,1), mstacked(:,2), mstacked(:,3))
path
whos
clear all
proj_enzymatic_model
tstamp
[mcmc' prevtstamp '_ID' finalsimID]
['mcmc' prevtstamp '_ID' finalsimID]
['mcmc' prevtstamp '_ID' finalsimID '.mat']
help exist
exist(['mcmc' prevtstamp '_ID' finalsimID '.mat'])
exist([pwd 'mcmc_simbio/projects/proj_enzymatic_model/simdata_' prevtstamp '/mcmc' prevtstamp '_ID' finalsimID '.mat'])
exist([pwd '/mcmc_simbio/projects/proj_enzymatic_model/simdata_' prevtstamp '/mcmc' prevtstamp '_ID' finalsimID '.mat'])
proj_enzymatic_model
loglike = @(logp) gen_residuals_4(logp, em, da, tv, ...
mi.dosedvals, mi.measuredspecies, lognormvec, sigg);
loglike(minit(:,1)
loglike(minit(:,1))
proj_enzymatic_model
close all
help cat
proj_enzymatic_model
figure; scatter3(mstacked(:,1), mstacked(:,3), mstacked(:,4))
figure; scatter3(mstacked(1:10:end,1), mstacked(1:10:end,3), mstacked(1:10:end,4))
close all
edit rawdata_ACSDSG2014
edit plotcustomspecies
edit plotcustomspecies2
help legends
dv
m.species
help setparam
edit setparam
m.Parameters
m.Parameters.name
m.Parameters.Name
m.Parameters(1).Name
for i = 1:33 names{i} = m.Parameters(1).Name; end
names
for i = 1:33 names{i} = m.Parameters(i).Name; end
names'
names = cell(33, 1)
for i = 1:33 names{i} = m.Parameters(i).Name; end
names
names{1}
vals = zeros(33, 1)
for i = 1:33 vals(i) = m.Parameters(i).Value; end
vals
format short g
vals
repmat('global', 19, 1)
help repmat
repmat({'global'}, 19, 1)
clc
close all
gcf
ff = gcf
class(ff)
help figure
gcf
m
m.Parameters
[pstrs pvals]
{pstrs pvals}
struct('names', pstrs, 'vals', pvals)
pstruct = struct('names', pstrs, 'vals', pvals)
pstruct
pstruct(1)
getparam(m)
close all
m.species
close
close all
m.rules
for i = 1:33 names{i} = m.Parameters(i).Name; end
names
m.Parameters
close all
pcells(:,1)
help cell2mat
cell2mat(pcells(:,2))
close all
proj_acs_dsg2014
loglike(minit(:, 1))
for i = 1:100 loglike(minit(:, i)) end
for i = 1:100 loglike(minit(:, i))
end
for i = 1:100 logprior(minit(:, i))
end
minit
m.Events
mcmc_info_dsg2014_version2
edit mcmc_info_dsg2014_version2.m
proj_acs_dsg2014
for i = 1:100 loglike(minit(:, i))
end
minit
for i = 1:100 logprior(minit(:, i))
end
measuredspecies
measuredspecies'
size(data_array)
proj_acs_dsg2014
path
mi.nIter
mi.niter
mi.names_ord
proj_acs_dsg2014
close all
pcells = [{'TX_elong_glob',             1              }
{'TL_elong_glob'                    40}
{'AGTPdeg_time'                     7200      }
{'AGTPdeg_rate'                     0.0002     }
{'TXTL_PROT_deGFP_MATURATION'       0.0023105   }
{'TXTL_UTR_UTR1_Kd'                 40    }
{'TXTL_UTR_UTR1_F'                  0.62    }
{'TXTL_P70_RNAPbound_Kd'            20    }
{'TXTL_P70_RNAPbound_F'             20      }
{'TXTL_RNAPBOUND_TERMINATION_RATE'  0.05}
{'TXTL_NTP_RNAP_1_Kd'               2   }
{'TXTL_NTP_RNAP_1_F'                10      }
{'TXTL_NTP_RNAP_2_Kd'               10       }
{'TXTL_NTP_RNAP_2_F'                1      }
{'TL_AA_Kd'                         0.1       }
{'TL_AA_F'                          10        }
{'TL_AGTP_Kd'                       1       }
{'TL_AGTP_F'                        10     }
{'TXTL_RIBOBOUND_TERMINATION_RATE'  10}
{'TXTL_RNAdeg_Kd'                   1000/.52      }
{'TXTL_RNAdeg_F'                    0.001/.4      }];
estNames_ver2 = [pcells(:,1)
{'RNAP'
'Ribo'
'RNase'}];
estVals_ver2 = [cell2mat(pcells(:,2))
50
50
50];
estVals_ver2
size([1/2 200
40/5 4000
7200/4 7200*3
0.0002/10 0.0002*10
0.0023105/2 0.0023105*2
40/500 40*500
0.62/50 0.62*5
20/1000 20*1000
0.01 10
0.05/10 5
2/100 2*100
10/1000 10
2/100 2*100
10/1000 10
0.01/10 1000
10/100 10
1/1000 1000
0.01 10
0.01 10
0.001 1000
0.0025/50 0.0025*50
5 5000
5 5000
5 5000])
{'TX_elong_glob',             1              }
{'TL_elong_glob'                    40}
{'AGTPdeg_time'                     7200      }
{'AGTPdeg_rate'                     0.0002     }
{'TXTL_PROT_deGFP_MATURATION'       0.0023105   }
{'TXTL_UTR_UTR1_Kd'                 40    }
{'TXTL_UTR_UTR1_F'                  0.62    }
{'TXTL_P70_RNAPbound_Kd'            20    }
{'TXTL_P70_RNAPbound_F'             20      }
{'TXTL_RNAPBOUND_TERMINATION_RATE'  0.05}
{'TXTL_NTP_RNAP_1_Kd'               2   }
{'TXTL_NTP_RNAP_1_F'                10      }
{'TXTL_NTP_RNAP_2_Kd'               10       }
{'TXTL_NTP_RNAP_2_F'                1      }
{'TL_AA_Kd'                         0.1       }
{'TL_AA_F'                          10        }
{'TL_AGTP_Kd'                       1       }
{'TL_AGTP_F'                        10     }
{'TXTL_RIBOBOUND_TERMINATION_RATE'  10}
{'TXTL_RNAdeg_Kd'                   1000/.52      }
{'TXTL_RNAdeg_F'                    0.001/.4      }
size([{'TX_elong_glob',             1              }
{'TL_elong_glob'                    40}
{'AGTPdeg_time'                     7200      }
{'AGTPdeg_rate'                     0.0002     }
{'TXTL_PROT_deGFP_MATURATION'       0.0023105   }
{'TXTL_UTR_UTR1_Kd'                 40    }
{'TXTL_UTR_UTR1_F'                  0.62    }
{'TXTL_P70_RNAPbound_Kd'            20    }
{'TXTL_P70_RNAPbound_F'             20      }
{'TXTL_RNAPBOUND_TERMINATION_RATE'  0.05}
{'TXTL_NTP_RNAP_1_Kd'               2   }
{'TXTL_NTP_RNAP_1_F'                10      }
{'TXTL_NTP_RNAP_2_Kd'               10       }
{'TXTL_NTP_RNAP_2_F'                1      }
{'TL_AA_Kd'                         0.1       }
{'TL_AA_F'                          10        }
{'TL_AGTP_Kd'                       1       }
{'TL_AGTP_F'                        10     }
{'TXTL_RIBOBOUND_TERMINATION_RATE'  10}
{'TXTL_RNAdeg_Kd'                   1000/.52      }
{'TXTL_RNAdeg_F'                    0.001/.4      }])
proj_acs_dsg2014
estVals_ver2/10 estVals_ver2*10]
[estVals_ver2/10 estVals_ver2*10]
a=[1/2 200
40/5 4000
7200/4 7200*3
0.0002/10 0.0002*10
0.0023105/2 0.0023105*2
40/500 40*500
0.62/50 0.62*5
20/1000 20*1000
0.01 10
0.05/10 5
2/100 2*100
10/1000 10
2/100 2*100
10/1000 10
0.01/10 1000
10/100 10
1/1000 1000
0.01 10
0.01 10
0.001 1000
0.0025/50 0.0025*50
5 5000
5 5000
5 5000]
b = [estVals_ver2/10 estVals_ver2*10]
a(:,1)<b(:,1)
help min
help max
customvals = [1/2 200
40/5 4000
7200/4 7200*3
0.0002/10 0.0002*10
0.0023105/2 0.0023105*2
40/500 40*500
0.62/50 0.62*5
20/1000 20*1000
0.01 10
0.05/10 5
2/100 2*100
10/1000 10
2/100 2*100
10/1000 10
0.01/10 1000
10/100 10
1/1000 1000
0.01 10
0.01 10
0.001 1000
0.0025/50 0.0025*50
5 5000
5 5000
5 5000];
paramranges_ver2 = log([min([estVals_ver2(:,1) customvals(:,1)],[],2) max([estVals_ver2(:,2) customvals(:,2)],[],2)]);
max([estVals_ver2(:,2) customvals(:,2)],[],2)
max([estVals_ver2(:,2) customvals(:,2)])
customvals = [1/2 200
40/5 4000
7200/4 7200*3
0.0002/10 0.0002*10
0.0023105/2 0.0023105*2
40/500 40*500
0.62/50 0.62*5
20/1000 20*1000
0.01 10
0.05/10 5
2/100 2*100
10/1000 10
2/100 2*100
10/1000 10
0.01/10 1000
10/100 10
1/1000 1000
0.01 10
0.01 10
0.001 1000
0.0025/50 0.0025*50
5 5000
5 5000
5 5000];
customvals
max([estVals_ver2(:,2) customvals(:,2)])
customvals(:,2)
[estVals_ver2(:,2) customvals(:,2)]
estVals_ver2(:,2)
estVals_ver2
customvals = [1/2 200
40/5 4000
7200/4 7200*3
0.0002/10 0.0002*10
0.0023105/2 0.0023105*2
40/500 40*500
0.62/50 0.62*5
20/1000 20*1000
0.01 10
0.05/10 5
2/100 2*100
10/1000 10
2/100 2*100
10/1000 10
0.01/10 1000
10/100 10
1/1000 1000
0.01 10
0.01 10
0.001 1000
0.0025/50 0.0025*50
5 5000
5 5000
5 5000];
b = [estVals_ver2/10 estVals_ver2*10]
paramranges_ver2 = log([min([b(:,1) customvals(:,1)],[],2) max([b(:,2) customvals(:,2)],[],2)]);
paramranges_ver2
proj_acs_dsg2014
close all
whos
tstamp
save([pwd '/mcmc_simbio/projects/proj_acs_dsg2014/simdata_20180117_104338/full_variable_set_20180117_104338'])
close all
%-- 1/18/18, 7:00 AM --%
txtl_init
mcmc_init
size(mcat)
mstacked = mcat(:,:)';
size(mstacked)
median(mstacked)
exp(median(mstacked))
format short g
exp(median(mstacked))
exp(median(mstacked))'
em
em.isAccelerated
get(em)
get(em, 'ValueInfo')
vi = get(em, 'ValueInfo')
vi(:)
vi(1)
vi.Name
cat(vi.Name)
mi.names_unord
mi.names_ord
m.eventa
m.Events
m.rules
m.reactions
getparam(m)
gp = getparam(m)
gp(:,3)
close all
log(10000)
*0.5*randn(20)
0.5*randn(20)
abs(0.5*randn(20)))
abs(0.5*randn(20))
abs(0.5*randn(20))>log(100)
all(all(abs(0.5*randn(20))>log(100)))
all(all(abs(0.5*randn(2000))>log(100)))
mi
proj_acs_dsg2014_mrna
m.reactions
m.rules
proj_acs_dsg2014_mrna
cc = colorschemes
hex2rgb(hexColorCell{i})
help hex2rgb
cc = colorschemes
hex2rgb(hexColorCell{i})
path
edit data_init
data_init
proj_acs_dsg2014_mrna
pwd
cd ..
cd
pwd
proj_acs_dsg2014_mrna
size(mcat)
close all
clear all
%-- 1/18/18, 4:28 PM --%
txtl_init
mcmc_init
data_init
proj_acs_dsg2014_mrna
logPfuns{fix}(minit(:,wix))
logP(:,:,1)
proj_acs_dsg2014_mrna
load([pwd '/mcmc_simbio/projects/proj_acs_dsg2014_mrna/simdata_' prevtstamp '/mcmc' prevtstamp '_ID' finalsimID '.mat'], 'm');
minit = m(:,:,end);
minit = 0.9*minit+0.0001*rand(size(minit));
for i = 1:size(minit, 2)
lprior(i) = logprior(minit(:,i));
end
~all(isfinite(lprior))
prevtstamp = '20180117_193328';
finalsimID = '3';
load([pwd '/mcmc_simbio/projects/proj_acs_dsg2014_mrna/simdata_' prevtstamp '/mcmc' prevtstamp '_ID' finalsimID '.mat'], 'm');
minit = m(:,:,end);
minit = 0.95*minit+0.0001*rand(size(minit));
logprior = @(logp) all(mi.paramranges(:, 1) < logp) &&...
all(logp < mi.paramranges(:,2));
lprior = zeros(1, size(minit, 2));
for i = 1:size(minit, 2)
lprior(i) = logprior(minit(:,i));
end
if ~all(isfinite(lprior))
error('Starting points for all walkers must have finite logP')
end
prevtstamp = '20180117_193328';
finalsimID = '3';
load([pwd '/mcmc_simbio/projects/proj_acs_dsg2014_mrna/simdata_' prevtstamp '/mcmc' prevtstamp '_ID' finalsimID '.mat'], 'm');
minit = m(:,:,end);
minit = 0.97*minit+0.0001*rand(size(minit));
logprior = @(logp) all(mi.paramranges(:, 1) < logp) &&...
all(logp < mi.paramranges(:,2));
lprior = zeros(1, size(minit, 2));
for i = 1:size(minit, 2)
lprior(i) = logprior(minit(:,i));
end
if ~all(isfinite(lprior))
error('Starting points for all walkers must have finite logP')
end
prevtstamp = '20180117_193328';
finalsimID = '3';
load([pwd '/mcmc_simbio/projects/proj_acs_dsg2014_mrna/simdata_' prevtstamp '/mcmc' prevtstamp '_ID' finalsimID '.mat'], 'm');
minit = m(:,:,end);
minit = 0.98*minit+0.0001*rand(size(minit));
logprior = @(logp) all(mi.paramranges(:, 1) < logp) &&...
all(logp < mi.paramranges(:,2));
lprior = zeros(1, size(minit, 2));
for i = 1:size(minit, 2)
lprior(i) = logprior(minit(:,i));
end
if ~all(isfinite(lprior))
error('Starting points for all walkers must have finite logP')
end
~all(isfinite(lprior))
prevtstamp = '20180117_193328';
finalsimID = '3';
load([pwd '/mcmc_simbio/projects/proj_acs_dsg2014_mrna/simdata_' prevtstamp '/mcmc' prevtstamp '_ID' finalsimID '.mat'], 'm');
minit = m(:,:,end);
minit = 0.98*minit+0.0001*rand(size(minit));
logprior = @(logp) all(mi.paramranges(:, 1) < logp) &&...
all(logp < mi.paramranges(:,2));
lprior = zeros(1, size(minit, 2));
for i = 1:size(minit, 2)
lprior(i) = logprior(minit(:,i));
end
if ~all(isfinite(lprior))
error('Starting points for all walkers must have finite logP')
end
prevtstamp = '20180117_193328';
finalsimID = '3';
load([pwd '/mcmc_simbio/projects/proj_acs_dsg2014_mrna/simdata_' prevtstamp '/mcmc' prevtstamp '_ID' finalsimID '.mat'], 'm');
minit = m(:,:,end);
minit = 0.99*minit+0.0001*rand(size(minit));
logprior = @(logp) all(mi.paramranges(:, 1) < logp) &&...
all(logp < mi.paramranges(:,2));
lprior = zeros(1, size(minit, 2));
for i = 1:size(minit, 2)
lprior(i) = logprior(minit(:,i));
end
if ~all(isfinite(lprior))
error('Starting points for all walkers must have finite logP')
end
proj_acs_dsg2014_mrna
help all
proj_acs_dsg2014_mrna
%-- 1/18/18, 5:22 PM --%
txtl_init
mcmc_init
edit gwmcmc_vse.m
proj_acs_dsg2014_mrna
save('mcmc20180118_012422_final')
%-- 1/19/18, 4:30 AM --%
whos
txtl_init
mcmc_init
whos
data_init
edit data_init
mi.names_ord
m
whos
mobj.parameters
getparam(mobj)
edit txtl_mrna_degradation.m
getparam(mobj)
mobj.rules
mobj.Parameters
mi.names_ord
close all
proj_protein_model
emo
get(emo)
get(emo, 'ValueInfo')
vi = get(emo, 'ValueInfo')
vi(:).Name
sd
get(sd)
get(sd, 'DataNames')
proj_protein_model
logP(:,:,1)
logPfuns{fix}
logPfuns{fix}(minit(:,1))
proj_protein_model
logP(:,:,1)
logPfuns{fix}(minit(:,1))
paramvec(espIX) = logpesp
proj_protein_model
logP(:,:,1)
logPfuns{fix}(minit(:,1))
proj_protein_model
logPfuns{fix}(minit(:,1))
logP(:,:,1)
logPfuns{fix}(minit(:,1))
proj_protein_model
boundz
proj_protein_model
tstamp
proj_protein_model
rand(3)
rand(3)-0.5
proj_protein_model
boundz
log([20 10 40 20 100])
help scatter3
data_init
dosingStrat
proj_acs_dsg2014_mrna
%-- 1/19/18, 6:30 PM --%
txlt_init
txtl_init
mcmc_init
proj_protein_model
close all
clc
clear all
proj_acs_dsg2014_mrna
m
mobj
mobj.Parameters
exp([0,4])
exp(6.6)
exp(9.6)
format short g
exp(9.6)
proj_acs_dsg2014_mrna
path
islogical(v)
v=logPfuns{fix}(minit(:,wix))
edit mcmc_runsim_4.m
mi
size(minit)
mi.names_ord
proj_acs_dsg2014_mrna
whos
close all
tstamp
mod(4,3)
mod(6,3)
mod(i, 3) == 0
if ~mod(4,3)
'hello'
end
if ~mod(6,3)
'hello'
end
~mod(6,3)
i = 4
if ~mod(i, 3)
pause(600)
disp('Pausing for 10 minutes before starting run number %d. \n', i)
end
i = 9
if ~mod(i, 3)
pause(1)
disp('Pausing for 10 minutes before starting run number %d. \n', i)
end
if ~mod(i, 3)
pause(1)
disp(sprintf('Pausing for 10 minutes before starting run number %d. \n', i))
end
mi.nW
proj_acs_dsg2014_mrna
clear all
close all
clc
help fprintf
if ~mod(i, 3)
pause(600)
fprintf('Pausing for 10 minutes before starting run number %d. \n', i);
end
i = 3
if ~mod(i, 3)
pause(6)
fprintf('Pausing for 10 minutes before starting run number %d. \n', i);
end
mcmc_runsim_4
proj_acs_dsg2014_mrna
data_init
%-- 1/22/18, 11:13 AM --%
txtl_init
mcmc_init
data_init
proj_acs_dsg2014_protein
mi.names_ord
proj_acs_dsg2014_protein
mi
edit setparam
isempty({})
close all
extractCrashLogs
help extractCrashLogs
extractCrashLogs(100, '/Users/vipulsinghal')
clc
dir components
edit txtl_protein_sigma28.m
edit txtl_tutorial
%-- 1/23/18, 8:15 AM --%
m1 = sbiomodel('simpleModel');
m1
r1 = addreaction(m1,'A -> B');
m1
m1.Species
r1 = addreaction(m1,'A + B <-> C');
r1
m1.Species
m1
m1.Reactions
m1.reactions(1)
m1.reactions(2)
get(m1.reactions(2))
m1.reactions(2).reaction
m1.reactions(2).reversible
get(m1.species(1))
m1.species(1).InitialAmount
m1.species(1).InitialAmount = 10
get(m1.species(1))
set(m1.species(1), 'InitialAmount', 20)
get(m1)
kineticLaw = addkineticlaw(r1,'MassAction');
get(m1.reactions(2))
kineticLaw = addkineticlaw(m1.reactions(2),'MassAction');
kineticLaw = addkineticlaw(m1.reactions(1),'MassAction');
addkineticlaw(m1.reactions(1),'MassAction');
get(m1.reactions(1))
myKLobj = get(m1.reactions(1), 'KineticLaw')
get(myKLobj)
get(m1.reactions(1).KineticLaw)
p1 = addparameter(myKLobj,'k',0.5);
myKLobj.ParameterVariableNames = 'k';
get(m1.reactions(1).KineticLaw)
m1.reactions(1).KineticLaw.Parameters
get(m1.reactions(1).KineticLaw.Parameters)
set(m1.reactions(1).KineticLaw.Parameters)
set(m1.reactions(1).KineticLaw.Parameters, 'Notes', 'Just trying to explain stuff to Gloria')
get(m1.reactions(1).KineticLaw.Parameters)
get(m1.reactions(2).KineticLaw.Parameters)
get(m1.reactions(2).KineticLaw(1).Parameters)
get(m1.reactions(2).KineticLaw)
help addparameter
edit txtl_reaction
edit txtl_addreaction
txtl_init
edit txtl_addreaction
p1 = addparameter(m1.reactions(2).KineticLaw.Parameters,'kf',10);
p1 = addparameter(m1.reactions(2).KineticLaw,'kf',10);
get(m1.reactions(2).KineticLaw)
p1 = addparameter(m1.reactions(2).KineticLaw,'kr',2);
get(m1.reactions(2).KineticLaw)
clc
clear all
close all
%-- 1/24/18, 6:38 AM --%
fprintf(['This is a simple constitutive gene expression model \n'...
'built using the TXTL modeling toolbox. It models DNA binding \n'...
'to RNAP and nucleotides, followed by transcription. The resulting\n'...
'mRNA can degrade and participate in translation. The former is \n'...
'modeled as a enzymatic reaction involving every complex containing \n'...
'mRNA. The latter involves binging to Ribosomes, followed by amino acids \n'...
'and ATP, and finally elongation and termination resulting in protein.'])
%-- 1/25/18, 5:12 AM --%
mm = sbiomodel
help sbiomodel
mm = sbiomodel('test')
set(mm)
getconfigset(mm)
%-- 1/27/18, 9:38 AM --%
mm = cat(3, magic(3), 2*magic(3), 3*magic(3))
mm(:,:)
mm(:,1:5)
mm(:,1:5)'
help isnumeric
single(2)
single(2^31
single(2^31)
single(2^32)
single(2^33)
single(2^64)
single(2^126)
single(2^127)
single(2^128)
double(2^128)
double(2^255)
double(2^256)
double(2^257)
double(2^258)
double(2^30000)
double(2^3000)
double(2^1000)
double(2^1500)
double(2^1024)
double(2^1023)
double(log(2^1023))
double(log(2^4000))
log(2^4000)
(2^4000)
(2^1100
(2^1100)
10^300
10^305
10^3010
10^1010
10^310
help isequal
help cat
m = cat(3, [magic(4), magic(4)], 2*[magic(4), magic(4)], 3*[magic(4), magic(4)])
m2 = cat(3, [5*magic(4)], 5*2*[magic(4)], 5*3*[magic(4)])
cat(2, m(:,:)', m2(:,:)')
cat(1, m(:,:)', m2(:,:)')
help reshape
cat(2, m(:,:), m2(:,:))
floor(36/8)
m3 = cat(2, m(:,:), m2(:,:))
reshape(m3(:, 1:(floor(size(m3, 3)/size(m, 2)))), size(m, 1), size(m, 2), floor(size(m3, 3)/size(m, 2)))
reshape(m3(:, 1:(floor(size(m3, 2)/size(m, 2)))), size(m, 1), size(m, 2), floor(size(m3, 2)/size(m, 2)))
reshape(m3(:, 1:(size(m, 2)*floor(size(m3, 2)/size(m, 2)))), size(m, 1), size(m, 2), floor(size(m3, 2)/size(m, 2)))
m
m2
m2(:,:)
nw = size(m, 2)
np = size(m, 1)
ntemp = size(m2(:,:), 2)
nplanes = floor(ntemp/nw)
m2t = m2(:,:)
m2t = m2(:,1:nplanes*nw); reshape(m2t, nparam, nw, nplanes)
m2t = m2(:,1:nplanes*nw); reshape(m2t, n, nw, nplanes)
m2t = m2(:,1:nplanes*nw); reshape(m2t, np, nw, nplanes)
m2t
num2str
help num2str
num2str(1:10)
size(num2str(1:10))
size(num2str(1:2))
size(num2str(1:3))
150000000
150000000/12000
32/12500
30.48*0.0026
a = {{'1'}}
b = {'2'}
{c} = b
c = {b}
1:10
cellstr( num2str(1:10))
a = {{'1', '2', '3'}, {'1', '2', '3'}}
a{:}
iscell(a)
iscell(a{1})
iscell(a{2})
iscell(a{:})
help cellfun
cellfun(@iscell, a)
a
b = {1:3 1:3}
cellfun(@iscell, b)
all(cellfun(@iscell, a))
help arrayfun
arrayfun(@num2str, 1:10)
b = arrayfun(@num2str, 1:10)
b = arrayfun(@num2str, 1:9)
b = arrayfun(@num2str, 1:9, 'UniformOutput', false)
b = arrayfun(@num2str, 1:15, 'UniformOutput', false)
anonf = @(numarray) arrayfun(@num2str,numarray, 'UniformOutput', false)
anonf(1:8)
anonf(1:10)
simID = {{1:10}, {2:20}}
convertedsID = cellfun(anonf, simID)
simID = {1:10, 2:20}
convertedsID = cellfun(anonf, simID)
anonf = @(numarray) arrayfun(@num2str,numarray, 'UniformOutput', false)
help cellfun
convertedsID = cellfun(anonf, simID, 'UniformOutput', false)
convertedsID{1}
convertedsID{1}{1}
class(convertedsID{1}{1})
simID = {1:10, 2:11}
convertedsID = cellfun(anonf, simID, 'UniformOutput', false)
convertedsID = cellfun(anonf, simID, 'UniformOutput', true)
convertedsID = cellfun(anonf, simID, 'UniformOutput', false)
convertedsID = cellfun(@(numarray) arrayfun(@num2str,numarray, 'UniformOutput', false), simID, 'UniformOutput', false)
all
help all
help find
help arrayfun
setdiff([1 2 4 5 6], [1 5 6])
help islogical
mcmc_init
txtl_init
mcmc_init
help ecornerplot_vse
help ndims
edit ndims
help eacorr
help plotChains
edit plotChains.m
twofactors(7)
twofactors(34)
[a b] = twofactors(34)
[a b] = twofactors(36)
[a b] = twofactors(64)
[a b] = twofactors(99)
[a b] = twofactors(4523)
[a b] = twofactors(4524)
[a b] = twofactors(4525)
[a b] = twofactors(4526)
[a b] = twofactors(4527)
[a b] = twofactors(4528)
[a b] = twofactors(4529)
[a b] = twofactors(4530)
for i = 1:100; [a b] = twofactors(4530); a
end
for i = 1:100; [a b] = twofactors(i); a
end
for i = 1:100; [a b] = twofactors(i); c(i) = a; end
clear c
for i = 1:100; [a b] = twofactors(i); c(i) = a; end
end
c
hel stem
help stem
stem(1:100, c)
for i = 1:10000; [a b] = twofactors(i); c(i) = a; end
stem(1:10000, c)
for i = 1:1000; [a b] = twofactors(i); c(i) = a; end stem(1:1000, c)
for i = 1:1000; [a b] = twofactors(i); c(i) = a; end; stem(1:1000, c)
clear c
for i = 1:1000; [a b] = twofactors(i); c(i) = a; end; stem(1:1000, c)
help ecornerplot_vse
ecornerplot_vse
edit ecornerplot_vse
help legend
help legends
help median
help sort
help iseven
help isodd
help odd
curvewiseMedian([sin((1:20)'), 2*sin((1:20)') 3*sin((1:20)') 4*sin((1:20)')])
3*sin((1:20)')
curvewiseMedian([sin((1:20)'), 2*sin((1:20)') 3*sin((1:20)') 4*sin((1:20)')]) - 3*sin((1:20)')
curvewiseMedian([sin((1:20)'),1.5*sin((1:20)') 2*sin((1:20)') 3*sin((1:20)') 4*sin((1:20)')]) - 3*sin((1:20)')
curvewiseMedian([sin((1:20)'),1.5*sin((1:20)') 2*sin((1:20)') 3*sin((1:20)') 4*sin((1:20)')]) - 2*sin((1:20)')
find({'a', 'b', 'c'}, 'b')
strfind({'a', 'b', 'c'}, 'b')
strcmp({'a', 'b', 'c'}, 'b')
help strcmp
strcmp({'a', 'b', 'c'}, 'b')
find(strcmp({'a', 'b', 'c'}, 'b'))
help std
strcmp({'a', 'b', 'c'}, 'b')
help max
%-- 2/7/18, 7:50 AM --%
help displaymode
help median
help sort
txtl_init
mcmc_init
curvewiseMedian([sin((1:20)'),1.5*sin((1:20)') 2*sin((1:20)') 3*sin((1:20)') 4*sin((1:20)')]) - 2*sin((1:20)')
curvewiseMedian([1.5*sin((1:20)') 2*sin((1:20)') 3*sin((1:20)')]) - 2*sin((1:20)')
curvewiseMedian([1.5*sin((1:20)') 2*sin((1:20)') 3*sin((1:20)')])
mm = [magic(4); 2*magic(4)]
max(mm)
mm = [[magic(4) ones(4)]; [2*magic(4) 2*ones(4)]]
max(mm)
median(max(mm))
curvewiseMedian(mm)
help reshape
help permute
rand([2 1 3 5 2]
rand([2 1 3 5 2])
rand([2 1 3 5])
rand([2 3 5])
clc
rand([2 3 5])
aa = rand([2 3 5])
aa(:,2,:)
bb= shiftdim(aa, 1)
aa
bb(:,:)
bb
cc = bb(:,:)
cc(2,:)
sort(cc)
aa
cat(4, aa, 2*aa)
dd = cat(4, aa, 2*aa);
size(dd)
mm
cat(3, mm, 2*mm)
ee = cat(3, mm, 2*mm)
ee(:,:,[1 1 2 2 1 2 1 1])
ff = ee(1:4,1:4, :)
ff(:,[1 2], [1])
ff(:,[1 2], [1 2])
ff(:,[1 2], [1 2 2])
ff(:,[1 2 3 4], [1 2])
gg = [1 2 1 1]
help reshape
whos
cc
bb
aa
cc
dd
dd(:,:)
dd = cat(4, bb, 2*bb)
dd(:,:)
reshape(dd(:,:), size(dd))
dd
dd - reshape(dd(:,:), size(dd))
help medianIndex
dd
aa
ix = medianIndex(aa, 3)
ix = medianIndex(aa, 2)
aa
size(ix)
size(aa)
ix = medianIndex(aa, 1)
aa(ix)
aa
[ix,md] = medianIndex(aa, 1)
aa
[ix,md] = medianIndex(aa, 2)
aa
[ix,md] = medianIndex(aa, 3)
aa
[ix,md] = medianIndex(aa, 3)
%-- 2/8/18, 3:35 AM --%
help std
aa = rand([2 3 5])
bb= shiftdim(aa, 1)
cc = bb(:,:)
dd = cat(4, aa, 2*aa);
ee = cat(3, mm, 2*mm)
ff = ee(1:4,1:4, :)
gg = [1 2 1 1]
mm = [[magic(4) ones(4)]; [2*magic(4) 2*ones(4)]]
ee = cat(3, mm, 2*mm)
ff = ee(1:4,1:4, :)
gg = [1 2 1 1]
help meshgrid
[x,y,z] = meshgrid(-2:.2:2, -2:.25:2, -2:.16:2);
v = x .* exp(-x.^2 - y.^2 - z.^2);
slice(x,y,z,v,[-1.2 .8 2],2,[-2 -.2])
ndgrid(-2:.2:2, -2:.25:2, -2:.16:2);
ndgrid(-2:.2:2, -2:.25:2, -2:.16:2)
ndgrid(-0.5:.2:0.5, -0.5:.25:0.5, -0.5:.16:0.5)
[~, ~, ixprime, ~] = ndgrid(ones(10,1), [1 1], [1 2 3], [1 1 1 1]);
ixprime
txtl_init
mcmc_init
[ix,md] = medianIndex(aa, 2)
setdiff([1 2 3 4], [2 3])
setdiff([1 2 3 4; 5 6 7 8], [2 3; 6 8])
help figure
help root
help gcf
help gca
true | false
true || false
help OR
help LineStyle
help plot
help parula
autmn
autumn
%-- 2/9/18, 8:59 AM --%
help gca
p1 = plot(1:10)
p2 = plot(2:20)
p1
p1 = plot(1:10);hold on
p2 = plot(2:20)
[p1;[];p2]
pp = [p1;[];p2]
pp(1)
pp(3:end)
[pp(3:end);pp]
[pp pp]
reshape([pp pp], 4, 1)
help legends
help legend
a
a = 1
a = 2*a
a = a
help fprintf
fprintf('%g\t', [2 3 4 5])
a = struct('hello', {{'cc', 'dd'}})
a.hello
a.hello(1)
a.hello = a.hello(1)
a.hello
datadescription = ...
{['Data from Figure 1 of the 2014 ACS Synthetic Biology paper titled:  \n'...
'Gene Circuit Performance Characterization and Resource Usage in a  \n'...
'Cell-Free “Breadboard” by Siegal-Gaskins et al. This data involves a \n'...
'measurement of malachite green aptamer and green fluorescent protein  \n'...
'over a period of 800 minutes in the TX-TL cell free expression system.  \n'...
'The DNA initial conditions used are 0.5nM, 2nM, 5nM, and 20nM.' ]}
di = struct('dataInfo', {datadescription})
di.dataInfo = {['Modified to only have mRNA data. \n',...
di.dataInfo{1}]};
di.dataInfo
di.dataInfo{1}
fprintf(di.dataInfo{1})
whos
txtl_init
mcmc_init
m = model_dsg2014
m.Parameters
m.Rules
m.Events
txtl_init
txtl_tutorial
%-- 2/15/18, 8:09 AM --%
txtl_init
edit txtl_tutorial
sum([10/3 4.41666])
sum([10/3 4.41666])/10.5
ls
edit TXTL_workshop_scripts
help varargin
%-- 2/15/18, 3:22 PM --%
help strut
s = struct('type',{'big','little'},'color','red','x',{3 4})
s(1)
txtl_init
geneexpr
whos
Mobj.parameters
help globalize_params
globalize_params(Mobj)
Mobj.Parameters
[1 2 5 0 0 1 30 0 3 0 0 0 3 0 0 ]
find(ans)
~find(ans)
help cellfun
cellfun(numel, {[1 3 5], [4 7]})
help numel
cellfun(@numel, {[1 3 5], [4 7]})
sum(cellfun(@numel, {[1 3 5], [4 7]}))
numel({[1 3 5], [4 7]})
mcmc_init
edit proj_acs_dsg2014_mrna.m
proj_acs_dsg2014_mrna
cellfun(@iscell, simID)
proj_acs_dsg2014_mrna
ix
size(dataArray, 4)
proj_acs_dsg2014_mrna
size(inputarray)
(inputarray)
shiftedarray
help sort
help shiftdim
shiftdim(shiftedarray, ndims(inputarray) - dim +1)
ndims(inputarray) - dim +1
a =  rand(1, 4, 2)
a(:,:)
a =  rand(1, 4, 1,2)
a(:,:)
a =  rand(1, 2, 3,2)
[b,c]=medianIndex(a,3)
shiftedarray
[b,c]=medianIndex(a,3)
shiftedarray
srted
I
II
III
srted3
reshape(I4, [1, szmat(2:end)])
I5
ix
medianvals
a =  rand(1, 1, 1,5)
[b,c]=medianIndex(a,3)
ix
a =  rand(1, 1, 3,5)
[b,c]=medianIndex(a,3)
medianIndex
a =  rand(1, 1, 3,5)
[b,c]=medianIndex(a,3)
a =  rand(1, 1, 3,5);
[b,c]=medianIndex(a,3);
a
b
c
proj_acs_dsg2014_mrna
em
proj_acs_dsg2014_mrna
aps
get(aps)
aps(1)
aps(2)
aps(15)
help max
help sgn
help sgnm
a
a = zeros(4)
a(1,:) = 1
help num2cell
num2str
help num2str
arrayfun(@num2str, 1:10)
arrayfun(@num2str, 1:10, 'UniformOutput', false)
arrayfun(@num2str, 1:9, 'UniformOutput', false)
help arrayfun
arrayfun(@num2str, 1:9, 'UniformOutput', true)
struct('names', {mi(i).dosednames}, 'dosematrix', mi(i).dosedvals);arrayfun(@num2str, 1:9, 'UniformOutput', false)
dosedVals = [0.5 2 5 20]
dosedNames = {'DNA p70--utr1--deGFP'}
struct('names', {dosednames}, 'dosematrix', dosedvals)
struct('names', {dosedNames}, 'dosematrix', dosedVals)
struct('names', {{dosedNames}}, 'dosematrix', {dosedVals})
struct('names', {dosedNames}, 'dosematrix', {dosedVals})
struct('names', dosedNames, 'dosematrix', {dosedVals})
struct('names', dosedNames, 'dosematrix', dosedVals)
dosedVals = [0.5 2 5 20; 3 6 7 2]
dosedNames = {'DNA p70--utr1--deGFP'; 'str2'}
struct('names', dosedNames, 'dosematrix', dosedVals)
ans(1).dosematrix
struct('names', dosedNames, 'dosematrix', dosedVals)
a = struct('names', dosedNames, 'dosematrix', dosedVals)
a.names
a.dosematrix
a = struct('names', {dosedNames}, 'dosematrix', dosedVals)
a.dosematrix
a = struct('names', {dosedNames}, 'dosematrix', {dosedVals})
a.dosematrix
help all
proj_acs_dsg2014_mrna
logPfuns{fix}
logPfuns{1}
logPfuns{2}
proj_acs_dsg2014_mrna
di.dataInfo
proj_acs_dsg2014_mrna
di.dataInfo
fprintf(di.dataInfo)
fsprintf(di.dataInfo)
sprintf(di.dataInfo)
help fprintf
fsprintf(di.dataInfo{1})
fprintf(di.dataInfo{1})
proj_acs_dsg2014_mrna
clc
marray
mi
proj_acs_dsg2014_mrna
size marray
mtemp
marray
clc
mobj
di
mi
size(marray)
mcmc_trajectories(mobj, di, mi, marray)
mi
get(mi.emo)
get(mi.emo.SimulationOptions)
48000/3600
tv
di
di.timeVector
mcmc_trajectories(mobj, di, mi, marray)
get(mi.emo)
(mi.emo)
get(em.SimulationOptions)
mcmc_trajectories(mobj, di, mi, marray)
get(em.SimulationOptions)
SI = get(em, 'SimulationOptions')
mcmc_trajectories(mobj, di, mi, marray)
mcmc_trajectories(mi.emo, di, mi, marray)
close all
mcmc_trajectories(mi.emo, di, mi, marray)
titls
titls = {'dna 0.5'; 'dna 2';'dna 5';'dna 20'};
lgds = {};
mcmc_trajectories(mi.emo, di, mi, marray, titls, lgds)
titls
mcmc_trajectories
mcmc_trajectories(mi.emo, di, mi, marray, titls, lgds)
mcmc_trajectories
mcmc_trajectories(mi.emo, di, mi, marray, titls, lgds)
help legend
mcmc_trajectories(mi.emo, di, mi, marray, titls, lgds)
sum(indices)
clc
double2logical
logical(indices)
marray(logical(indices), :);
marray(logical(indices), :)
clear all
clc
close all
schemer_import
%-- 2/19/18, 6:27 AM --%
schemer_import
txtl_init
mcmc_init
edit proj_acs_dsg2014_protein.m
proj_acs_dsg2014_protein
eno{k} == enuo{kk}
enuo{kk}
eno{k}
class(eno{k})
strcmp(eno{k}, enuo{kk} )
proj_acs_dsg2014_protein
master_info.semanticGroups{i}
sgi(1)
help str2num
proj_acs_dsg2014_protein
master_info.fixedParams
proj_acs_dsg2014_protein
mv
proj_acs_dsg2014_protein
mi(i).namesOrd
proj_acs_dsg2014_protein
mi(i).namesOrd
proj_acs_dsg2014_protein
edit gen_residuals_v2.m
length(mi)
mi(i).paramMaps
proj_acs_dsg2014_protein
(ME.identifier
(ME.identifier)
ME
ME.stack
ME.stack(1)
ME.stack(5)
ME.stack(:)
ME(1).stack
ME
proj_acs_dsg2014_protein
mspecies
mspecies{1}
em
get(em)
proj_acs_dsg2014_protein
logPfuns{fix}(minit(:,wix))
logPfuns{fix}
-1/logPfuns{fix}
logPfuns{fix}
ME
ME.stack(1)
proj_acs_dsg2014_protein
logPfuns{fix}(minit(:,wix))
fix
whos
kk
length(mi)
size(pmaps, 2)
size(data_array)
size(data_array{kk})
proj_acs_dsg2014_protein
size(data_array{kk})
logP(:,:,1)
proj_acs_dsg2014_protein
logPfuns{fix}(proposedm(:,wix))
proposedm(:,wix)
logP
logP(1,:,1)
minit
proj_acs_dsg2014_protein
minitmi(i).namesOrd = eno
eno{1}
eno
mi
mi(1).paramMaps
mai
mai.masterNames
mai.masterVector
size(mai.masterVector)
mai.masterVector(mi.paramMaps(:,1))
proj_acs_dsg2014_protein
logP(:,:,1)
logP(1,:,1)
proj_acs_dsg2014_protein
ME
minit
wix
v=logPfuns{fix}(minit(:,wix+1))
tic v=logPfuns{fix}(minit(:,wix+1)) toc
tic; v=logPfuns{fix}(minit(:,wix+1)); toc
tic; v=logPfuns{fix}(minit(:,wix+2)); toc
for iii = 1:20
tic; v=logPfuns{fix}(minit(:,wix+iii)); toc
end
clc
proj_acs_dsg2014_protein
minit_justEstParams
estParamsIx
mi(i).paramMaps(:,1)
mi(i).paramMaps(mi(i).orderingIx, 1)
proj_acs_dsg2014_protein
size(marray)
projdir
help repmat
schemer_import
size(mvarray(estParamsIx, :) )
size(marrayOrd)
clc
close all
tstamp
mi.namesOrd
close all
help proj_acs_dsg2014_mrna
edit proj_acs_dsg2014_mrna
schemer_import
proj_acs_dsg2014_protein
magic(2)'
magic(2)
mmm = [magic(2);2*magic(2)]
mmm'
flipud(mmm')
size(outputsliceold(:,(end-npoints+1):end))
clc
clear all
close all
proj_acs_dsg2014_protein
tstamp
clear all; load(['/Users/vipulsinghal/Dropbox/Documents/toolbox/txtlsim_vsfork2017/'...
'mcmc_simbio/projects/proj_acs_dsg2014_mrna/simdata_20180121_131114/full_variable_set_20180121_131114.mat'])
whos
em
eno
mi
mi.names_unord
mi.names_ord
cellfun(@strcmp, mi.names_ord, mi.names_unord)
proj_acs_dsg2014_protein
mi(i).dataToMapTo(j)
eno
enuo
orderingIx
orderingIx2
cellfun(@strcmp, enuo(orderingIX), eno)
cellfun(@strcmp, enuo(orderingIx), eno)
mi(1).paramMaps(:,1)
mi(1).paramMaps(orderingIx,1)
mi
mi.paramMaps
mi.paramMaps(mi.orderingIx, :)
proj_acs_dsg2014_protein
clear all
size(marray)
clear all; load(['/Users/vipulsinghal/Dropbox/Documents/toolbox/txtlsim_vsfork2017/'...
'mcmc_simbio/projects/proj_acs_dsg2014_mrna/simdata_20180121_131114/full_variable_set_20180121_131114.mat'])whos
whos
mi
get(em)
[exp(m(end - kk,:)'); dose(i,:)']
ms{ss}
ME.message
help selectbyname
clc
proj_acs_dsg2014_protein
clear all
close all
clc
proj_acs_dsg2014_protein
marray = mcmc_get_walkers({'20180121_131114'}, {5}, ...
['/Users/vipulsinghal/Dropbox/Documents/toolbox/txtlsim_vsfork2017/'...
'mcmc_simbio/projects/proj_acs_dsg2014_mrna']);
nPrevPoints = 5;
minit = marray(:, ((end-nPrevPoints+1) : end), end);
minit]
minit
marray_cut(:,:,end)
proj_acs_dsg2014_protein
marray_cut(:,:,end)
marray_cut(:,:,end)'
proj_acs_dsg2014_protein
tstamp
whos
exp(10)
exp(8)
exp(9)
tstamp
proj_acs_dsg2014_protein
close all
clear all
clc
%-- 2/22/18, 2:32 AM --%
txtl_init
mcmc_init
proj_acs_dsg2014_protein
edit mcmc_trajectories.m
size(spreadst, 3)
squeeze(spreadst(:,1,:,2))
format short g
squeeze(spreadst(:,1,1:10,2))
squeeze(simspreadst(:,1,1:10,3))
m(end-3:end,:)
figure; hist(m(end-50:end,:))
help hist
figure; hist(m(end-1000:end,1))
figure; hist(m(end-1000:end,1),50)
figure; hist(m(end-1000:end,2),50)
figure; hist(m(end-1000:end,3),50)
mi
close all
mi.namesUnord(mi.orderingIx)
figure; hist(m(end-1000:end,5),50)
figure; hist(m(end-50:end,5),50)
figure; hist(m(end-50:end,5),50); pause(3); close
figure; hist(m(end-50:end,5),50); pause(6); close
figure; hist(m(end-50:end,6),50); pause(2); close
figure; hist(m(end-50:end,7),50); pause(2); close
figure; hist(m(end-50:end,24),50); pause(2); close
m(end-50:end,2)
[xx, yy] = sort(m(end-500:end,2))
[xx, yy] = sort(m(121,2))
[xx, yy, zz] = sort(m(end-500:end,2))
help sort
m(121,2)
m(386,2)
m(end-121,2)
m(end-500+121,2)
m(end-500+121+1,2)
m(end-500+121-1,2)
m(end-50:end,2)
em
ms
ms{1}
idxnotused
size(da)
da(:,1,1:10,4)
clc
squeeze(da(:,1,1:10,4))
squeeze(da(:,1,1:5,4))
get(em, 'ValueInfo')
em.ValueInfo
vii = em.ValueInfo;
for ii = 1:25
vin{ii} = vii.Name;
end
vin
edit mcmc_runsim_v2.m
mi,em
mi.em
mi.emo
for ii = 1:25
vii = mi.emo.ValueInfo;
vin{ii} = vii.Name;
end
vin
mi(i).emo
for ii = 1:25
vii = mi.emo.ValueInfo;
vin{ii} = vii.Name;
end
vin
mi(i).namesUnord
ep
es
aps
get(aps)
get(aps(22))
emo
emo{1}
for ii = 1:25
vii = mi.emo.ValueInfo;
vin{ii} = vii.Name;
end
for ii = 1:25
vii = emo{1}.ValueInfo;
vin{ii} = vii.Name;
end
vin
mobj
mobj.parameters
[ep; es; ds](1)
epep = [ep; es; ds]
epep(1)
epep(2)
epep(3)
epep(4)
epep(5)
emo{i}
emo{i}.ValueInfo
emo{i}.ValueInfo(1).Name
emo{i}.ValueInfo(2).Name
emo{i}.ValueInfo(3).Name
for ii = 1:25
vii = emo{1}.ValueInfo(ii);
vin{ii} = vii.Name;
end
vin
em.ValueInfo(1).Name
em.ValueInfo(4).Name
em.ValueInfo(7).Name
sd
get(sd)
get(sd.DataNames)
(sd.DataNames)
(sd.Data)
help sbiotrellis
sbiotrellis(sd)
sbioplot(sd)
marrayOrd
size(marrayOrd)
marrayOrd(:,end-2:end, end)
mi.namesOrd
[mi.namesOrd, marrayOrd(:,end-2:end, end)]
{mi.namesOrd, marrayOrd(:,end-2:end, end)}
marrayOrd(:,end-4:end, end)
marrayOrd(:,end, end)
exp(4.5145)
help num2cell
num2cell(marrayOrd(:,end, end))
[num2cell(marrayOrd(:,end, end)) mi.namesOrd]
aaa = [num2cell(marrayOrd(:,end, end)) mi.namesOrd]
aaa(:,1)
cell2mat(aaa(:,1))
m
size(m)
ME
[exp(m(end - kk+1,:)'); dose(i,:)']
close all
cell2mat(aaa(:,1))'
[exp(m(end - kk+1,:)'); dose(i,:)']
di
mi
ehos
whos
ms
mi.measuredSpecies
[exp(m(end - kk+1,:)'); dose(i,:)']mi.measuredSpecies
[exp(m(end - kk+1,:)'); dose(i,:)']
ME
[exp(m(end - kk+1,:)'); dose(i,:)']
size([exp(m(end - kk+1,:)'); dose(i,:)'])
tv
help sbioplot
geneexpr
mobj
whos
Mobj
mobj
mobj.reactions
marrayOrd(:,end, end)
aaa = [num2cell(marrayOrd(:,end, end)) mi.namesOrd]
aaa = [num2cell(marrayOrd(:,end, end)) num2cell(marrayOrd(:,end, end)) mi.namesOrd]
edit data_dsg2014.m
data_VNPRL2011
di
whos
clear all
di = data_VNPRL2011;
di
di(1)
di(2)
di(2).timeVector
plot(di(2).timeVector, squeeze(di(2).dataArray))
daa =  squeeze(di(2).dataArray)
di = data_VNPRL2011;
daa =  squeeze(di(2).dataArray)
plot(di(2).timeVector, squeeze(di(2).dataArray))
di = data_VNPRL2011;
plot(di(2).timeVector, squeeze(di(2).dataArray))
plot(di(1).timeVector, squeeze(di(1).dataArray))
daa =  squeeze(di(1).dataArray)
clc
daa =  squeeze(di(1).dataArray)
di = data_VNPRL2011;
daa =  squeeze(di(1).dataArray)
squeeze(daa(:,1,:))
plot(di(1).timeVector, squeeze(daa(:,1,:)))
plot(di(1).timeVector, squeeze(daa(:,2,:)))
figure; subplot(2, 1, 1); plot(di(1).timeVector, squeeze(daa(:,2,:)));
figure; subplot(2, 1, 2); plot(di(1).timeVector, squeeze(daa(:,1,:)));
subplot(2, 1, 2); plot(di(1).timeVector, squeeze(daa(:,2,:)));
close all; subplot(2, 1, 2); plot(di(1).timeVector, squeeze(daa(:,2,:)));
subplot(2, 1, 1); plot(di(1).timeVector, squeeze(daa(:,1,:)));
help diff
figure; plot(di(1).timeVector, diff(squeeze(daa(:,2,:))));
figure; plot(di(1).timeVector(1:end-1), diff(squeeze(daa(:,2,:))));
help interp1
di = data_VNPRL2011;
daa =  squeeze(di(1).dataArray)
figure; plot(di(1).timeVector(1:end-1), diff(squeeze(daa(:,2,:))));
figure; plot(di(1).timeVector(1:end-1)/3600, diff(squeeze(daa(:,2,:))));
close all; subplot(2, 1, 2); plot(di(1).timeVector/3600, squeeze(daa(:,2,:)));
subplot(2, 1, 1); plot(di(1).timeVector/3600, squeeze(daa(:,1,:)));
figure; plot(di(1).timeVector(1:end-1)/3600, diff(squeeze(daa(:,2,:))));
di = data_VNPRL2011;
di
proj_VNPRL
subplot(2, 1, 2); plot(di(1).timeVector, squeeze(daa(:,2,:)));
close all; subplot(2, 1, 2); plot(di(1).timeVector, squeeze(daa(:,2,:)));
subplot(2, 1, 1); plot(di(1).timeVector, squeeze(daa(:,1,:)));
help diff
figure; plot(di(1).timeVector, diff(squeeze(daa(:,2,:))));
figure; plot(di(1).timeVector(1:end-1), diff(squeeze(daa(:,2,:))));
help interp1
di = data_VNPRL2011;
daa =  squeeze(di(1).dataArray)
figure; plot(di(1).timeVector(1:end-1), diff(squeeze(daa(:,2,:))));
figure; plot(di(1).timeVector(1:end-1)/3600, diff(squeeze(daa(:,2,:))));
close all; subplot(2, 1, 2); plot(di(1).timeVector/3600, squeeze(daa(:,2,:)));
subplot(2, 1, 1); plot(di(1).timeVector/3600, squeeze(daa(:,1,:)));
figure; plot(di(1).timeVector(1:end-1)/3600, diff(squeeze(daa(:,2,:))));
proj_VNPRL
size(di(1).timeVector(1:end-10)/3600)
proj_VNPRL
close all
log(0.1)
log(10)
log(0.5)
3600*5
activeNames
activeNames(:,3)
cell2mat(activeNames(:,3))
mi = mcmc_info_vnprl2011_mrna
help struct
mi = mcmc_info_vnprl2011_mrna
model_info = struct(...
'circuitInfo',{circuitInfo1, circuitInfo2},...
'modelObj', {modelObj, modelObj})
whos
mcmc_info = mcmc_info_vnprl2011(mobj)
mcmc_info = mcmc_info_vnprl2011_mrna(mobj)
mcmc_info.model_info
mcmc_info.model_info(1)
mcmc_info.model_info(2)
mcmc_info = mcmc_info_vnprl2011_mrna(mobj)
mcmc_info.model_info(1)
mcmc_info.model_info(2)
close all
%-- 2/26/18, 9:11 AM --%
tv1<10*3600
tv1(tv1<10*3600)
proj_VNPRL_mrna
currda
close all
format short g
currda
sum(da, 1)
[ix, mdvals] = medianIndex(sum(da, 1), 3)
inputarray
inputarrayshiftdim(inputarray, dim-1)
shiftdim(inputarray, dim-1)
srted
I
size(I, 1)+1)
size(I, 1)+1
II
III
help shiftdim
size(inputarray)
size(shiftedarray)
proj_VNPRL_mrna
I
srtd
srted
inputarray
srted5
I5
help shiftdim
ia = inputarray(:, 1, :, :);
shiftdim(ia, 2)
size(ans)
inputarray = inputarray(:, 1, :, :);
shiftedarray = shiftdim(inputarray, dim-1);
[srted, I] = sort(shiftedarray, 1);
II = ceil((size(I, 1)+1)/2);
III = I(:,:);
srted3 = srted(:,:);
% index using II (ie, find the closest-to-middle element)
I4 = III(II,:);
srted4 = srted3(II, :);
% Now reshape back using the original dimensions
szmat = size(I);
I5 = reshape(I4, [1, szmat(2:end)]);
srted5 = reshape(srted4, [1, szmat(2:end)]);
% shift back to the original dimensions
ix = shiftdim(I5, -dim+1);%ndims(inputarray) - dim +1
medianvals = shiftdim(srted5, -dim+1);
ix
srted5
size(srted5)
rr = rand(2, 1, 3, 4);
size(shiftdim(rr, 2))
proj_VNPRL_mrna
ix
medianvals
proj_VNPRL_mrna
mobj
mobj.species
sbioselect(mobj, 'Type', 'species', 'Name', ...
mi.namesUnord)
es = sbioselect(mobj, 'Type', 'species', 'Name', ...
mi.namesUnord);
queryargs{:}
s = SimBiology.internal.makeFindString(opts, queryargs{:})
es = sbioselect(mobj, 'Type', 'species', 'Name', ...
mi(i).namesUnord)
proj_VNPRL_mrna
da
ix
ix(1,i, 1,j)
ix
size(dataArray, 4)
size(dataArray, 2)
size(dataArray)
dataArray(:, i, ix(1,i, 1,j), j)
medianCurves(:,i,1,j) = dataArray(:, i, ix(1,i, 1,j), j)
proj_VNPRL_mrna
size(dataArray, 4)
size(dataArray, 2)
ix
proj_VNPRL_mrna
size(da)
size(shiftdim(inputarray, dim-1))
szmat(2:end)
size(padded_I5)
padded_I5
padded_srted5
proj_VNPRL_mrna
mi(i).emo
i
minitTopoGeom
mi(i).namesOrd
proj_VNPRL_mrna
mi(kk).paramMaps
mi(kk).dosedVals
mi(kk).emo
get(mi(kk).emo)
mi(kk).measuredSpecies
proj_VNPRL_mrna
close all
mami(1).orderingIx
mai(1).orderingIx
mi(1).orderingIx
mi(1).emo
get(mi(1).emo, 'ValueInfo')
vii = get(mi(1).emo, 'ValueInfo')
vii(:)
vii(1).Name
for i = 1:16; vii(i ).Name end
for i = 1:16; vii(i ).Name
end
size(marrayOrd)
mi(2).orderingIx
paramMaps(mi(2).orderingIx, 1)
mi(2).paramMaps(mi(2).orderingIx, 1)
di(3)
mi(2)
%-- 2/26/18, 4:26 PM --%
txtl_init
mcmc_init
proj_VNPRL_mrna
%-- 2/27/18, 5:49 AM --%
txlt_init
txtl_init
mcmc_init
close all
ecornerplot_vse(marray,'scatter', p.scatter,...
'ks', p.ks,...
'names', legendz,...
'grid', p.grid,...
'color', p.color,...
'fullmatrix', p.fullmatrix,...
'ks', p.ks,...
'support', p.support, ...
'transparency', p.transparency);
close all
ecornerplot_vse(marray,'scatter', p.scatter,...
'ks', p.ks,...
'names', legendz,...
'grid', p.grid,...
'color', p.color,...
'fullmatrix', p.fullmatrix,...
'ks', p.ks,...
'support', p.support, ...
'transparency', p.transparency);
close all
tstamp
paramRanges
estParams
exp(8.9)
exp(8.9)/3600
size(marrayOrd)
%-- 3/9/18, 11:43 PM --%
txtl_init
mcmc_init
help struct
help assert
help struct
s1 = struct('a', 2, 'b', {{3 4 6}})
s2 = struct('a', 7, 'b', {{5 4 6}})
s3 = [s1, s2]
clc
s1
clc
measuredSpecies{msID}
da_extract1
close all
clc
proj_protein_constgfp3i
close all
proj_protein_constgfp3i
tstamp2
tstamp2 = '20180311_224651'
projdir
proj_protein_constgfp3i
projdir
tstamp2
20180311_224651
tstamp2 = '20180311_224651'
help save
clc
help save
close all
rng
rng.state
rng.State
help rng
rand
rand*10000
randstream
RandStream
now
help now
datestr(now)
datestr(now, 'yyyymmddHHmmss')
datestr(now, 'yyyymmddHHMMSS')
datestr(now, 'yyyymmdd_HHMMSS')
help saveas
help print
projdir
close all
proj_protein_constgfp3i
%-- 3/12/18, 4:19 PM --%
txtl_init
mcmc_init
proj_protein_constgfp3i
close all
edit mcmc_info_constgfp3ii.m
proj_protein_constgfp3ii
ME
ME.stack
ME.stack(:)
ME(1).stack
ME(1).stack(1)
ME(1).stack(2)
edit mcmc_runsim_v2
proj_protein_constgfp3ii
mai.estNames
close all
fhandle
close all
proj_protein_constgfp3iii
close all
clear all
clcl
clc
proj_protein_constgfp3iv
close all
clc
proj_protein_constgfp3ii
close all
mi(1).orderingIx
mi
mi(1).paramMaps
mi(1).paramMaps(mi(1).orderingIx, 2)
mi(1).paramMaps(mi(1).orderingIx, 1)
clc
close all
size(mvarray)
em
mi.namesOrd
mi.namesUnord
get(em)
get(em, 'ValueInfo')
gg = get(em, 'ValueInfo')
gg(1)
gg(2)
gg(3)
gg(4)
ms
ms{1}
[da, idxnotused] = simulatecurves(em,m, p.nSimCurves, dose, tv, ms);
marray(:,end-10:end, end)
proj_protein_constgfp3ii
proj_protein_constgfp3iii
close all
tstamp1
tstamp2
proj_protein_constgfp3iii
proj_protein_constgfp3iv
exp(-2)
exp(10)
exp(5)
exp(8)
exp(-5)
exp(-7)
exp(7)
exp(-2)
exp(-4)
exp(-3)
exp(5)
exp(6)
proj_protein_constgfp3iv
close all
exp(-.3)
size(marrayOrd)
size(marrayOrd(:,end-5:end,end))
(marrayOrd(:,end-5:end,end))
(marrayOrd(3,:,end))'
hist(marrayOrd(3,:,end))'
help hist
histogram(marrayOrd(3,:,end))'
figure histogram(marrayOrd(3,:,end))'
figure; histogram(marrayOrd(3,:,end))'
figure; histogram(marrayOrd(3,:,end), 100)'
exp(marrayOrd(3,:,end))'
histogram(exp(marrayOrd(3,:,end))', 50)
histogram(exp(marrayOrd(3,:,end))', 500)
format short g
exp(marrayOrd(3,:,end))'
marray = mcmc_get_walkers({tstamptouse}, {1}, projdir);
size(marray)
size(marray(3,:,:))
histogram(marray(3,:,:), 100)
histogram(marray(3,:,1), 100)
close all
histogram(marray(3,:,1), 100)
figure; for i = 1:8
subplot(4, 2, i); histogram(marray(3,:,i), 100);
end
figure; for i = 1:16
subplot(4, 4, i); histogram(marray(3,:,4*i), 100);
end
marray = mcmc_get_walkers({tstamptouse}, {1:8}, projdir);
figure; for i = 1:36
subplot(6, 6, i); histogram(marray(3,:,20*i), 100);
end
edit mcmc_runsim_v2
%-- 3/16/18, 4:28 AM --%
edit mcmc_trajectories.m
log([100;6000;0.012;200;400;200;400;100])
log([100;6000;0.012;200;400;200;400;100])-3
log([100;6000;0.012;200;400;200;400;100])+3
[log([100;6000;0.012;200;400;200;400;100])-3 log([100;6000;0.012;200;400;200;400;100])+3]
clc
whos
clear all
close all
clc
whos
di
help DSP)
help DSP
help legends
explore_constgfp3tetR1
di(1)
di(2)
di(2).dosedNames
explore_constgfp3tetR1
size(expsummst)
squeeze(expsummst)
aaa  = squeeze(expsummst)
unique(aaa(end,:))
close all
clear all
explore_constgfp3tetR1
currmeasuredSpecies
currmeasuredSpecies{1}
explore_constgfp3tetR1
aaa  = squeeze(da)
aaa  = squeeze(da(end,:,:,:))
explore_constgfp3tetR1
mobj
mobj.species
mobj.Parameters
explore_constgfp3tetR1
ckc
clc
ln(2)
log(2)
edit explore_constgfp5tetR2.m
explore_constgfp5tetR2
{mi(1).measuredSpecies
}
mi(1).measuredSpecies
mi(1).measuredSpecies{1}]
mi(1).measuredSpecies{1}
mi(2).measuredSpecies{1}
mi(2).measuredSpecies{2}
edit proj_tetR1i.m
explore_constgfp3tetR1
edit explore_constgfp3tetR1
close all
edit mcmc_info_tetR_1i.m
close all
%-- 3/19/18, 1:11 AM --%
txtl_init
mcmc_init
edit proj_tetR1i.m
proj_tetR1i
mi2(1).paramMaps(mi2(1).orderingIx, 2)
mi2(1).paramMaps(mi2(1).orderingIx, 1)
proj_tetR1i
mi1.namesUnord
close all
exp([-3.75 4.4])
exp([-4.46 4.4])
edit proj_tetR1ii.m
proj_tetR1ii
whos
masterVector'
masterVector([2 4 6 8 9 11])'
masterVector([2 4 6 8 10 12])'
close all
mai.estNames
help scatter3
close all
proj_tetR1ii
close all
size(mstacked)
close all
proj_tetR1i
close all
edit proj_tetR2i.m
proj_tetR2i
%-- 3/20/18, 6:38 AM --%
txtl_init
mcmc_init
proj_tetR2i
edit proj_tetR2ii.m
proj_tetR2ii
close all
edit mcmc_runsim_v2.m
proj_tetR2ii
mcmc_info_tetR_2ii
proj_tetR2ii
%-- 3/21/18, 2:00 AM --%
txtl_init
mcmc_init
proj_tetR2ii
whos
tstamp
clear all
close all
clc
proj_tetR2ii
tstamp
proj_tetR2ii
tstamp
proj_tetR2ii
close all
clear all
clc
proj_tetR2ii
close all
clc
clear all
proj_protein_constgfp5ii
tstamp
cloe all
close all
clear all
clc
proj_protein_constgfp5ii
tstamp
proj_protein_constgfp5ii
tstamp
proj_protein_constgfp5ii
edit mcmc_runsim_v2.m
proj_protein_constgfp5ii
close all
proj_protein_constgfp5ii
tstamp
proj_protein_constgfp5ii
tstamp
closr all
close all
%-- 3/23/18, 4:35 AM --%
txtl_init
mcmc_init
20180322_115822
proj_protein_constgfp5ii
tstamp
proj_protein_constgfp5ii
close all; proj_protein_constgfp5ii
tstamp
proj_protein_constgfp5ii
close all
proj_tetR2i
tstamp1
tstamp2
proj_tetR2i
clc
close all
clear all
%-- 4/2/18, 1:52 AM --%
proj_protein_constgfp3ii
close all
clear all
clc
proj_protein_constgfp3ii_linux
whos
projdir
clear all
load full_variable_set_20180401_151138
whos
tstamp
da
mcmc_info
specificproj
close all
clear all
load(['full_variable_set_' ts1]);
load(['full_variable_set_20180401_151716' ]);
path
clc
clear all
close all
load([specificprojdir '/full_variable_set_' ts1], 'mcmc_info', 'mi');
whos
mi
load([specificprojdir '/full_variable_set_' ts1])
whos
data_info
explore_corr_gfp3ii_w_and_wo_cov
size(marray)
clc
clear all
explore_corr_gfp3ii_w_and_wo_cov
close all
clear all
clc
explore_corr_gfp3ii_w_and_wo_cov
help addOptional
mi = proj_protein_constgfp3ii_linux([], 'stepSize', 1.05, 'nW', 40, 'nPoints', 4e2, 'thinning', 2, 'nIter', 2, 'parallel', false, 'multiplier', 2)
explore_corr_gfp3ii_w_and_wo_cov
%-- 4/3/18, 2:37 PM --%
help lead
help load
explore_corr_gfp3ii_w_and_wo_cov
%-- 4/4/18, 5:45 AM --%
explore_corr_gfp3ii_w_and_wo_cov
whos
data_info
data_info(1)
close all
help scatter
scatter3
help scatter3
XXred
help line
[XX1;XX2]
help scatter3
save('covE1_offthemanifold')
mcmc_info
mcmc_info.runsim_info
mcmc_info.model_info
mcmc_info.master_info
close all
explore_corr_gfp3ii_w_and_wo_cov
whos
%-- 4/5/18, 7:46 AM --%
CaptureFigVid_Example
explore_corr_gfp3ii_w_and_wo_cov
mai.estNames
help surf
ssurrff
ssurrff.FaceAlpha
ssurrff.FaceAlpha = 0.2
caxis
colormap
vq
xq
yq
help axis
axis
s2
set(s2)
set(s2, 'LineStyle', 'none')
s2
s2.EdgeColor = [0.5 0 0]
set(s2, 'LineStyle', ':')
s2.EdgeColor = [0.5 0.5 0.5]
set(s2, 'LineStyle', '--')
set(s2, 'LineStyle', '-')
help daspect
addpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB/CaptureFigVid/CaptureFigVid')
30:0:30
290:10:200
290:-10:200
explore_corr_gfp3ii_w_and_wo_cov
length([30*ones(1,6),30:-3:18 18:3:57])
explore_corr_gfp3ii_w_and_wo_cov
[30*ones(1,6),30:-6:18 18:6:90]
[30*ones(1,6),30:6:72 72:-6:18
]
tstouse
fhandle
get(fhandle)
cc2 = get(fhandle, 'Children')
cc2(1)
cc2(1).title
cc2(1).Title
class(cc2)
class(cc2(1))
class(cc2(2))
class(cc2(3))
class(cc2(4))
help plot
di(2)
help paramid
size(da)
cc1
explore_corr_gfp3ii_w_and_wo_cov
pp
alpha(pp, 0.1)
close all
cc1
clc
explore_corr_gfp3ii_w_and_wo_cov
tstouse
explore_corr_gfp3ii_w_and_wo_cov
whos
axis
gca
help axis
explore_corr_gfp3ii_w_and_wo_cov
help axis
explore_corr_gfp3ii_w_and_wo_cov
cc(3)
cc2
cc2(3)
explore_corr_gfp3ii_w_and_wo_cov
close all
geneexpr
edit txtl_enzyme_resource_degradation.m
%-- 4/12/18, 7:24 AM --%
txtl_init
geneexpr
mobj
Mobj
mobj.reactions
Mobj.Reactions
edit txtl_protein_degradation.m
negautoreg
tube.Parameters
sbioselect(tube, 'Name', 'TX_elong_glob')
sbioselect(tube, 'Name', 'TX_elong_glob', 'Type', 'Parameter')
negautoreg
tube
tube.Parameters
tube.Userdata.ReactionConfig.Transcription_Rate
addparameter(tube, 'TX_elong_glob',tube.Userdata.ReactionConfig.Transcription_Rate);
negautoreg
Mobj
Mobj.reactions
geneexpr
Mobj.reactions
edit txtl_add_dna
edit data_info_struct.m
data_info_struct
class(tidyCSV)
class(tidyData)
size(tidyData)
(tidyData(1:20, :))
time
time/3600
times{1}/3600
times{1}
times{1}==0
time
geneexpr
modelObj
modelObj.UserData
geneexpr
modelObj.UserData
help isfield
geneexpr
edit txtl_add_dna
geneexpr
rna
get(rna)
edit geneexpr
geneexpr
Mobj
Mobj.reactions
edit geneexpr
Mobj.UserData
Mobj.UsetData.energymode = 'regeneration'
Mobj.UserData.energymode = 'regeneration'
Mobj.UserData
geneexpr_test_regen_mode
isfield(tube.UserData, 'energymode')
strcmp(tube.UserData.energymode, 'regeneration')
geneexpr_test_regen_mode
Mobj.parameters
geneexpr_test_regen_mode
get(Mobj.Parameters
get(Mobj.Parameters)
sbioselect(Mobj.Parameters)
geneexpr_test_regen_mode
Mobj.Parameters
geneexpr_test_regen_mode
data_info_struct
whos
clear all
data_info_struct
whos
data_info
dataInfo
di
di{1}
help struct
clear di
di
di(1)
aaa = struct([])
aaa = struct(1:4)
clear di
di
di(1)
di(1).dosedNames
di(1).dosedVals
doseInfos
unique(tidyData(:,{'data_info_element'}))
(tidyData(:,{'data_info_element'}))
doseInfos = unique(tidyData(:,{'data_info_element'}))
doseInfos = table2array(doseInfos)'
size(di(1).dataArray)
help height
di(1).dosedNames
di(1).dosedVals
(di(1).dataArray(:,1,1,1)
(di(1).dataArray(:,1,1,1))
di(1).dataArray(1:10,:,1,1)
di(1).dataArray(1:20,:,1,1)
di(1).dataArray(1:20,:,1:2,1)
di(1).dataArray(1:20,:,1,1:3)
di(2).dataArray(1:20,:,1,1:3)
di(3).dataArray(1:20,:,1,1:3)
di(3).dataArray(1:20,:,1,3:5)
di(3).dataArray(1:20,:,1,6:7)
di(2).measuredNames
clc
txtl_init
geneexpr_test_regen_mode
mobj
Mobj
Mobj.parameters
Mobj.rules
Mobj.events
%-- 4/19/18, 1:43 PM --%
txtl_init
edit txtl_enzyme_resource_degradation.m
edit txtl_reaction_config.m
activeNames1 = {...
'TX_elong_glob'                      1          [0.5 10]
'AGTPdeg_time'                      10800        [1800 18000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-1]
'TXTL_P70_RNAPbound_Kd'             12          [0.1 1000]
'TXTL_P70_RNAPbound_F'              17          [0.1 100]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.07        [1e-4 10]
'TXTL_NTP_RNAP_1_Kd'                2           [0.1 1000]
'TXTL_NTP_RNAP_1_F'                 10          [0.1 100]
'TXTL_NTP_RNAP_2_Kd'                10          [0.1 1000]
'TXTL_NTP_RNAP_2_F'                 1           [0.1 100]
'TXTL_RNAdeg_Kd'                    2000        [1 5000]
'TXTL_RNAdeg_F'                     1           [0.1 1000]
'TXTL_RNAdeg_kc'                    0.001       [1e-4 1]
'RNAP'                              30          [5 500]
'RNase'                             200         [10 1000]};
activeNames1(:,1)
exp([5 9
-4 0
-2 10
-1 3
-2 10
-3 10
2 7
-3 4
-1.2 -0.8
5 8])
format short g
exp([5 9
-4 0
-2 10
-1 3
-2 10
-3 10
2 7
-3 4
-1.2 -0.8
5 8])
Mobj.reactions
edit txtl_transcription
Mobj.reactions
Mobj
Mobj.Parameters
globalize_params(Mobj)
mmob = globalize_params(Mobj)
mmob.Parameters
Mobj.species
help globalize_params
edit globalize_params
edit txtl_transcription
edit txtl_reaction_config.m
mmob = globalize_params(Mobj)
mmob.Parameters
activeNames2 = {...
'TX_elong_glob'                      10.5       [0.5 30]
'AGTPdeg_time'                      7200        [1800 18000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]
'TXTL_P70_RNAPbound_Kd'             20          [10 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 100]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 10]
'TXTL_NTP_RNAP_1_Kd'                100000      [10 1e8]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-7 10]
'TXTL_NTP_RNAP_2_Kd'                1e6         [10 1e8]
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-7 10]
'TXTL_RNAdeg_Kd'                    2000        [100 10000]
'TXTL_RNAdeg_F'                     0.01        [0.1 1000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]
'RNAP'                              100         [5 500]
'RNase'                             100         [10 1000]
'TL_elong_glob'                     20          [4 200]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]
'TXTL_UTR_UTR1_Kd'                  20          [1 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 10]
'TL_AA_Kd'                          100000      [10 1e8]
'TL_AA_F'                           0.001       [1e-5 1]
'TL_AGTP_Kd'                        100000      [1e2 1e8]
'TL_AGTP_F'                         1e-5        [1e-7 1]
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 2000]
'Ribo'                              30          [5 1000]};
size(activeNames2)
[{1:26}' activeNames2]
{1:26}'
[(1:26)' activeNames2]
(1:26)'
activeNames2
help array2cell
help mat2cell
[mat2cell((1:26)') activeNames2]
[mat2cell((1:26)', 26, 1) activeNames2]
[num2cell((1:26)') activeNames2]
estParams = activeNames2([1 2 5:17 19:26 ]',1);
estParams
edit proj_acs_dsg2014_regen_A.m
edit model_dsg2014
mm = model_dsg2014_regen
mm
mm.events
mm.params
mm.Parameters
proj_acs_dsg2014_regen_A
[mi,mai, ri, tstamp, projdir, di] = proj_acs_dsg2014_regen_A(...
'stepSize', 1.5, 'nW', 40, 'nPoints', 2e3, 'thinning', 3,...
'nIter', 3, 'parallel', false, 'multiplier', 2, 'stdev', 5);
[mi,mai, ri, tstamp, projdir, di] = proj_acs_dsg2014_regen_A(...
'stepSize', 1.5, 'nW', 40, 'nPoints', 2e3, 'thinning', 3,...
'nIter', 3, 'parallel', false, 'multiplier', 2, 'stdev', 5);
[mi,mai, ri, tstamp, projdir, di] = proj_acs_dsg2014_regen_A(...
'stepSize', 1.5, 'nW', 50, 'nPoints', 2e3, 'thinning', 3,...
'nIter', 3, 'parallel', false, 'multiplier', 2, 'stdev', 5);
edit txtl_reaction_config.m
di = data_dsg2014_full
di(1)
di(2)
di(3)
mobj = model_dsg2014_regen;
%% setup the mcmc_info struct
mcmc_info = mcmc_info_dsg2014_regen_A(mobj);
mcmc_info.model_info
mcmc_info.model_info(1)
mcmc_info = mcmc_info_dsg2014_regen_A(mobj);
mcmc_info.model_info(1)
mcmc_info.model_info(2)
di
di(1)
[mi,mai, ri, tstamp, projdir, di] = proj_acs_dsg2014_regen_A(...
'stepSize', 1.10, 'nW', 42, 'nPoints', 6e2, 'thinning', 3,...
'nIter', 2, 'parallel', false, 'multiplier', 2, 'stdev', 1);
[mi,mai, ri, tstamp, projdir, di] = proj_acs_dsg2014_regen_A(...
'stepSize', 1.10, 'nW', 120, 'nPoints', 4e3, 'thinning', 3,...
'nIter', 2, 'parallel', true, 'multiplier', 2, 'stdev', 1);
close all
clear all
clc
% add source code directory
addpath('/Users/vipulsinghal/Dropbox/Documents/vipul_repo/MCMC/Code_MCMC/src')
close all
clear all
clc
% add source code directory
addpath('/Users/vipulsinghal/Dropbox/Documents/vipul_repo/MCMC/Code_MCMC/src')
parallalflag = true;
nsteps = 2e5;
nW = 600;
stepsz = 3;
lb =-8; ub = 8;
% add source code directory
addpath('/Users/vipulsinghal/Dropbox/Documents/vipul_repo/MCMC/Code_MCMC/src')
parallalflag = true;
nsteps = 2e5;
nW = 600;
stepsz = 3;
lb =-8; ub = 8;
eval(['load(''t015_calib_' datestring '_5_MBP'', ''m'');'])
mstacked = m(:,:)';
medn = median(mstacked);
kc_calib = medn(5) %use medians
P_calib = medn(6) %use medians
addpath(genpath(pwd))
t015_calib_20171023_015326_5_MBP.mat
load('t015_calib_20171023_015326_5_MBP.mat')
whos
mstacked = m(:,:)';
medn = median(mstacked);
kc_calib = medn(5) %use medians
P_calib = medn(6) %use medians
exp([kc_calib P_calib])
load('t015_calib_20171023_043408_5_MBP')
mstacked = m(:,:)';
medn = median(mstacked);
kc_calib = medn(5) %use medians
P_calib = medn(6) %use medians
exp([kc_calib P_calib])
mstacked = m(:,:)';
medn = median(mstacked);
kc_calib = medn(5) %use medians
P_calib = medn(6) %use medians
exp(medn)
load('t015_calib_20171023_015326_5_MBP.mat')
mstacked = m(:,:)';
medn = median(mstacked);
kc_calib = medn(5) %use medians
P_calib = medn(6) %use medians
exp(medn)
load('t015_calib_20171023_151627_5_MBP')
mstacked = m(:,:)';
medn = median(mstacked);
kc_calib = medn(5) %use medians
P_calib = medn(6) %use medians
exp(medn)
clear all
load 't015_corr1_20171023_151627_17_MBP'
whos
loglike_corr1
kc_calib
P_calib
datestring
eval(['load(''t015_calib_' datestring '_5_MBP'', ''m'');'])
mstacked = m(:,:)';
medn = median(mstacked);
kc_calib = medn(5) %use medians
P_calib = medn(6) %use medians
exp(medn)
nEnv
help find
find(mstacked(:, 5)>kc_calib3-0.01) && find(mstacked(:, 5)<kc_calib3+0.01) &&...
find(mstacked(:, 6)>P_calib3-0.01) && find(mstacked(:, 6)<P_calib3+0.01)
help all
find(mstacked(:, 5)>kc_calib3-0.01)
[i, x] = find(mstacked(:, 5)>kc_calib3-0.01)
[i2, x2] = find(mstacked(:, 5)<kc_calib3+0.01);
help all
all0[x,x2],2)
all([x,x2],2)
size(x)
size(x2)
size(i2)
size(i)
[i1, x1] = find(mstacked(:, 5)>kc_calib3-0.01);
size(i)
size(x1)
help size
help find
help setdiff
intersect(find(mstacked(:, 5)>kc_calib3-0.01), find(mstacked(:, 5)<kc_calib3+0.01))
bb = intersect(find(mstacked(:, 6)>P_calib3-0.01), find(mstacked(:, 6)<P_calib3+0.01))
aa = intersect(find(mstacked(:, 5)>kc_calib3-0.01), find(mstacked(:, 5)<kc_calib3+0.01))
intersect(aa, bb)
bb = intersect(find(mstacked(:, 6)>P_calib3-0.01), find(mstacked(:, 6)<P_calib3+0.01))
aa = intersect(find(mstacked(:, 5)>kc_calib3-0.01), find(mstacked(:, 5)<kc_calib3+0.01))
intersect(aa, bb)help tol
help tol
mstacked(ans, :)
kc_calib3 = medn(5) %use medians
P_calib3 = medn(6) %use medians
exp(mstacked(ans, :))
exp(mstacked(cc, :))
exp(kc_calib3, P_calib3])
exp([kc_calib3, P_calib3])
close all
((envrefID-1)*(nESSP + nESP)+1):(envrefID*(nESSP + nESP))
mstacked_calib
size(mstacked_calib)
mai
mai.estNames
help randperm
randperm(length(mstacked_calib), 1)
randperm(length(mstacked_calib), 2)
S = rng
mai.estNames
mai.estNames'
mstacked_calib(randperm(length(mstacked_calib), 2), :)
close all
explore_corr_gfp3ii_w_and_wo_cov_stage2
%-- 4/23/18, 3:30 PM --%
txtl_init
mcmc_init
explore_corr_gfp3ii_w_and_wo_cov_stage2
mai
marray_corr1 = mcmc_get_walkers({tstamp1}, {1:ri.nIter}, projdir);
marray_corr1 = marray_corr1(:, :, ceil(end/3):end);
mvarray = masterVecArray(marray_corr1, mai);
%-- 4/24/18, 2:50 AM --%
c = @cmucolors
c('ucla blue')
c('list')
plot(0:10, 0:10, 'color', c('wine'))
figure; plot(0:10, 0:10, 'color', c('wine'), 'linewidth', 3)
figure; plot(0:10, 0:10, 'color', c('wine'), 'linewidth', 6)
close all;
help plot
gca
whos
mi
mai.estNames
size(marray_corr1)
clear all
close all
clc
explore_corr_gfp3ii_w_and_wo_cov_stage2
whos
help scatter
help CaptureFigVid
60:90
[[260:-20:160 160*ones(1, 19) 160*ones(1, 7)] ;
[30*ones(1,6),30:-3:18 fliplr(60:3:78) fliplr(18:3:57) ]]
length(-180:10:10)
6:28
-180:3:(-180+3*23)
-180:3:(-180+3*22)
clc
ZZ21
cpol1
log(cpol1)
-130:-10:-300
[-130:-10:-300 ;
41*ones(1,18)]
explore_corr_gfp3ii_w_and_wo_cov
mai_corr1
close all
clc
clear all
mai_corr1
mvarray_corr2 = masterVecArray(marray_corr1, mai_corr1);
size(mvarray_corr2)
mai
size(marray_corr1)
mi2_corr1(1)
data_info_corr1
mai_corr1
mai_corr1.masterVector
exp(mai_corr1.masterVector)
cpol
rkcp
mi2_corr1(1).paramMaps(mi2_corr1(1).orderingIx, 1)
size(mvarray_corr1)
mi2_corr1(1)
close all
explore_corr_gfp3ii_w_and_wo_cov_stage2
mi2_corr1(1).emo
di(1)
mi2_corr1(1)
size(marrayOrd_corr2)
mi2_corr1(1).orderingIx
get(mi2_corr1(1).emo)
vii = get(mi2_corr1(1).emo. 'ValueInfo')
vii = get(mi2_corr1(1).emo, 'ValueInfo')
vii(1)
vii(2)
vii(3)
vii(4)
vii(5)
marrayOrd_corr2(:,end,end)
exp(marrayOrd_corr2(:,end,end))
size(marray_corr1)
size(squeeze(marray_corr1))
mcr1 = (squeeze(marray_corr1));
mcr1 = (squeeze(marray_corr1(:)));
mcr1(end-20 : end)
figure; histogram(mcr1(end-20 : end))
figure; histogram(mcr1(end-20 : end), 100)
figure; histogram(mcr1, 100)
explore_corr_gfp3ii_w_and_wo_cov_stage2
idxnotused
p.nSimCurves
pointstouse
size(simspreadst)
squeeze(simspreadst(:,1,1,3))
squeeze(simsummst(:,1,1,3))
em
vii = get(em, 'ValueInfo')
iii = 1:5; vii(iii).Name
m(end-10 : end, :)
ms{1}
dose
explore_corr_gfp3ii_w_and_wo_cov_stage2
da
sd.data
sd
sd.Name
get(sd)
get(sd.DataNames)
(sd.DataNames)
ms{ss}
sd.data(:,4)
format short g
sd.data(:,4)
dose(i,:)']
dose(i,:)'
[exp(m(end - kk+1,:)'); dose(i,:)']
[(m(end - kk+1,:)'); dose(i,:)']
sd = simulate(em, [exp(m(end - kk+1,:)'); dose(i,:)'])
sd.data(:,4)
sd.Time
m(end - kk+1,:)
sd
sbioplot(sd)
sd = simulate(em, [exp(m(end - 1+1,:)'); dose(i,:)']);
sbioplot(sd)
explore_corr_gfp3ii_w_and_wo_cov_stage2
sbioplot(sd)
explore_corr_gfp3ii_w_and_wo_cov_stage2
close all
clear all
clc
%-- 4/24/18, 10:36 AM --%
txtl_init
mcmc_init
whos
tstamp_corr
size(marray_corr1)
mai_corr2
explore_corr_tetRi_w_and_wo_cov_stage2
tstamp_corr
projdir_corr1
simdata_20180423_193707
explore_corr_tetRi_w_and_wo_cov_stage2
whos
tstamp_corr
projdir_corr1
explore_corr_tetRi_w_and_wo_cov_stage2
[nrows, ncols] = p.subplot_arrangement
[nrows, ncols] = deal(p.subplot_arrangement)
explore_corr_tetRi_w_and_wo_cov_stage2
close all
explore_corr_tetRi_cov_st2_cs3sharedCSP
explore_corr_tetRi_w_and_wo_cov_stage2
close all
explore_corr_tetRi_w_and_wo_cov_stage2
close all
explore_corr_tetRi_cov_st2_cs3sharedCSP
%-- 4/25/18, 4:15 AM --%
di
di(1)
activeNames2 = {...
'TX_elong_glob'                     10.5       [0.5 30]
'AGTPdeg_time'                      7200        [1800 18000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]
'TXTL_P70_RNAPbound_Kd'             20          [10 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 100]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 10]
'TXTL_NTP_RNAP_1_Kd'                100000      [10 1e8]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-7 10]
'TXTL_NTP_RNAP_2_Kd'                1e6         [10 1e8]
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-7 10]
'TXTL_RNAdeg_Kd'                    2000        [100 10000]
'TXTL_RNAdeg_F'                     0.01        [0.1 1000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]
'RNAP'                              100         [5 500]
'RNase'                             100         [10 1000]
'TL_elong_glob'                     20          [4 200]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]
'TXTL_UTR_UTR1_Kd'                  20          [1 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 10]
'TL_AA_Kd'                          100000      [10 1e8]
'TL_AA_F'                           0.001       [1e-5 1]
'TL_AGTP_Kd'                        100000      [1e2 1e8]
'TL_AGTP_F'                         1e-5        [1e-7 1]
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 2000]
'Ribo'                              30          [5 1000]};
activeNames2(:,3)
cell2mat(activeNames2(:,3))
format short g
cell2mat(activeNames2(:,3))
log(cell2mat(activeNames2(:,3)))
mean(log(cell2mat(activeNames2(:,3))), 2)
activeNames2(:,1)
activeNames2 = {...
'TX_elong_glob'                     10.5       [0.5 30]
'AGTPdeg_time'                      7200        [1800 18000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]
'TXTL_P70_RNAPbound_Kd'             20          [10 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 100]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 10]
'TXTL_NTP_RNAP_1_Kd'                100000      [10 1e8]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-7 10]
'TXTL_NTP_RNAP_2_Kd'                1e6         [10 1e8]
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-7 10]
'TXTL_RNAdeg_Kd'                    2000        [100 10000]
'TXTL_RNAdeg_F'                     0.01        [0.1 1000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]
'RNAP'                              100         [5 500]
'RNase'                             100         [10 1000]
'TL_elong_glob'                     20          [4 200]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]
'TXTL_UTR_UTR1_Kd'                  20          [1 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 10]
'TL_AA_Kd'                          100000      [10 1e8]
'TL_AA_F'                           0.001       [1e-5 1]
'TL_AGTP_Kd'                        100000      [1e2 1e8]
'TL_AGTP_F'                         1e-5        [1e-7 1]
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 2000]
'Ribo'                              30          [5 1000]};
mean(log(cell2mat(activeNames2(:,3))), 2)
mi
mi.orderingIx
mean(log(cell2mat(activeNames2(mi(2).orderingIx,3))), 2)
[mi(1).orderingIx mi(2).orderingIx]
size(mi(2).orderingIx)
size(mi(1).orderingIx)
mai.estNames
proj_acs_dsg2014_regen_A
explore_acsdsg2014_regen_A
mai
mai.paramRanges
mai.estNames
size(marray)
pnamelist = {'TX_e', 'tau', 'prom_{Kd}', 'prom_F', 'TX_{term}', 'NTP_{Kd1}',...
'NTP_{F1}',  'NTP_{Kd2}' 'NTP_{F2}', 'RNase_{Kd}', ' RNase_F', 'RNase_{kc}', ...
'RNAP', 'RNase', 'TL_e', 'UTR1_{Kd}', 'UTR1_F', 'AA_{Kd}', 'AA_F', 'TLatp_{Kd}', ...
'TLatp_{F}', 'TL_{term}', 'Ribo'}
clc
diff(p.support(1:2,r))>0
set(gca,'Ylim',p.support(1:2,r))
diff(p.support(1:2,r))>0
help diff
mai.estNames
mai.paramRanges
exp(9.78)
close all
clc
clear all
size(marray)
help isprime
ndims(marray_initial)
clc
pnamelist'
[(1:23)' pnamelist']
(1:23)'
mat2cell((1:23)')
num2cell((1:23)')
[num2cell((1:23)') pnamelist']
[13 1 3 4 6 7 8 9 5 23 15 16 17 18 19 20 21 22 14 10 11 12 2]
reordering = [13 1 3 4 6 7 8 9 5 23 15 16 17 18 19 20 21 22 14 10 11 12 2];
pnamelist(reordering)'
pnamelist
size(pIXtoPlot, 1)
pIXtoPlot{ii}
pIXtoPlot{2}
explore_acsdsg2014_regen_A
size(marray_end(pIXtoPlot{ii}, :, :))
(marray_end(pIXtoPlot{ii}, :, end))
explore_acsdsg2014_regen_A
ss = get(0, 'screensize');
figure
set(gcf, 'Position', [50 50 ss(3)/1.1 ss(4)/1.2]);
ss = get(0, 'screensize');
figure
set(gcf, 'Position', [50 50 ss(3)/1.1 ss(4)/1.1]);
set(gcf, 'Position', [50 50 ss(3)/1.1 ss(4)/1.05]);
set(gcf, 'Position', [50 50 ss(3)/1.1 ss(4)/1.2]);
set(gcf, 'Position', [50 50 ss(3)/1.1 ss(4)/1.1]);
set(gcf, 'Position', [50 50 ss(3)/1.1 ss(4)/1.15]);
set(gcf, 'Position', [50 50 ss(3)/1.05 ss(4)/1.15]);
set(gcf, 'Position', [ss(3)*(1-1/1.05) ss(4)*(1-1/1.15) ss(3)/1.05 ss(4)/1.15]);
close al
close all
whos
help clf
close all
ss = get(0, 'screensize');
figure
set(gcf, 'Position', [ss(3)*(1-1/1.05) ss(4)*(1-1/1.15) ss(3)/1.05 ss(4)/1.15]);
['/Users/vipulsinghal/Dropbox/Documents/toolbox/'...
'txtlsim_vsfork2017/mcmc_simbio/projects/'...
'proj_acs_dsg2014_regen_A/simdata_' tstouse_cell{1}]
MAI
mai
mi
mi(2)
mi(1)
size(mvarray)
marrayOrd
size(marrayOrd)
mi
mi(1)
mi(1).dosedVals
num2str(mi(1).dosedVals)
num2str(mi(1).dosedVals(1))
dn
j
size(mi(1).dosedVals, 1)
dv
newcell
dn{1}
[dn{1} ' = ' num2str(dv(1, i))]
newcell
clear newcell
size(mi(1).dosedVals, 2)
titlz
clc
close all
edit mcmc_runsim
edit mcmc_runsim_v2.m
dosedNames1 = {'RNA utr1--deGFP'};
dosedVals1 = [37.5 75 150 200 600 700 800 900 1000];
dosedNames2 = {'DNA p70--utr1--deGFP'};
dosedVals2 = [0.5 2 5 20];
doseWeights1 = sqrt(dosedVals1(end)/dosedVals1).*dosedVals1
%% next we define the dosing strategy.
dosedNames1 = {'RNA utr1--deGFP'};
dosedVals1 = [37.5 75 150 200 600 700 800 900 1000];
dosedNames2 = {'DNA p70--utr1--deGFP'};
dosedVals2 = [0.5 2 5 20];
doseWeights1 = sqrt(dosedVals1(end)*(ones(size(dosedVals1))./dosedVals1)).*dosedVals1
doseWeights1/sum(doseWeights1)
dosedVals1/sum(dosedVals1)
plot(1:9, doseWeights1/sum(doseWeights1), 'b', 1:9,  dosedVals1/sum(dosedVals1), 'r')
figure; plot(1:9, doseWeights1/sum(doseWeights1), 'b', 1:9,  dosedVals1/sum(dosedVals1), 'r')
dosedNames1 = {'RNA utr1--deGFP'};
dosedVals1 = [37.5 75 150 200 600 700 800 900 1000];
dtempvec = sqrt(dosedVals1(end)*(ones(size(dosedVals1))./dosedVals1)).*dosedVals1;
doseWeights1 = dtempvec/(sum(dtempvec));
dosedNames2 = {'DNA p70--utr1--deGFP'};
dosedVals2 = [0.5 2 5 20];
dtempvec = sqrt(dosedVals2(end)*(ones(size(dosedVals2))./dosedVals2)).*dosedVals2;
doseWeights2 = dtempvec/(sum(dtempvec));
doseWeights2
dosedVals2/sum(dosedVals2)
help isfield
s = struct('one',1,'two',2);
fields = isfield(s,{'two','pi','One',3.14})
A = magic(3)
B = ones(3)
isequal(size(A), size(B))
isequal(size(A), [3 size(B,2)])
[mi,mai, ri, tstamp, projdir, di]  = proj_acs_dsg2014_regen_A;
edit plotCustomSpecies2.m
%-- 4/28/18, 6:43 AM --%
ixexp4
ixexp4{1}
ixexp4{2}
ixexp4{2}'
ixexp4{1}'
ixexp4{3}
ixexp4{3}'
dMGA
ixexp4
la4
la4.text
la4.text{1}
t
t/3600
ixexp4
dG(ixexp4{1})
dG(:,ixexp4{1})
plot(dG(:,ixexp4{1}))
close all
plot(dG(:,ixexp4{1}))
plot(t,dG(:,ixexp4{1}))
plot(t/3600,dG(:,ixexp4{1}))
help permute
s = struct('a', {1 2}, 'b', 3)
a(1)
s(1)
s(2)
s = struct('a', {1 2}, 'b', {3})
s(2)
a(1)
s(1)
ymg
max(ymg)
max(ygfp)
format short g max(ygfp)
format short g; max(ygfp)
ixexp4{1}
ixexp4{1}(4)
deGFP_vs_20nM_max = max(dG(:,ixexp4{1}(4)))
di
close all; plot(di(1).timeVector, di(1).dataArray(:,1,1,1))
close all; plot(di(1).timeVector, di(1).dataArray(:,1,1,6))
close all; plot(di(3).timeVector, di(3).dataArray(:,1,1,6))
close all; plot(di(3).timeVector, di(3).dataArray(:,2,1,6))
cc = cmucolors
cc = cmucolors('list')
%-- 5/15/18, 5:27 AM --%
DG
dG
clc
size(dG)
t
t/3600
t/3600<=1.6
t(t/3600<=1.6)
t(t/3600<=1.61)
t(t/3600<=1.61)/3600
t(t/3600<=1.6)/3600
help order
order(14)
14/10^1
ceil(1.4)
ceil(2*1.4)
ceil(2*1.4)/2
plot_data_20170616
Ch3_1b
help catMC
edit catMC
%-- 5/17/18, 1:34 PM --%
txtl_init
mcmc_init
da(:,1,i,1)...
+randn(length(data_info_corr1.timeVector), 1)*50
day(:,1,i,1)...
+randn(length(data_info_corr1.timeVector), 1)*50
clc
size(marray_corr1)
tstamp_corr
ri_corr1.nIter
mi
mi2_corr1
ri_corr1
mai_corr1
data_info_corr1
size(marray_corr1)
mtemp = mcmc_get_walkers({tstamp_corr}, {1:ri_corr1.nIter}, projdir_corr1);
size(mtemp)
mai_corr1
edit mcmc_trajectories.m
c
c('list')
help max
[expsummst(:,1,1,1)+randn(length(tv), 1)*50, zeros(length(tv))]
size([expsummst(:,1,1,1)+randn(length(tv), 1)*50, zeros(length(tv))])
size(max([expsummst(:,1,1,1)+randn(length(tv), 1)*50, zeros(length(tv),1)])
size(max([expsummst(:,1,1,1)+randn(length(tv), 1)*50, zeros(length(tv),1)]))size
size(max([expsummst(:,1,1,1) + randn(length(tv), 1)*50, zeros(length(tv),1)]))*size
size(max([expsummst(:,1,1,1)+randn(length(tv), 1)*50, zeros(length(tv),1)])
size([expsummst(:,1,1,1)+randn(length(tv), 1)*50, zeros(length(tv),1)])
c('wild strawberry')
help legends
get(gca)
get(gca, 'YAxis')
gca.YAxis.FontSize
gca
get(gca)
set(gca, 'YAxis')
set(gca, 'YAxis', 'FontSize', 14)
clear gca
di
clc
expsummst
marrayOrd_stacked(paramid2,:)
cpol1
log(cpol1)
log(rkcp1)
mcmc_info_corr2
clear all
clc
ch3_f6
close all
break
clear all
return
help axes
ch3_f6
close all
clear all
clc
ch3_f6
close all
ch3_f6
close all
clc
clear all
ch3_f6
close all
explore_corr_tetRi_w_and_wo_cov_stage2
whos
mi2_corr1.dosedVals
ch3f6b
close all
data_info
data_info_corr1
ch3_f6c
close all
clear all
clc
ch3f6b
explore_corr_tetRi_w_and_wo_cov_stage2
size(marray_corr1)
size(mvarray_corr1)
ch3f6b
cloear all
clear all
clc
ch3f6b
close all
ch3f6b
mi
paramid_calib
varargin{:}
varargin{:}{1}
varargin{:}
[da, idxnotused] = simulatecurves(mi(1).emo,...
marrayOrd_stacked(paramid_calib,:), ...
length(paramid_calib),...
mi(1).dosedVals',...
data_info.timeVector,...
mi(1).measuredSpecies);
data_info.timeVector
data_info
mi(1).paramMaps(mi(1).orderingIx, 2)
mi(1).paramMaps(mi(1).orderingIx, :)
mai
pwd
[projdir_corr1 '/simdata_' tstamp_corr]
ch3_f6
close all
ch3_f6
close all
%-- 5/25/18, 12:27 PM --%
simbiology
edit txtl_prom_ptet.m
geneexpr
%-- 7/24/18, 7:18 PM --%
geneexpr_test_regen_mode
negautoreg
incoherent_ff_loop
%-- 7/27/18, 8:16 AM --%
path
%-- 7/28/18, 5:45 PM --%
txtl_init
mcmc_init
edit proj_protein_constgfp3i.m
edit txtl_tutorial.m
%-- 7/30/18, 12:40 PM --%
help mcmc_info
clc
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
clc
help mcmc_info
clc
help mcmc_info
edit mcmc_info_constgfp3ii.m
edit mcmc_info_constgfp3i.m
{'kfdG'
'krdG'
'kfdT'
'krdT'
'kfdimTet'
'krdimTet'
'kfseqTet'
'krseqTet'
'kcp'
'pol'}
'pol'}'
{'kfdG'
'krdG'
'kfdT'
'krdT'
'kfdimTet'
'krdimTet'
'kfseqTet'
'krseqTet'
'kcp'
'pol'}'
aaa = [{'kfdG'}    {'krdG'}    {'kfdT'}    {'krdT'}    {'kfdimTet'}    {'krdimTet'}    {'kfseqTet'}    {'krseqTet'}    {'kcp'}    {'pol'}]
aaa([2 4 6 8 9 10])
proj_mcmc_tutorial
close all
clear all
clc
%-- 8/2/18, 6:16 PM --%
txtl_init
mcmc_init
proj_mcmc_tutorial
edit proj_protein_constgfp3i.m
proj_protein_constgfp3i
size(logP)
help shiftdim
shiftdim(logP, 1)
logPfuns
logPfuns{1}
logPfuns{2}
shiftdim(logP, 1)
all(all(isfinite(logP(:,:,1))))
p.ThinChain
logrand(fix+1,wix)>proposedlogP(fix)-curlogP(fix,wix)
~isreal(proposedlogP(fix))
isnan(proposedlogP(fix))
row
logP(:,:,row)
models(:,:,row)
proposedlogP(fix)
help logrand
logrand
proposedm(:,wix)
logPfuns{fix}(proposedm(:,wix))
proj_protein_constgfp3i
mcmc_info_constgfp3i
proj_protein_constgfp3i
proj_mcmc_tutorial
close all
clear all
clcl
clc
proj_mcmc_tutorial
proj_mcmc_tutorial_II
mi
mi.orderingIx
mi.orderingIx2
proj_mcmc_tutorial_II
clear all
close all
clc
proj_mcmc_tutorial_II
close all
proj_mcmc_tutorial_III
mi
mi(1)
mi1
mi1(1)
mi1(2)
mi = mi1
proj_mcmc_tutorial_III
close
close all
clear all
clc
proj_mcmc_tutorial_III
projdir
proj_mcmc_tutorial_III
%-- 8/3/18, 3:16 PM --%
txtl_init
mcmc_init
proj_mcmc_tutorial_III
clc
close all
clear all
clc
proj_mcmc_tutorial_III
%-- 8/6/18, 6:22 PM --%
ls
test015_estimation
st
test015_estimation
help dbstack
test015_estimation
%-- 8/9/18, 10:47 PM --%
test015_Corr_withoutCSPfixing
close all
clear all
clc
test015_Corr_withoutCSPfixing
close all
alpha
cc
mstacked(cc, :)
test_Corr_alt
mstacked
size(mstacked)
hist(mstacked(:, 1))
figure; hist(mstacked(:, 1))
help hist
figure; hist(mstacked(:, 1), 20)
figure; hist(mstacked(:, 2), 20)
figure; hist(mstacked(:, 3), 20)
test_Corr_alt
randperm(100, 1)
test_Corr_alt
rng(42)
medians_converged_calib = mstacked(randperm(size(mstacked, 1), 1), : )
rng(42)
randperm(size(mstacked, 1), 1)
rng(42)
randperm(size(mstacked, 1), 1)
test_Corr_alt
size(medians_converged_calib = mstacked(randperm(size(mstacked, 500), 1), : ))
size(mstacked(randperm(size(mstacked, 500), 1), : ))
size(mstacked(randperm(size(mstacked, 1), 500), : ))
test_Corr_alt
medians_converged_calib2
exp([1.1813    0.1407])
exp([1.2737    0.2829])
valid_indices
test_Corr_alt
whos
RR11
RR12
normreduced_cspfix
alpha_cspfix
normorig
help min
test015_estimation_v1
['save(''t015_calib_' datestring '_' num2str(i) ''');']
calib_point
size(minit)
clc
corr_SD
corr_SD2 = corrSD(round(end/2):end)
corr_SD2 = corr_SD(round(end/2):end)corr_SD2 = corr_SD(round(end/2):end)
corr_SD2 = corr_SD(round(end/2):end)
clc
test015_estimation_v1
help round
size(mcat(:,:,round(end/1.5):end))
size(mcat(:,:,:))
corr_SD(round(end/2):end)
clc
help format
Htrans'*S
Htrans(:,1)'
Htrans(:,1)'*S
null(S')
Htrans
Sr*Srinv
Ms
Ms.'
x(1)
close all
help deal
[A, B, C, D, E, F, G, J, K, L, X]'
Sr
%-- 8/20/18, 6:31 PM --%
txtl_init
mcmc_init
edit proj_mcmc_tutorial_II.m
[pwd '/mcmc_simbio/projects/proj_mcmc_tutorial_II/simdata_20180802_221756/full_variable_set_20180802_221756.mat']
whos
specificproj
tstamp
mi
di = data_info
close al
close all
edit mcmc_info
test_Corr
meanvals_corrstep2(:, msid, i, 1)
correction_data(1:13,msid, i, envrefID)
correction_data(1:13,msid, i, envrefID)*1000
test_Corr
%-- 10/20/18, 3:28 PM --%
txtl_init
mcmc_init
dir('/mcmc_simbio)
dir('/mcmc_simbio')
dir /mcmc_simbio
ls
dir mcmc_simbio/
dir mcmc_simbio/exp_data/
edit data_dsg2014.m
dir mcmc_simbio/src/
edit data_artificial_v2.m
dir mcmc_simbio/
dir mcmc_simbio/models_and_supporting_files/
edit mcmc_info_constgfp3ii
proj_tierra2018_calibration
edit data_info.m
proj_tierra2018_calibration
help permute
shiftdim
help shiftdim
proj_tierra2018_calibration
data_info
di
di(3)
proj_tierra2018_calibration
di(3)
proj_tierra2018_calibration
help deal
proj_tierra2018_calibration
di
di(3)
di(3).dataArray
proj_tierra2018_calibration
edit data_artificial_v2.m
currdi.measuredNames{msnum}{1:end}
currdi.measuredNames
currdi.measuredNames{msnum}
class(currdi.measuredNames{msnum})
proj_tierra2018_calibration
%-- 11/3/18, 12:58 PM --%
txtl_init
mcmc_init
close all
projdir
proj_tierra2018_calibration
close all
clear all
clc
proj_tierra2018_calibration
ls
who
mi
size(marray)
close all
%-- 11/4/18, 10:28 AM --%
txtl_init
mcmc_init
proj_tierra2018_calibration
%-- 11/4/18, 1:20 PM --%
txtl_init
mcmc_init
edit mcmc_runsim_v2.m
proj_tierra2018_calibration
%-- 12/13/18, 5:38 PM --%
txtl_init
geneexpr
%-- 12/13/18, 5:46 PM --%
appdesigner
license
license('inuse')
vet
ver
%-- 12/16/18, 5:47 AM --%
txtl_init
geneexpr
%-- 12/17/18, 9:57 AM --%
appdesigner
%-- 1/18/19, 10:27 PM --%
MERFISHAnalysisPath
merfish_startup
pwd
ls
edit startup
dir startup
edit('startup/merfish_startup.m')
ls
pwd '/startup/merfish_startup'
pwd /startup/merfish_startup
pwd /startup/merfish_startup.m
addpath([pwd '/startup/'])
merfish_startup
restoredefaultpath
addpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB');   % MATLAB directory
addpath('/Users/vipulsinghal/Dropbox/Documents/a_Research/bioinformatics/MERFISH/MERFISH_analysis/startup'); % Location of any startup script
pwd
library_design_example
%-- 1/23/19, 7:30 AM --%
library_design_example
ver
help fastaread
library_design_example
rRNAtRNAPath
restoredefaultpath
path
library_design_example
restoredefaultpath
library_design_example
rRNAtRNAPath
fastaread(rRNAtRNAPath)
strread(filename,'%s','delimiter','\n');
library_design_example
fastaread(rRNAtRNAPath)
library_design_example
LoadCodebook(codebookPath)
library_design_example
LoadCodebook(codebookPath)
nargin
exist(codebookPath)
LoadCodebook(codebookPath)
library_design_example
delete(p)
gcp(p)
clear all
clc
close all
restoredefaultpath
library_design_example
beep()
numProbesPerGene
finalIds
~exist(oligosPath)
tRegion
library_design_example
finalIds
readouts(barcodes(i,:)==1)
readouts(barcodes(i,:)==1)(1)
readouts(barcodes(i,:)==1){1}
aaa = readouts(barcodes(i,:)==1)
aaa
aaa(1)
possibleReadouts
possibleReadouts(1)
targetRegions
targetRegions(1)
targetRegions(2)
targetRegions(3)
targetRegions(4)
targetRegions(5)
finalTargetRegions
ismember({targetRegions.id}, finalIds)
finalIds
targetRegions.id
{targetRegions.id}
finalIds
targetRegions.id
trRegionsPath
{targetRegions.id}
finalIds
finalIds(11:end)
{targetRegions.id}
finalIds(11:end)'
{targetRegions.id}'
whos
ids
TargetRegions.Load(trRegionsPath)
ismember({targetRegions.id}, finalIds)
{targetRegions.id}'
finalIds(11:end)'
TRDesigner
library_design_example
obj.transcriptome
obj.transcriptome.GetInternalInds
parameters
obj.transcriptome.GetInternalInds('parameters', parameters)
library_design_example
idsByName
idsByName{1}
idsByName{1}'
idsByName{2}'
idsByName{3}'
idsByName{4}'
names
i
idsByName{i}
transcriptome.Slice('geneID', idsByName{i})
localTranscriptome = transcriptome.Slice('geneID', idsByName{i}
localTranscriptome = transcriptome.Slice('geneID', idsByName{i})
obj.GetInternalInds('geneID', parameters.geneID)
inds
obj.ids
obj.ids(inds)
obj.geneNames(inds)
obj.geneNames
obj.intSequences
obj.intSequences(inds)
obj.intSequences(inds){1}
obj.intSequences{inds}
obj.intSequences(inds)
obj.intSequences
obj.abundance(inds)
transcriptome
localTranscriptome = transcriptome.Slice('geneID', idsByName{i})
obj.ids(inds)
obj.ids(inds)'
isoSpecificityTables
SetParallel(obj, parameters.parallel)
nargin
class(nargin)
class(targetSequences)
targetSequences.intSequences
targetSequences.intSequences{1}
p
ppool
obj
set(obj)
properties(obj)
obj.data
obj.hashBase
library_design_example
isoSpecificityTables
isoSpecificityTables(1)
isoSpecificityTables(2)
isoSpecificityTables(2).data
transcriptome.data
transcriptome.numGenes
transcriptome
transcriptome.geneNames
transcriptome.ids
transcriptome.GetAbundanceByID(ids)
transcriptome.GetAbundanceByID(transcriptome.ids)
obj.id2Ind
library_design_example
help writetable
table
help table
finalIds
targetRegions.id
{targetRegions.id}
slicedTranscriptome
library_design_example
GC(1, 1)
GC{1, 1}
penalties(1, 1, 1)
penalties{1, 1, 1}
library_design_example
targetRegions = trDesigner.DesignTargetRegions(...
'regionLength', 25, ...
'GC', [20 75]/100, ...
'Tm', [58 80], ...
'isoSpecificity', [0.4 1], ...
'specificity', [0.4 1], ...
'OTTables', {'rRNA', [0, 0]});
% NOTE: The ranges above were determined empirically to strike
% the proper balance between stringency (narrow ranges) and
% sufficient probe numbers to target the desired genes. We
% recommend scanning many different ranges to identify the
% optimal for each application.
display(['... completed: ' datestr(now)]);
% Save target regions
targetRegions.Save(trRegionsPath);
library_design_example
oligosPath
library_design_example
tr_ids = {targetRegions.ids}';
tr_ids = {targetRegions.id}';
tr_ids(1:10)
tr_ids(1:30)
length(tr_ids)
length(finalIds)
length(goodIDs)
length(ids)
length({targetRegions.id})
find(ismember({targetRegions.id}, finalIds))
finalIds
library_design_example
%-- 1/23/19, 6:16 PM --%
library_design_example
length({targetRegions.id})
transcriptome
finalIds
finalIds'
{targetRegions.geneName}
{targetRegions.geneName}'
[{targetRegions.geneName}' {targetRegions.id}']
finalIds
[{codebook.name}' {codebook.id}' ]
library_design_example
%-- 1/23/19, 6:52 PM --%
library_design_example
path
%-- 1/24/19, 9:56 AM --%
library_design_example
rRNAtRNA
rRNAtRNA(1)
rRNAtRNA(400)
rRNAtRNA(401)
rRNAtRNA(401isoSpecificityTablePath)
isoSpecificityTablePath
goodIDs
transcriptome.ids'
transcriptome.name
transcriptome.names
transcriptome.Names
targetRegions
targetRegions.id
library_design_example
whos
clear all
close all
clc
txtl_som
txtl_sim
txtl_init
ls
pwd
ls
dir mcmc_simbio/
dir mcmc_simbio/projects/
mcmc_init
edit proj_VNPRL.m
edit proj_VNPRL_mrna.m
proj_VNPRL
mobj
edit sbiomodel
clc
mcmc_info_vnprl2011_mrna(mobj)
clc
mcmc_info_vnprl2011_mrna(mobj)
ans
aa = ans
aa
aa(1)
aa.runsim_info
aa.model_info
aa.model_info.circuitInfo
%-- 1/30/19, 8:50 PM --%
txtl_init
mcmc_init
edit proj_acs_dsg2014_regen_A.m
edit gwmcmc_vse.m
edit gen_residuals_v2.m
edit mcmc_runsim_v2.m
edit gwmcmc_vse_origjan30_19.m
a = false
a
-1/a
a = true
-1/a
lhsdesign(10, 4)
scatter(lhsdesign(10, 4))
help scatter
lhsdesign(10, 2)
lll = lhsdesign(10, 2)
scatter(lll(:,1), lll(:,2))
help scatter
ll = lhsdesign(10, 3)
ll = lhsdesign(100,3); scatter3(ll(:,1), ll(:,2), ll((L,3))
ll = lhsdesign(100,3); scatter3(ll(:,1), ll(:,2), ll((:,3))
ll = lhsdesign(100,3); scatter3(ll(:,1), ll(:,2), ll(:,3))
ll = lhsdesign(10,3); scatter3(ll(:,1), ll(:,2), ll(:,3))
ll = lhsdesign(10,2); scatter(ll(:,1), ll(:,2))
help lhsdesign
figure
x = lhsdesign(100,2);
subplot(2,2,1); plot(x(:,1), x(:,2), 'o');
subplot(2,2,2); hist(x(:,2));
subplot(2,2,3); hist(x(:,1));
figure; x=rand(100,2)
subplot(2,2,1); plot(x(:,1), x(:,2), 'o');
subplot(2,2,2); hist(x(:,2));
subplot(2,2,3); hist(x(:,1));
%-- 1/31/19, 7:07 PM --%
txtl_init
mcmc_init
path
clc
%-- 1/31/19, 8:10 PM --%
txtl_init
mcmc_init
edit proj_acs_dsg2014_regen_A.m
edit gwmcmc_vse.m
-Inf >-Inf
-Inf >-Inf-1
log(rand(3,6))
eps
figure; hist(log(rand(1, 1000)))
figure; hist(log(rand(1, 1000000000)))
figure; hist(log(rand(1, 10000000)))
figure; hist(log(rand(1, 10000000)), 100)
figure; hist(log(rand(1, 100000000)), 100)
edit mcmc_runsim_v2.m
edit proj_mcmc_tutorial_II.m
proj_mcmc_tutorial_II
logP(2,:,1)
format short g; logP(2,:,1)
format short g; logP(2,1,1)
format short
format short g; logP(2,1,1)
format short g; logP(2,1,1)/2e6
edit gen_residuals_v2.m
logPfuns{2}(minit(:,1))
res
stdev
logresvec(res, stdev)
stdev = 2e6
logresvec(res, stdev)
logresvec
stdev = 2e6
res
res/stdev
logresvec
(res/stdev).^2
(res/stdev).^2-log(sqrt(2*pi)).*stdev
-log(sqrt(2*pi)).*stdev
stdev = 10
(res/stdev).^2-log(sqrt(2*pi)).*stdev
stdev = 1
(res/stdev).^2-log(sqrt(2*pi)).*stdev
-log(sqrt(2*pi)).*stdev
(res/stdev).^2
stdev = 10000
%-- 2/1/19, 3:56 PM --%
txtl_init
mcmc_init
tstamp
data_info
ri
projdir
[pwd '/mcmc_simbio/projects/proj_mcmc_tutorial_II']
prevtstamp = '20190131_181526'
ri.nW
size(marray_cut, 2)
size(marray_cut)
size(marray_cut,3)
ceil(size(marray_cut,3)/2)
linspace(1, size(marray_cut,3))
linspace(1, size(marray_cut,3), 4)
linspace(1, size(marray_cut,3), ceil(ri.nW/size(marray_cut, 2)))
ceil(linspace(1, size(marray_cut,3), ceil(ri.nW/size(marray_cut, 2))))
ceil(linspace(1, size(marray_cut,3), ceil(ri.nW/size(marray_cut, 2))+1))
(linspace(1, size(marray_cut,3), ceil(ri.nW/size(marray_cut, 2))+1))
ceil(linspace(1, size(marray_cut,3), ceil(ri.nW/size(marray_cut, 2))+1))
ceil(linspace(1, size(marray_cut,3), ceil(ri.nW/size(marray_cut, 2))))
ceil(linspace(ceil(size(marray_cut,3))/2, size(marray_cut,3), ceil(ri.nW/size(marray_cut, 2))))
pID = 1:length(mai.estNames);
marray_cut = mcmc_cut(marray, pID, flipud((mai.paramRanges)'));
marray_cut
minit
hist(minit91,:))
hist(minit(1,:))
figure; hist(minit(1,:))
figure; hist(minit(2,:))
pID
(mai.paramRanges)
(mai.paramRanges)'
size(marray)
flipud((mai.paramRanges)')
%-- 2/2/19, 1:11 PM --%
txtl_init; mcmc_init;
edit proj_acs
edit proj_acs_dsg2014_regen_A.m
edit proj_mcmc_tutorial_III.m
edit proj_mcmc_tutorial_II.m
size(marray)
size(marray2)
size(marray1)
help cat
help load
load([pwd '/mcmc_simbio/projects/proj_mcmc_tutorial_II/'...
'simdata_' tstamptouse '/full_variable_set_' tstamptouse], 'mi')
load([pwd '/mcmc_simbio/projects/proj_mcmc_tutorial_III/'...
'simdata_' tstamptouse '/full_variable_set_' tstamptouse], 'mi')
mi
clc
clear all
txtl_init
mcmc_init
di
sum(sum(squeeze(di(1).dataArray)))
sum(sum(sum(squeeze(di(1).dataArray))))
sum(sum(sum(squeeze(di(1).dataArray))))+sum(sum(sum(squeeze(di(2).dataArray))))
sum(sum(sum(squeeze(di(1).dataArray))))
sum(sum(sum(squeeze(di(2).dataArray))))
di(2)
di(3)
sum(sum(sum(squeeze(di(3).dataArray))))
sum(sum(sum(squeeze(di(1).dataArray))))
help setparam
%-- 2/3/19, 3:38 PM --%
txtl_init
mcmc_init
edit proj_VNPRL_mrna.m
pwd
activeNames1 = {...
'TXTL_RNAdeg_Kd'                    2000        [100 10000]
'TXTL_RNAdeg_F'                     0.02        [0.01 100]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]
'RNase'                             100         [10 1000]};
activeNames2 = {...
'TX_elong_glob'                     10.5       [0.5 100]
'AGTPdeg_time'                      7200        [1800 42000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]
'TXTL_P70_RNAPbound_Kd'             20          [10 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 100]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 10]
'TXTL_NTP_RNAP_1_Kd'                100000      [10 1e8]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-7 10]
'TXTL_NTP_RNAP_2_Kd'                1e6         [10 1e8]
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-7 10]
'TXTL_RNAdeg_Kd'                    2000        [100 10000]
'TXTL_RNAdeg_F'                     0.01        [0.1 1000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]
'RNAP'                              100         [5 500]
'RNase'                             100         [10 1000]
'TL_elong_glob'                     20          [4 200]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 10]
'TL_AA_Kd'                          100000      [10 1e8]
'TL_AA_F'                           0.001       [1e-5 20]
'TL_AGTP_Kd'                        100000      [1e2 1e8]
'TL_AGTP_F'                         1e-5        [1e-7 1]
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 2000]
'Ribo'                              30          [5 1000]};
estParamsIX = [1 2 5:17 19:26 ]';
estParams = activeNames2(estParamsIX,1);
estParams
proj_mcmc_tutorial_III
edit proj_mcmc_tutorial_III
help isvector
num2str(1.6505e+04)
num2str(1.6505e+04/10000)
regexp(num2str(1.6505e+04/10000), '.')
regexp(num2str(1.6505e+04/10000), '\.')
regexp(num2str(1.6505e+04), '\.')
tsig = 1.6505e+04
tladder = tsig*[0.1 0.001, 0.00001]
regexp(num2str(tladder), '\.')
num2str(tladder)
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 100, 'nPoints', 100*10, 'thinning', 2, 'nIter', 2, 'parallel', false, 'poolsize', 2, 'temperature_ladder', false)
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 100, 'nPoints', 100*10, 'thinning', 2, 'nIter', 2, 'parallel', false, 'poolsize', 2, 'temperatureLadder', false)
mexmex -setup -v
mexext -setup -v
mex -setup -v
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 100, 'nPoints', 100*10, 'thinning', 2, 'nIter', 2, 'parallel', false, 'poolsize', 2, 'temperatureLadder', false)
whos
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 100, 'nPoints', 100*10, 'thinning', 2, 'nIter', 2, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 100, 'nPoints', 100*10, 'thinning', 1, 'nIter', 2, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
specificproj
edit project_init
help addOptional
tstamp_appended
tstamp_appended = 'asdfad'
project_init('proj', tstamp_appended)
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 60, 'nPoints', 100*2, 'thinning', 1, 'nIter', 1, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 50, 'nPoints', 100*2, 'thinning', 1, 'nIter', 1, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
specificproj
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 50, 'nPoints', 100*2, 'thinning', 1, 'nIter', 1, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
proj_acs_dsg2014_regen_A
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 50, 'nPoints', 100*2, 'thinning', 1, 'nIter', 1, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
data_info
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 50, 'nPoints', 100*2, 'thinning', 1, 'nIter', 1, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
tstamptouse = tstamp_appended;
marray = mcmc_get_walkers({tstamptouse}, {1:ri.nIter}, projdir);
mcmc_plot(marray([1 2 4], :,:), mai.estNames([1 2 4]),...
'savematlabfig', false, 'savejpeg', true,...
'projdir', projdir, 'tstamp', tstamptouse);
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 50, 'nPoints', 100*2, 'thinning', 1, 'nIter', 1, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
prevtstamp
percentLadder
ll
specificprojdir
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 50, 'nPoints', 100*2, 'thinning', 1, 'nIter', 1, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
4*3200*100
16*3200
copy paste into the terminal if using matlab with no display.
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 1000, 'nPoints', 100*1000,...
'thinning', 2, 'nIter', 2, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
proj_acs_dsg2014_regen_A('stepSize', 1.3, 'nW', 1000, 'nPoints', 100*1000,...
'thinning', 2, 'nIter', 2, 'parallel', true, 'poolsize', 4, 'temperatureLadder', true)
dbstack
%-- 2/4/19, 12:30 AM --%
txtl_init
mcmc_init
di = data_dsg2014_full;
di
di(1)
di(3)
sum(sum(sum(di(3).dataArray)))
sum(sum(sum(di(1).dataArray)))
sum(sum(sum(di(1).dataArray)))/sum(sum(sum(di(3).dataArray)))
sum(sum(sum(di(3).dataArray)))/sum(sum(sum(di(1).dataArray)))
0.1/sum(sum(sum(di(3).dataArray)))/sum(sum(sum(di(1).dataArray)))
0.1/(sum(sum(sum(di(3).dataArray)))/sum(sum(sum(di(1).dataArray))))
sum(sum(sum(di(1).dataArray)))+sum(sum(sum(di(3).dataArray)))
(sum(sum(sum(di(1).dataArray)))+sum(sum(sum(di(3).dataArray))))/100
(0.1*sum(sum(sum(di(1).dataArray)))+sum(sum(sum(di(3).dataArray))))
(0.1*sum(sum(sum(di(1).dataArray)))+sum(sum(sum(di(3).dataArray))))/10
(0.1*sum(sum(sum(di(1).dataArray)))+sum(sum(sum(di(3).dataArray))))/1000
(0.1*sum(sum(sum(di(1).dataArray)))+sum(sum(sum(di(3).dataArray))))/100000
(0.1*sum(sum(sum(di(1).dataArray)))+sum(sum(sum(di(3).dataArray))))/1000
%-- 2/4/19, 2:39 PM --%
txtl_init;mcmc_init
size(marray)
clear all
load([projdir...
'simdata_' tstamptouse1 '/full_variable_set_' tstamptouse1])
tstamptouse1 = '10pct_20190203_173126';
tstamptouse2 = 'pt1pct_20190203_173126';
projdir = [pwd '/mcmc_simbio/projects/proj_acs_dsg2014_regen_A'];
load([projdir...
'simdata_' tstamptouse1 '/full_variable_set_' tstamptouse1])
whos
da
estParamIx
mi
mai
mcmc_info.model_info
ri
cfname
specificproj
who
loglike
mv
sigg
mai.estNames
parnames
size(mfinal)
mai.paramRanges(1:10,:)
linspace(1, 2, 4)
linspace(2,1, 4)
help isbool
help isboolean
help boolean
help isboolean
help islogical
help isnumeric
help isvector
myfun = @(x) isnumeric(x) && isvector(x)
myfun(linspace(2, 1, 4))
close all
5/4
round(5/4)
round(57/4)
round(7/4)
sprintf('step size ladder was: %d', [1 2 3])
sprintf(['step size ladder was:' num2str([1 2 3])])
sprintf(['step size ladder was: ' num2str([1 2 3])])
linspace(2, 1, 5)
linspace(2, 1, 5)*1.2
linspace(3, 1, 5)*1.2
proj_acs_dsg2014_regen_A('stepSize', 1.2, 'nW', 200, 'nPoints', ...
200*20, 'thinning', 1, 'nIter', 4, 'parallel', true, ...
'poolsize', 3, 'temperatureLadder', [0.5, 0.005 0.05 0.0005],...
'stepLadder', linspace(2, 1, 2))
proj_acs_dsg2014_regen_A('stepSize', 1.2, 'nW', 100, 'nPoints', ...
100*5, 'thinning', 1, 'nIter', 4, 'parallel', true, ...
'poolsize', 4, 'temperatureLadder', [0.5, 0.005 0.05 0.0005],...
'stepLadder', linspace(2, 1, 2))
proj_acs_dsg2014_regen_A('stepSize', 1.2,...
'nW', 50,...
'nPoints', 10*3,...
'thinning', 1,...
'nIter', 4,...
'parallel', true, ...
'poolsize', 4,...
'temperatureLadder', [0.5, 0.005 0.05 0.0005],...
'stepLadder', linspace(2, 1, 2))
prevtstamp
proj_acs_dsg2014_regen_A
>> proj_acs_dsg2014_regen_A('stepSize', 1.2,...
'nW', 50,...
'nPoints', 10*3,...
'thinning', 1,...
'nIter', 4,...
'parallel', true, ...
'poolsize', 4,...
'temperatureLadder', [0.5, 0.005 0.05 0.0005],...
proj_acs_dsg2014_regen_A('stepSize', 1.2,...
'nW', 50,...
'nPoints', 10*3,...
'thinning', 1,...
'nIter', 4,...
'parallel', true, ...
'poolsize', 4,...
'temperatureLadder', [0.5, 0.005 0.05 0.0005],...
'stepLadder', linspace(2, 1, 2))
SS.mcmc_info.runsim_info.nIter
proj_acs_dsg2014_regen_A('stepSize', 1.2,...
'nW', 50,...
'nPoints', 50*6,...
'thinning', 2,...
'nIter', 4,...
'parallel', true, ...
'poolsize', 4,...
'temperatureLadder', [0.5, 0.005 0.05 0.0005],...
'stepLadder', linspace(2, 1, 2))
2>=1
proj_acs_dsg2014_regen_A('stepSize', 1.2,...
'nW', 50,...
'nPoints', 50*3,...
'thinning', 1,...
'nIter', 4,...
'parallel', true, ...
'poolsize', 4,...
'temperatureLadder', [0.5, 0.005 0.05 0.0005],...
'stepLadder', linspace(2, 1, 2))
edit mcmc_info_dsg2014_regen_B.m
linspace(2, 1, 5)
linspace(2, 1, 4)
activeNames2 = {...
'TX_elong_glob'                     10.5       [0.5 100]
'AGTPdeg_time'                      7200        [1800 42000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]
'TXTL_P70_RNAPbound_Kd'             20          [10 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 100]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 10]
'TXTL_NTP_RNAP_1_Kd'                100000      [10 1e8]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-7 10]
'TXTL_NTP_RNAP_2_Kd'                1e6         [10 1e8]
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-7 10]
'TXTL_RNAdeg_Kd'                    2000        [100 10000]
'TXTL_RNAdeg_F'                     0.01        [0.1 1000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]
'RNAP'                              100         [5 500]
'RNase'                             100         [10 1000]
'TL_elong_glob'                     20          [4 200]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 10]
'TL_AA_Kd'                          100000      [10 1e8]
'TL_AA_F'                           0.001       [1e-5 20]
'TL_AGTP_Kd'                        100000      [1e2 1e8]
'TL_AGTP_F'                         1e-5        [1e-7 1]
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 2000]
'Ribo'                              30          [5 1000]};
estParamsIX = [1 2 5:17 19:26 ]';
estParams = activeNames2(estParamsIX,1)
activeNames2 = {...
'TX_elong_glob'                     10.5       [0.5 100]     %1
'AGTPdeg_time'                      7200        [1800 42000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]   %4
'TXTL_P70_RNAPbound_Kd'             20          [10 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 100]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 10]    %7
'TXTL_NTP_RNAP_1_Kd'                100000      [10 1e8]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-7 10]
'TXTL_NTP_RNAP_2_Kd'                1e6         [10 1e8]     %10
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-7 10]
'TXTL_RNAdeg_Kd'                    2000        [100 10000]
'TXTL_RNAdeg_F'                     0.01        [0.1 1000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]    %14
'RNAP'                              100         [5 500]
'RNase'                             100         [10 1000]
'TL_elong_glob'                     20          [4 200]        %17
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 10]     %20
'TL_AA_Kd'                          100000      [10 1e8]
'TL_AA_F'                           0.001       [1e-5 20]
'TL_AGTP_Kd'                        100000      [1e2 1e8]   %23
'TL_AGTP_F'                         1e-5        [1e-7 1]
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 2000]
'Ribo'                              30          [5 1000]}
activeNames2 = {...
'TX_elong_glob'                     10.5       [0.5 100]     %1
'AGTPdeg_time'                      7200        [1800 42000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]   %4
'TXTL_P70_RNAPbound_Kd'             20          [10 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 100]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 10]    %7
'TXTL_NTP_RNAP_1_Kd'                100000      [10 1e8]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-7 10]
'TXTL_NTP_RNAP_2_Kd'                1e6         [10 1e8]     %10
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-7 10]
'TXTL_RNAdeg_Kd'                    2000        [100 10000]
'TXTL_RNAdeg_F'                     0.01        [0.1 1000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]    %14
'RNAP'                              100         [5 500]
'RNase'                             100         [10 1000]
'TL_elong_glob'                     20          [4 200]        %17
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 10]     %20
'TL_AA_Kd'                          100000      [10 1e8]
'TL_AA_F'                           0.001       [1e-5 20]
'TL_AGTP_Kd'                        100000      [1e2 1e8]   %23
'TL_AGTP_F'                         1e-5        [1e-7 1]
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 2000]
'Ribo'                              30          [5 1000]};
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 5 7 8 10  12 14 15 16 17 18 19 21 23 25 26]';
estParams = activeNames2(estParamsIX,1)
17+7
length(activeNames2)
setdiff(1:26, estParamsIX)
activeNames2(setdiff(1:26, estParamsIX))
activeNames2(setdiff(1:26, estParamsIX))'
estParamsIX = [1 2 5 7 8 10  12 14 15 16 17 19 21 23 25 26]
activeNames2(setdiff(1:26, estParamsIX))'
activeNames2(setdiff(1:26, estParamsIX),:)'
activeNames2(setdiff(1:26, estParamsIX),:)
whos
estParamIx
clear all
estParamsIX = [1 2 5 7 8 10  12 14 15 16 17 19 21 23 25 26]';
% Skipping the following:
% activeNames2(setdiff(1:26, estParamsIX),:)
%
% ans =
%
%   10×3 cell array
%
%     {'AGTPdeg_rate'     }    {[2.0000e-04]}    {1×2 double}
%     {'AGTPreg_ON'       }    {[    0.0200]}    {1×2 double}
%     {'TXTL_P70_RNAPbo…'}    {[        20]}    {1×2 double}
%     {'TXTL_NTP_RNAP_1_F'}    {[1.0000e-04]}    {1×2 double}
%     {'TXTL_NTP_RNAP_2_F'}    {[1.0000e-05]}    {1×2 double}
%     {'TXTL_RNAdeg_F'    }    {[    0.0100]}    {1×2 double}
%     {'TXTL_PROT_deGFP…'}    {[    0.0023]}    {1×2 double}
%     {'TXTL_UTR_UTR1_F'  }    {[    0.2000]}    {1×2 double}
%     {'TL_AA_F'          }    {[1.0000e-03]}    {1×2 double}
%     {'TL_AGTP_F'        }    {[1.0000e-05]}    {1×2 double}
estParams = activeNames2(estParamsIX,1);
fixedParamsIX =  setdiff((1:26)', estParamsIX);
% since activeNames2 is a superset of activeNames1, we can just use
% activeNames2 as the master vector.
masterVector = zeros(length(activeNames2), 1);
activeNames2 = {...
'TX_elong_glob'                     10.5       [0.5 100]     %1
'AGTPdeg_time'                      7200        [1800 42000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]   %4
'TXTL_P70_RNAPbound_Kd'             20          [10 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 100]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 10]    %7
'TXTL_NTP_RNAP_1_Kd'                100000      [10 1e8]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-7 10]
'TXTL_NTP_RNAP_2_Kd'                1e6         [10 1e8]     %10
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-7 10]
'TXTL_RNAdeg_Kd'                    2000        [100 10000]
'TXTL_RNAdeg_F'                     0.01        [0.1 1000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]    %14
'RNAP'                              100         [5 500]
'RNase'                             100         [10 1000]
'TL_elong_glob'                     20          [4 200]        %17
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 10]     %20
'TL_AA_Kd'                          100000      [10 1e8]
'TL_AA_F'                           0.001       [1e-5 20]
'TL_AGTP_Kd'                        100000      [1e2 1e8]   %23
'TL_AGTP_F'                         1e-5        [1e-7 1]
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 2000]
'Ribo'                              30          [5 1000]};
estParamsIX = [1 2 5 7 8 10  12 14 15 16 17 19 21 23 25 26]';
% Skipping the following:
% activeNames2(setdiff(1:26, estParamsIX),:)
%
% ans =
%
%   10×3 cell array
%
%     {'AGTPdeg_rate'     }    {[2.0000e-04]}    {1×2 double}
%     {'AGTPreg_ON'       }    {[    0.0200]}    {1×2 double}
%     {'TXTL_P70_RNAPbo…'}    {[        20]}    {1×2 double}
%     {'TXTL_NTP_RNAP_1_F'}    {[1.0000e-04]}    {1×2 double}
%     {'TXTL_NTP_RNAP_2_F'}    {[1.0000e-05]}    {1×2 double}
%     {'TXTL_RNAdeg_F'    }    {[    0.0100]}    {1×2 double}
%     {'TXTL_PROT_deGFP…'}    {[    0.0023]}    {1×2 double}
%     {'TXTL_UTR_UTR1_F'  }    {[    0.2000]}    {1×2 double}
%     {'TL_AA_F'          }    {[1.0000e-03]}    {1×2 double}
%     {'TL_AGTP_F'        }    {[1.0000e-05]}    {1×2 double}
estParams = activeNames2(estParamsIX,1);
fixedParamsIX =  setdiff((1:26)', estParamsIX);
% since activeNames2 is a superset of activeNames1, we can just use
% activeNames2 as the master vector.
masterVector = zeros(length(activeNames2), 1); % log transformed.
paramMap1 = [12 13 14 16]';
paramMap2 = (1:length(masterVector))';
% parameter ranges (for the to-be-estimated parameters in the master
% vector)
paramRanges = log(cell2mat(activeNames2(estParamsIX,3)));
activeNames2(paramMap1, :)
activeNames2(paramMap2, :)
proj_acs_dsg2014_regen_C('stepSize', 1.2,...
'nW', 50,...
'nPoints', 10*50,...
'thinning', 1,...
'nIter', 4,...
'parallel', true, ...
'poolsize', 4,...
'temperatureLadder', [0.5, 0.005 0.05 0.0005],...
'stepLadder', linspace(2, 1, 2))
edit eacorr
%-- 2/5/19, 1:42 PM --%
10880*2
[0.5, 0.005, 0.05 0.0005, 0.005, 0.00005] * 21760
format short g
[0.5, 0.005, 0.05 0.0005, 0.005, 0.00005] * 21760
([0.5, 0.005, 0.05 0.0005, 0.005, 0.00005] * 21760)'
edit project_init
txtl_init; mcmc_init
edit project_init
size(marray)
marray1 = mcmc_get_walkers({ts11}, {1:10}, projdir);
size(marray)
marray1 = mcmc_get_walkers({ts11, ts12}, {1:10, 1:10}, projdir);
size(marray)
marray1 = mcmc_get_walkers({ts11, ts12}, {1:10, 1:10}, projdir);
convertedsID
convertedsID{1}
whos
marray1 = mcmc_get_walkers({ts11, ts12}, {1:10, 1:10}, projdir);
tstamp{i}
simID{i}
marray1 = mcmc_get_walkers({ts11, ts12}, {1:10, 1:10}, projdir);
size(marray1)
clc
whos
data_info
mi(2)
mi(1)
mi(1).dosedVals
mat2cell(mi(1).dosedVals)
help mat2cell
mi(1).dosedVals
length(mi(1).dosedVals)
mat2cell(mi(1).dosedVals, 1, 9)
help arrayfun
A = arrayfun(@num2str, mi(1).doseVals)
A = arrayfun(@num2str, mi(1).dosedVals)
A = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false)
mi(2)
clc
close
close all
size(marray2)
close all
size(mvarray)
help quantile
%-- 2/6/19, 5:49 AM --%
txtl_init
mcmc_init
isvector(1)
isvector(magic(2))
size(marray)
close
close all
di = data_dsg2014_full
di(3)
%-- 2/7/19, 2:35 PM --%
userpath
%-- 2/7/19, 4:23 PM --%
path
mobj = model_dsg2014_regen
mobj
mobj.reactions
di
data_info
clear all
log([30 100 18000 42000])
pwd
projdir
cell2mat(aaa(:,1))
cell2mat(aaa(:,1))'
di
mi(1)
mi(1).dataToMapTo
mi(1).measuredSpecies
mi(1).measuredSpecies{:}
mi(1).emo
get(mi(1).emo)
get(mi(1).emo, 'ValueInfo')
vi = get(mi(1).emo, 'ValueInfo')
vi(1)
di((mi(1).dataToMapTo)).timeVector
mi(1)
[da, idxnotused] = simulatecurves(em,m, p.nSimCurves, dose, tv, ms);
sd = simulate(em, [exp(m(end - kk+1,:)'); dose(i,:)']);
[exp(m(end - kk+1,:)'); dose(i,:)']
em
vi = get(mi(1).emo, 'ValueInfo')
vi = get(em, 'ValueInfo')
vi
vi(:)
vi(1)
mi(1)
mi(1).paramMaps
mai
mai.estNames
mai.estNames(mi(1).paramMaps)
mai
mai.fixedParams
mi(2).namesUnord
mi(2).namesUnord(mi(1).paramMaps)
size(aaa)
activeNames2 = {...
'TX_elong_glob'                     10.5       [0.5 100]
'AGTPdeg_time'                      7200        [1800 42000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]
'TXTL_P70_RNAPbound_Kd'             20          [10 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 100]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 10]
'TXTL_NTP_RNAP_1_Kd'                100000      [10 1e8]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-7 10]
'TXTL_NTP_RNAP_2_Kd'                1e6         [10 1e8]
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-7 10]
'TXTL_RNAdeg_Kd'                    2000        [100 10000]
'TXTL_RNAdeg_F'                     0.01        [0.1 1000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]
'RNAP'                              100         [5 500]
'RNase'                             100         [10 1000]
'TL_elong_glob'                     20          [4 200]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 10]
'TL_AA_Kd'                          100000      [10 1e8]
'TL_AA_F'                           0.001       [1e-5 20]
'TL_AGTP_Kd'                        100000      [1e2 1e8]
'TL_AGTP_F'                         1e-5        [1e-7 1]
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 2000]
'Ribo'                              30          [5 1000]};
size(activeNames2)
vi = get(mi(1).emo, 'ValueInfo')
vi(1)
vi(2)
vi(3)
vi(4)
titls
close all
clc
close all
mi(1).emo
mobj
mobj.species
edit mcmc_runsim_v2.m
mobj.species
close all
mobj.reactinos
mobj.Reactions
mobj.species
simulatecurves(...
mi(1).emo,...
log(cell2mat(activeNames1(:,2))'),...
1,...
di(mi(1).dataToMapTo).dosedVals', ...
di((mi(1).dataToMapTo)).timeVector, ...
mi(1).measuredSpecies)
mi(1).measuredSpecies
mi(1).measuredSpecies{1}
simulatecurves(...
mi(1).emo,...
log(cell2mat(activeNames1(:,2))'),...
1,...
di(mi(1).dataToMapTo).dosedVals', ...
di((mi(1).dataToMapTo)).timeVector, ...
{mi(1).measuredSpecies{1}(1:5})
simulatecurves(...
mi(1).emo,...
log(cell2mat(activeNames1(:,2))'),...
1,...
di(mi(1).dataToMapTo).dosedVals', ...
di((mi(1).dataToMapTo)).timeVector, ...
{mi(1).measuredSpecies{1}(1:5)})
{mi(1).measuredSpecies{1}(1:2)})
emodebugda = simulatecurves(...
mi(1).emo,...
log(cell2mat(activeNames1(:,2))'),...
1,...
di(mi(1).dataToMapTo).dosedVals', ...
di((mi(1).dataToMapTo)).timeVector, ...
{mi(1).measuredSpecies{1}(1:2)});
emp
emo
mi(1).emo
get(mi(1).emo)
simulate(mi(1).emo)
debugsd = simulate(mi(1).emo)
debugsd
debugsd.DataNames
size(debugsd.Data)
size(debugsd.Time)
debugsd.DataNames
debugsd.DataNames(1)
proj_acs_dsg2014_regen_A('stepSize', 1.2,...
'nW', 50,...
'nPoints', 10*50,...
'thinning', 1,...
'nIter', 2,...
'parallel', false, ...
'poolsize', 2,...
'temperatureLadder', [0.01],...
'stepLadder', [1])
%-- 2/8/19, 11:19 AM --%
figure
[C,lags,ESS]=eacorr(marray(:, :, :));
plot(lags,C,'.-',lags([1 end]),[0 0],'k');
grid on
xlabel('lags')
ylabel('autocorrelation');
text(lags(end),0,sprintf('Effective Sample Size (ESS): %.0f_ ',...
ceil(mean(ESS))),'verticalalignment','bottom','horizontalalignment','right')
title('Markov Chain Auto Correlation')
size(marra)
size(marray)
figure
[C,lags,ESS]=eacorr(marray(:, :, 10000:end));
plot(lags,C,'.-',lags([1 end]),[0 0],'k');
grid on
xlabel('lags')
ylabel('autocorrelation');
text(lags(end),0,sprintf('Effective Sample Size (ESS): %.0f_ ',...
ceil(mean(ESS))),'verticalalignment','bottom','horizontalalignment','right')
title('Markov Chain Auto Correlation')
titls_array = cell(length(titls), 1, length(mi(2).measuredSpeciesIndex));
for i = 1:length(mi(2).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = titls(j);
end
end
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.8, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls', {},...
'SimMode', 'meanstd');%, 'savematlabfig', false, 'savejpeg', false
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
mcmc_trajectories(mi(2).emo, data_info(mi(2).dataToMapTo), mi(2), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd');
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 1, length(mi(2).measuredSpeciesIndex));
for i = 1:length(mi(2).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = titls(j);
end
end
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.8, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls', {},...
'SimMode', 'meanstd');%, 'savematlabfig', false, 'savejpeg', false
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
mcmc_trajectories(mi(2).emo, data_info(mi(2).dataToMapTo), mi(2), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd');
figure
[C,lags,ESS]=eacorr(marray(:, :,4000:end));%10000:end
plot(lags,C,'.-',lags([1 end]),[0 0],'k');
grid on
xlabel('lags')
ylabel('autocorrelation');
text(lags(end),0,sprintf('Effective Sample Size (ESS): %.0f_ ',...
ceil(mean(ESS))),'verticalalignment','bottom','horizontalalignment','right')
title('Markov Chain Auto Correlation')
close all
clc
log([100])
log([200])
log([300])
log([10])
log(10)
log(100)-log(10)
log(1e6)
exp activeNames2 = {... % changes made to ranges on feb 8, 2019. originals in regen_A file.
'TX_elong_glob'                     10.5       [0.5 300]        %
'AGTPdeg_time'                      7200        [1800 42000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]        %
'TXTL_P70_RNAPbound_Kd'             20          [0.1 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 300]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 100]         %
'TXTL_NTP_RNAP_1_Kd'                100000      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-5 100]
'TXTL_NTP_RNAP_2_Kd'                1e6         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-6 1000]        %
'TXTL_RNAdeg_Kd'                    2000        [100 1e5]
'TXTL_RNAdeg_F'                     0.01        [0.01 10000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]        %
'RNAP'                              100         [5 5000]
'RNase'                             100         [1 10000]
'TL_elong_glob'                     20          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]        %
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 100]
'TL_AA_Kd'                          100000      [.1 1e6]
'TL_AA_F'                           0.001       [1e-5 20]        %
'TL_AGTP_Kd'                        100000      [.1 1e7]
'TL_AGTP_F'                         1e-5        [1e-5 100]        %
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 20000]
'Ribo'                              30          [10 10000]};
activeNames2 = {... % changes made to ranges on feb 8, 2019. originals in regen_A file.
'TX_elong_glob'                     10.5       [0.5 300]        %
'AGTPdeg_time'                      7200        [1800 42000]
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2]
'AGTPreg_ON'                        0.02        [0.005 0.2]        %
'TXTL_P70_RNAPbound_Kd'             20          [0.1 1e6]
'TXTL_P70_RNAPbound_F'              20          [1e-5 300]
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 100]         %
'TXTL_NTP_RNAP_1_Kd'                100000      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 0.0001      [1e-5 100]
'TXTL_NTP_RNAP_2_Kd'                1e6         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-6 1000]        %
'TXTL_RNAdeg_Kd'                    2000        [100 1e5]
'TXTL_RNAdeg_F'                     0.01        [0.01 10000]
'TXTL_RNAdeg_kc'                    0.0028      [1e-4 1]        %
'RNAP'                              100         [5 5000]
'RNase'                             100         [1 10000]
'TL_elong_glob'                     20          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02]        %
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   0.2         [1e-5 100]
'TL_AA_Kd'                          100000      [.1 1e6]
'TL_AA_F'                           0.001       [1e-5 20]        %
'TL_AGTP_Kd'                        100000      [.1 1e7]
'TL_AGTP_F'                         1e-5        [1e-5 100]        %
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 20000]
'Ribo'                              30          [10 10000]};
activeNames2
exp(9.42)
exp(9.42)/3600
close all
6+1:6
close all
exp(5.4)
log(20)
exp(1.5)
exp(-8.4)
exp(-5.5)
format short g; exp(9.57)
format short g; exp(9.57)/3600
exp(-0.3)
estParamsIX = [1 5 7 8 10 11 12 15 16 17 19 21 23 25 26]'
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     10.5       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.57)   [1800 42000] % set to exp(9.57)
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2] % set from before
'AGTPreg_ON'                        0.02        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             200         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                100000      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                1e6         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 1e-5        [1e-6 1000]        %11
'TXTL_RNAdeg_Kd'                    2000        [100 1e5]
'TXTL_RNAdeg_F'                     1        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-5.4)   [1e-4 1]  %set to exp(-5.4)
'RNAP'                              100         [5 5000] % 15
'RNase'                             100         [1 10000]
'TL_elong_glob'                     20          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          100000      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        100000      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 20000]
'Ribo'                              30          [10 10000]}; %26
estParams = activeNames2(estParamsIX,1)
fixedParamsIX =  setdiff((1:26)', estParamsIX);
estParams = activeNames2(fixedParamsIX,1)
estParams = activeNames2(fixedParamsIX,2)
estParams = activeNames2(fixedParamsIX,[1:2])
estParams = activeNames2(estParamsIX,[1:3])
cell2mat(activeNames2(estParamsIX,[3]) )
activeNames2(fixedParamsIX,[1:2])
log(cell2mat(activeNames2(fixedParamsIX,[2])))
estParamsIX = [1 5 7 8 10 12 15 16 17 19 21 23 25 26]';
estParams = activeNames2(estParamsIX,1);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:26)', estParamsIX);
log(cell2mat(activeNames2(fixedParamsIX,[2])))
activeNames2(fixedParamsIX,[1:2])
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     10.5       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.57)   [1800 42000] % set to exp(9.57)
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2] % set from before
'AGTPreg_ON'                        0.02        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             200         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                100000      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                1e6         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11 % set to 1
'TXTL_RNAdeg_Kd'                    2000        [100 1e5]
'TXTL_RNAdeg_F'                     1        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-5.4)   [1e-4 1]  %set to exp(-5.4)
'RNAP'                              100         [5 5000] % 15
'RNase'                             100         [1 10000]
'TL_elong_glob'                     20          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          100000      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        100000      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 20000]
'Ribo'                              30          [10 10000]}; %26
estParamsIX = [1 5 7 8 10 12 15 16 17 19 21 23 25 26]';
estParams = activeNames2(estParamsIX,1);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:26)', estParamsIX);
log(cell2mat(activeNames2(fixedParamsIX,[2])))
activeNames2(fixedParamsIX,[1:2])
estParams = activeNames2(estParamsIX,[1:3])
log(cell2mat(activeNames2(fixedParamsIX,[2])))
activeNames2(fixedParamsIX,[1:2])
estParams = activeNames2(estParamsIX,[1:3])activeNames2(estParamsIX,[1
estParams = activeNames2(estParamsIX,[1:3])*activeNames2(estParamsIX,[1])
activeNames2(estParamsIX,[1]
activeNames2(estParamsIX,[1])
close all
clear all
clc
activeNames2(estParamsIX,[1])
figure
[C,lags,ESS]=eacorr(marray(:, :,:));%10000:end
plot(lags,C,'.-',lags([1 end]),[0 0],'k');
grid on
xlabel('lags')
ylabel('autocorrelation');
text(lags(end),0,sprintf('Effective Sample Size (ESS): %.0f_ ',...
ceil(mean(ESS))),'verticalalignment','bottom','horizontalalignment','right')
title('Markov Chain Auto Correlation')
%
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 1, length(mi(2).measuredSpeciesIndex));
for i = 1:length(mi(2).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = titls(j);
end
end
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.8, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls', {},...
'SimMode', 'meanstd');%, 'savematlabfig', false, 'savejpeg', false
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
mcmc_trajectories(mi(2).emo, data_info(mi(2).dataToMapTo), mi(2), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd');
%-- 2/8/19, 8:56 PM --%
1.05*[6 3 2 1.7 1.4 1.2 1.1 1 0.75 0.5]
close all
clear all
clc
close all
mi(1).paramMaps
activeNames2(mi(1).paramMaps,:)
activeNames2(mi(1).paramMaps,2)
cell2mat(activeNames2(mi(1).paramMaps,2))
exp([2 4.5; 9.2 10.2; 5 10; 0 4, -5 2.5; 10 14; -6 2; 2.5 5.5])
exp([2 4.5; 9.2 10.2; 5 10; 0 4; -5 2.5; 10 14; -6 2; 2.5 5.5])
format short g
exp([2 4.5; 9.2 10.2; 5 10; 0 4; -5 2.5; 10 14; -6 2; 2.5 5.5])
close all
marrayOrd
mi(2).paramMaps(mi(2).orderingIx)
marrayOrd(:,1:10,1)
mai.masterVector
cell2mat(activeNames2(:,2))
log(cell2mat(activeNames2(:,2)))
mai
masterVector = log(cell2mat(activeNames2(:,2)))
mai.masterVector = log(cell2mat(activeNames2(:,2)));
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.8, 1]);
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
marrayOrd(:,1:5,1)
mi(2).namesUnord
mi(2).namesUnord(mi(2).paramMaps(mi(2).orderingIx))
marrayOrd(:,1:5,1)
%-- 2/9/19, 8:19 AM --%
edit gwmcmc_vse.m
isoctave
(exist ('OCTAVE_VERSION', 'builtin') > 0)
(exist ('OCTAVE_VERSION', 'builtin')
(exist ('OCTAVE_VERSION', 'builtin'))
(exist ('OCTAVE_VERSION'))
help persistent
edit mcmc_runsim_v2.m
proj_acs_dsg2014_regen_A('stepSize', 1.2,...
'nW', 50,...
'nPoints', 10*50,...
'thinning', 1,...
'nIter', 2,...
'parallel', false, ...
'poolsize', 2,...
'temperatureLadder', [0.01],...
'stepLadder', [1])
vii = get(emo{i}, "ValueInfo')
vii = get(emo{i}, 'ValueInfo')
vii(1)
vii(2)
enuo(orderingIx)
eno(orderingIx2)
emo
emo{2}
emo{2}.ValueInfo
emo{2}.ValueInfo(1)
emo{2}.ValueInfo(2)
emo{2}.ValueInfo(3)
emo{2}.ValueInfo(6)
emo{2}.ValueInfo(18:21)
emo{2}.ValueInfo(18)
mi
mi(2)
mai
mi(2)
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls', {},...
'SimMode', 'curves');%, 'savematlabfig', false, 'savejpeg', false
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
mcmc_trajectories(mi(2).emo, data_info(mi(2).dataToMapTo), mi(2), marrayOrd,...
titls_array, {},...
'SimMode', 'curves');
exp(9.57)
mvarray(:,1:6,end)
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     10.5       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.57)   [1800 42000] % set to exp(9.57)
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2] % set from before
'AGTPreg_ON'                        0.02        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             200         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                100000      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                1e6         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11 % set to 1
'TXTL_RNAdeg_Kd'                    2000        [100 1e5]
'TXTL_RNAdeg_F'                     1        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-5.4)   [1e-4 1]  %set to exp(-5.4)
'RNAP'                              100         [5 5000] % 15
'RNase'                             100         [1 10000]
'TL_elong_glob'                     20          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          100000      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        100000      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 20000]
'Ribo'                              30          [10 10000]}; %26
log(cell2mat(activeNames2(:, 2)))
[mvarray(:,1:6,end) log(cell2mat(activeNames2(:, 2)))]
flagz = ones(26, 1)l
flagz = ones(26, 1);
flags([1 5 7 8 10 12 15 16 17 19 21 23 25 26]) = 0;
[mvarray(:,1:6,end) log(cell2mat(activeNames2(:, 2))) flagz]
flagz([1 5 7 8 10 12 15 16 17 19 21 23 25 26]) = 0;
[mvarray(:,1:6,end) log(cell2mat(activeNames2(:, 2))) flagz]
flags
clear flags
close all
(mi(1).orderingIx)
mi(1).paramMaps
mi(1).paramMaps(mi(2).orderingIx)
mi(1).paramMaps(mi(1).orderingIx)
log(cell2mat(activeNames2(:, 2)))
[log(cell2mat(activeNames2(:, 2))) (cell2mat(activeNames2(:, 2)))]
format short g
[log(cell2mat(activeNames2(:, 2))) (cell2mat(activeNames2(:, 2)))]
exp(5.8)
clear all
close all
di
sum(sum(sum(di(1).dataArray)))
sum(sum(sum(di(2).dataArray)))
sum(sum(sum(di(3).dataArray)))
di(1)
di(3)
sum(sum(sum(di(1).dataArray)))/sum(sum(sum(di(3).dataArray)))
clear all
close all
clear all
clc
mai.masterVector
ri = mcmc_info.runsim_info;
mai = mcmc_info.master_info;
mai.masterVector
mcmc_info = mcmc_info_dsg2014_regen_A(mobj);
mai = mcmc_info.master_info;
mai.masterVector
mvarray(:,1:3,end)
mvarray(:,1:3:end,end)
mvarray(:,1:30:end,end)
mvarray(:,1:50:end,end)
close all
mvarray(:,1:2mend)
mvarray(:,1:2,end)
paramsToTest(:,34)
activeNames2(:,1)
exp(7.5)
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000] % DO NOT FIX THIS.
'AGTPdeg_rate'                      exp(-9.5172)      [1e-5 1e-2] % set from before
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [1e-4 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11 % set to 1
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e5]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-4 1]  %set to exp(-5.4)
'RNAP'                              exp(1.4419)         [5 5000] % 15
'RNase'                             exp(6.4899)         [1 10000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 20000]
'Ribo'                              exp(7.3081)          [10 10000]}; %26
estParamsIX = [1 5 7 15 17 19 25 26]'
activeNames2(estParamsIX, 1)
activeNames2(estParamsIX, 2)
cell2mat(activeNames2(estParamsIX, 2))
cell2mat(activeNames2(:, 2))
[cell2mat(activeNames2(:, 2)) cell2mat(activeNames2(:, 3))]
estParamsIX = [1 5 7 12 14 15 16 17 19 25 26]';
activeNames2(estParamsIX, 1)
estParamsIX = [1 2 3 5 7 12 14 15 16 17 19 25 26]'
activeNames2(estParamsIX, 1)
aaa = [    {'TX_elong_glob'                  }
{'AGTPdeg_time'                   }
{'AGTPdeg_rate'                   }
{'TXTL_P70_RNAPbound_Kd'          }
{'TXTL_RNAPBOUND_TERMINATION_RATE'}
{'TXTL_RNAdeg_Kd'                 }
{'TXTL_RNAdeg_kc'                 }
{'RNase'                          }
{'RNAP'                           }
{'TL_elong_glob'                  }
{'TXTL_UTR_UTR1_Kd'               }
{'TXTL_RIBOBOUND_TERMINATION_RATE'}
{'Ribo'                           }
]
[activeNames2(estParamsIX, 1) aaa]
%-- 2/10/19, 1:36 PM --%
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 1, length(mi(1).measuredSpeciesIndex));
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = [titls(j) ' Experiment'];
titls_array(j, 2, i) = [titls(j) ' Fits'];
end
end
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true);
{[titls{j} ' Experiment']}
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 1, length(mi(1).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true);
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true);
ax
ax.Ylim = [0 expsimmax]
ax.YLim = [0 expsimmax]
expsimmax
ax.YLim = [0 expsimmax(msnum)]
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true);
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false);
mcmc_plot(marray(:, 1:10:end,1:50:end), parnames(:));
close all
clear all
close all
mcmc_plot(marray(:, 1:2:end,1500:10:end), parnames(:));
analysis_regen_E
help figure
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'RNAspike');
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(2).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(2).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(2).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(2).emo, data_info(mi(2).dataToMapTo), mi(2), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'MGa_deGFP');
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'RNAspike');
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(2).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(2).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(2).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(2).emo, data_info(mi(2).dataToMapTo), mi(2), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'MGa_deGFP');
close all
figure
[C,lags,ESS]=eacorr(marray(:, :,2500:end));%10000:end
plot(lags,C,'.-',lags([1 end]),[0 0],'k');
grid on
xlabel('lags')
ylabel('autocorrelation');
text(lags(end),0,sprintf('Effective Sample Size (ESS): %.0f_ ',...
ceil(mean(ESS))),'verticalalignment','bottom','horizontalalignment','right')
title('Markov Chain Auto Correlation')
mcmc_plot(marray(:, 1:30:end,1:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'WithTransient');
mcmc_plot(marray(:, 1:30:end,1:10:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'WithTransient');
mcmc_plot(marray(:, 1:2:end,2500:10:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:10:end,2500:10:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:5:end,2500:10:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedIn');
close all
mcmc_plot(marray(:, 1:3:end,2500:10:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:3:end,1:10:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'WithTransient');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
mcmc_plot(marray(:, 1:6:end,2500:10:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:6:end,1:10:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'WithTransient');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
mcmc_plot(marray(:, 1:6:end,2500:10:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:10:end,1:20:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'WithTransient');
close all
% Plot trace and corner (posterior distribution) plots
mcmc_plot(marray(:, 1:6:end,92*50:30:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:6:end,3600:30:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'SemiBurnedIn');
mcmc_plot(marray(:, 1:10:end,1:30:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'WithTransient');
figure
[C,lags,ESS]=eacorr(marray(:, :,92*50:end));%10000:end
plot(lags,C,'.-',lags([1 end]),[0 0],'k');
grid on
xlabel('lags')
ylabel('autocorrelation');
text(lags(end),0,sprintf('Effective Sample Size (ESS): %.0f_ ',...
ceil(mean(ESS))),'verticalalignment','bottom','horizontalalignment','right')
title('Markov Chain Auto Correlation')
mcmc_plot(marray(:, 1:5:end,92*50:30:end), parnames(:),...
'savematlabfig', true, 'savejpeg', true,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedIn');
%-- 2/11/19, 10:02 AM --%
help savefig
savejpg
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
mcmc_plot(marray(:, 1:6:end,4000:10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:10:end,1:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'WithTransient');
figure
[C,lags,ESS]=eacorr(marray(:, :,4000:end));%10000:end
plot(lags,C,'.-',lags([1 end]),[0 0],'k');
grid on
xlabel('lags')
ylabel('autocorrelation');
text(lags(end),0,sprintf('Effective Sample Size (ESS): %.0f_ ',...
ceil(mean(ESS))),'verticalalignment','bottom','horizontalalignment','right')
title('Markov Chain Auto Correlation')
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'RNAspike');
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(2).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(2).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(2).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(2).emo, data_info(mi(2).dataToMapTo), mi(2), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'MGa_deGFP');
close all
edit analysis_regen_F
% In this file we try to find a set of parameter values that allow the
% model from model_dsg2014_regen to fit the data from data_dsg2014_full.
% Vipul Singhal, 2019
% simulate txtl model with custom parameter values, and look at the species
% plots as specified by mcmc_info object.
% Set working directory to the txtlsim toolbox directory.
projdir = [pwd '/mcmc_simbio/projects/proj_acs_dsg2014_regen_F'];
addpath(projdir)
jpgsave = false;
figsave = false;
% Load model, mcmc_info, and data_info.
mobj = model_dsg2014_regen;
mcmc_info = mcmc_info_dsg2014_regen_F(mobj);
di = data_dsg2014_full;
mi = mcmc_info.model_info;
ri = mcmc_info.runsim_info;
mai = mcmc_info.master_info;
% plot data from existing simulations.
tsIDtouse = 1;
plotflag = true;
switch tsIDtouse
case 1
ts1 = '20190210_184039_1_195';
ts2 = '20190210_184039_2_20';
tstamp = {ts1 ts2};
nIterID = {1:10 1:4};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
end
mai.masterVector
marray_full = mcmc_get_walkers(tstamp,nIterID, projdir);
marray = marray_full(:,:,1:end);
mai
mai.estNames
close all
%-- 2/11/19, 8:06 PM --%
log([0.1 1e6])
log([0.1 500])
log([1e-6 1e-2])
log([0.005 0.2])
log([0.0002 0.02])
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000]
'AGTPdeg_rate'                      exp(-9.5172)      [1e-6 1e-1]
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] %
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] %
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e5]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] %
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-4 1]  %
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 10000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0001 0.2] %18
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.5 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] %
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   %
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 200]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
estParamsIX = [1 2 3 4 5 7 12 14 15 16 17 18 19 25 26]';
estParams = activeNames2(estParamsIX,1)
estParamsIX = [1 2 3 4 5 7 8 10 12 14 15 16 17 18 19 21 23 25 26]';
estParams = activeNames2(estParamsIX,1)
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000]
'AGTPdeg_rate'                      exp(-9.5172)      [1e-6 1e-1]
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] %
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] %
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e5]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] %
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-4 1]  %
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 10000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0001 0.2] %18
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.5 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] %
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   %
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 200]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 3 4 5 7 12 14 15 16 17 18 19 25 26]';
estParams = activeNames2(estParamsIX,1)
%-- 2/11/19, 9:19 PM --%
% In this file we try to find a set of parameter values that allow the
% model from model_dsg2014_regen to fit the data from data_dsg2014_full.
% Vipul Singhal, 2019
% simulate txtl model with custom parameter values, and look at the species
% plots as specified by mcmc_info object.
% Set working directory to the txtlsim toolbox directory.
projdir = [pwd '/mcmc_simbio/projects/proj_acs_dsg2014_regen_G'];
addpath(projdir)
% Load model, mcmc_info, and data_info.
mobj = model_dsg2014_regen;
mcmc_info = mcmc_info_dsg2014_regen_G(mobj);
di = data_dsg2014_full;
mi = mcmc_info.model_info;
ri = mcmc_info.runsim_info;
mai = mcmc_info.master_info;
% plot data from existing simulations.
tsIDtouse = 1;
plotflag = true;
switch tsIDtouse
case 1
ts1temp = '20190209_191801_1_127';
ts2temp = '20190210_030032_1_127';
ts3temp = '20190210_123436_1_32';
nIterID = {1:20 1:29 1:80};
tstamp = {ts1temp ts2temp ts3temp};
load([projdir '/simdata_' ts1temp '/full_variable_set_' ts1temp '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
end
mai.masterVector
marray_full = mcmc_get_walkers(tstamp,nIterID, projdir);
marray = marray_full(:, :, 1:end);
parnames = ...
[{'TX_{cat}'    }
{'pol_{Kd}'     }
{'pol'          }
{'TL_{cat}'     }
{'Ribo_{Kd}'    }
{'Ribo'         }];
%
close all
%-- 2/12/19, 8:27 AM --%
mcmc_plot(marray(:, 1:50:end,5000:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts4, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:50:end,1:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts4, 'extrafignamestring', 'WithTransient');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
mcmc_plot(marray(:, 1:10:end,5000:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts4, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:10:end,1:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts4, 'extrafignamestring', 'WithTransient');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
mcmc_plot(marray(:, 1:10:end,7000:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts4, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:10:end,1:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts4, 'extrafignamestring', 'WithTransient');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
mcmc_plot(marray(:, 1:10:end,8000:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts4, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:10:end,1:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts4, 'extrafignamestring', 'WithTransient');
mcmc_plot(marray(:, 1:end,8000:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts4, 'extrafignamestring', 'BurnedInAllWalkers');
%-- 2/12/19, 9:17 AM --%
mai.paramRanges
exp(0.6)
exp([0.9 1.55])
exp([3.45 4.14 4.77])
log([1 100000])
log([1 10000])
%-- 2/12/19, 7:35 PM --%
close all
%-- 2/12/19, 7:53 PM --%
addpath('/Users/vipulsinghal/Dropbox/Documents/a_Research/bioinformatics/GIS_Project_Bigfish/MERFISH_analysis-master/example_scripts')
addpath('/Users/vipulsinghal/Dropbox/Documents/a_Research/bioinformatics/GIS_Project_Bigfish/MERFISH_analysis-master/startup')
run('/Users/vipulsinghal/Dropbox/Documents/a_Research/bioinformatics/GIS_Project_Bigfish/All_RNAseq_datasets/codebooks/Vipul debug files 230119_small_file_size copy/library_design_example2.m')
MERFISHAnalysisPath = ...
'/Users/vipulsinghal/Dropbox/Documents/a_Research/bioinformatics/MERFISH/MERFISH_analysis'
addpath(genpath(...
'/Users/vipulsinghal/Dropbox/Documents/a_Research/bioinformatics/MERFISH/MERFISH_analysis/matlab-storm-master'))
library_design_example_debug_feb13v2
clear all
clc
close all
startup
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000]
'AGTPdeg_rate'                      exp(-9.5172)      [1e-6 1e-1]
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] %
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] %
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e5]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] %
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-4 1]  %
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 10000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0001 0.2] %18
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.5 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] %
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   %
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 200]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 3 4 5 7 8 10 12 14 15 16 17 18 19 21 23 25 26]';
estParams = activeNames2(estParamsIX,1)
parnames = ...
[{'TX_{cat}'    }
{'\tau_{atp}'   }
{'\delta_{atp}' }
{'\alpha_{atp}' }
{'pol_{Kd}'     }
{'pol_{term}'   }
{'n_{Kd1}'      }
{'n_{Kd2}'      }
{'RNAse_{Kd}'   }
{'RNAse_{cat}'  }
{'pol'          }
{'RNase'        }
{'TL_{cat}'     }
{'GFP_{mat}'    }
{'Ribo_{Kd}'    }
{'aa_{Kd}'      }
{'TL_n_{Kd}'    }
{'Ribo_{term}'  }
{'Ribo'         }]
[parnames estParams]
close all
mcmc_plot(marray(:, 1:10:end,(end-200):10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'WithTransient');
mcmc_plot(marray(:, 1:end,(end-200):10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'WithTransient');
clear all
close all
who
pack
%-- 2/14/19, 8:51 AM --%
analysis_regen_H
mcmc_plot(marray(:, 1:30:end,(end-3000):10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts2, 'extrafignamestring', 'last300');
mcmc_plot(marray(:, 1:end,(end-3000):10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts2, 'extrafignamestring', 'last300');
clear all
pack
%-- 2/17/19, 1:34 PM --%
analysis_regen_H
edit     activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000]
'AGTPdeg_rate'                      exp(-9.5172)      [1e-6 1e-1]
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] %
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] %
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e5]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] %
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-4 1]  %
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 10000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0001 0.2] %18
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.5 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] %
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   %
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 200]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 3 4 5 7 12 14 15 16 17 18 19 25 26]';
estParams = activeNames2(estParamsIX,1)
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000]
'AGTPdeg_rate'                      exp(-9.5172)      [1e-6 1e-1]
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] %
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] %
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e5]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] %
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-4 1]  %
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 10000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0001 0.2] %18
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.5 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] %
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   %
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 200]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 3 4 5 7 12 14 15 16 17 18 19 25 26]';
estParams = activeNames2(estParamsIX,1)
activeNames2(:, 2)
cell2mat(activeNames2(:, 2))
log(cell2mat(activeNames2(:, 2)))
help round
round(log(cell2mat(activeNames2(:, 2))),1)
format short g
round(log(cell2mat(activeNames2(:, 2))),1)
mat2cell(round(log(cell2mat(activeNames2(:, 2))),1))
mat2cell(round(log(cell2mat(activeNames2(:, 2))),1), 26, 1)
help mat2cell
mat2cell(round(log(cell2mat(activeNames2(:, 2))),1), ones(26,1), 1)
[activenames2(:,1) mat2cell(round(log(cell2mat(activeNames2(:, 2))),1), ones(26,1), 1)]
[activeNames2(:,1) mat2cell(round(log(cell2mat(activeNames2(:, 2))),1), ones(26,1), 1)]
[activeNames2(:,1) mat2cell(round(log(cell2mat(activeNames2(:, 2))),1), ones(26,1), 1) mat2cell(round(log(cell2mat(activeNames2(:, 3))),1), ones(26,1), 2)]
[mat2cell(round(log(cell2mat(activeNames2(:, 3))),1), ones(26,1), 2)]
[mat2cell(round(log(cell2mat(activeNames2(:, 3))),1), ones(26,1), 1)]
[mat2cell(round(log(cell2mat(activeNames2(:, 3))),1), ones(26,1), [1 1])]
[activeNames2(:,1) mat2cell(round(log(cell2mat(activeNames2(:, 2))),1), ones(26,1), 1) mat2cell(round(log(cell2mat(activeNames2(:, 3))),1), ones(26,1), [1 1])]
log(200)
log(220)
log(230)
edit analysis_regen_H.m
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000]
'AGTPdeg_rate'                      exp(-9.5172)      [1e-6 1e-1]
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] %
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] %
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e5]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] %
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-4 1]  %
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 10000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0001 0.2] %18
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.5 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] %
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   %
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 200]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 3 4 5 7 12 14 15 16 17 18 19 25 26]';
estParams = activeNames2(estParamsIX,1)
analysis_regen_I
ceil(size(mvarray, 3) * [.9, 1])
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [0.8 0.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'RNAspike');
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(2).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(2).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(2).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(2).emo, data_info(mi(2).dataToMapTo), mi(2), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'MGa_deGFP');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
%     mcmc_plot(marray(:, 1:end,5000:5:end), parnames(:),...
%     'savematlabfig', figsave, 'savejpeg', jpgsave,...
%     'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedInAllWalkers');
%
%     mcmc_plot(marray(:, 1:20:end,5000:10:end), parnames(:),...
%     'savematlabfig', figsave, 'savejpeg', jpgsave,...
%     'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:end,(end-2000):20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'last100');
mcmc_plot(marray(:, 1:20:end,1:10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1, 'extrafignamestring', 'WithTransient');
close all
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000] % DO NOT FIX THIS.
'AGTPdeg_rate'                      exp(-9.5172)      [1e-7 1e-2] % set from before
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.01 1e7]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 1000]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11 % set to 1
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e7]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-5 10]  %set to exp(-5.4)
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 10000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.05 1e7]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 1000]
'Ribo'                              exp(7.3081)          [10 10000]}; %26
%
%     {'AGTPreg_ON'                     }
%     {'TXTL_P70_RNAPbound_F'           }
%     {'TXTL_NTP_RNAP_1_Kd'             }
%     {'TXTL_NTP_RNAP_1_F'              }
%     {'TXTL_NTP_RNAP_2_Kd'             }
%     {'TXTL_NTP_RNAP_2_F'              }
%     {'TXTL_RNAdeg_F'                  }
%     {'TXTL_UTR_UTR1_F'                }
%     {'TL_AA_Kd'                       }
%     {'TL_AA_F'                        }
%     {'TL_AGTP_Kd'                     }
%     {'TL_AGTP_F'                      }
%     {'TXTL_PROT_deGFP_MATURATION'     }
% are fixed at the values above.
% 3. regen_F:
% estimate all 13 remaining params:
%     {'TX_elong_glob'                  }
%     {'AGTPdeg_time'                   }
%     {'AGTPdeg_rate'                   }
%     {'TXTL_P70_RNAPbound_Kd'          }
%     {'TXTL_RNAPBOUND_TERMINATION_RATE'}
%     {'TXTL_RNAdeg_Kd'                 }
%     {'TXTL_RNAdeg_kc'                 }
%     {'RNAP'                           }
%     {'RNase'                          }
%     {'TL_elong_glob'                  }
%     {'TXTL_UTR_UTR1_Kd'               }
%     {'TXTL_RIBOBOUND_TERMINATION_RATE'}
%     {'Ribo'                           }
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 3 5 7 12 14 15 16 17 19 25 26]';
estParams = activeNames2(estParamsIX,1)
activeNames2(:,1)
log(5)
log(2.3^2)
log(2.6^2)
log(2.7^2)
exp(1)
log(2.713^2)
(2.713^2)
10
log([0.5 300])
log(1e-5)
log([1e-5 10])
exp([0.1 5000]_
exp([0.1 5000])
log([0.1 5000])
1200*10
analysis_vnprl_F2
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'RNAspike');
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(2).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(2).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(2).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(2).emo, data_info(mi(2).dataToMapTo), mi(2), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'MGa_deGFP');
%-- 2/18/19, 10:53 AM --%
analysis_vnprl_F2
close all
edit data_dsg2014_full.m
analysis_vnprl_F2
size(marray(:, 1:50:end,1:10:end))
120000/9600/10
120000/9600/10*25
%-- 2/19/19, 4:34 PM --%
analysis_vnprl_F2
%-- 2/20/19, 1:52 AM --%
analysis_vnprl_F2
mcmc_plot(marray(:, 1:5:end,(end-2000):10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
%     mcmc_plot(marray(:, 1:end,8000:20:end), parnames(:),...
%     'savematlabfig', figsave, 'savejpeg', jpgsave,...
%     'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
mcmc_plot(marray(:, 1:end,(end-2000):20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray(:, 1:end,(end-2000):40:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'RNAspike');
marrayOrd = mvarray(mi(2).paramMaps(mi(2).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(2).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(2).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(2).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(2).emo, data_info(mi(2).dataToMapTo), mi(2), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'MGa_deGFP');
%-- 2/20/19, 10:22 AM --%
analysis_vnprl_F2
%-- 2/20/19, 6:03 PM --%
analysis_vnprl_F2
close all
%-- 2/22/19, 12:17 PM --%
analysis_vnprl_F2
%-- 2/22/19, 4:16 PM --%
mcmc_plot(marray(:, 1:40:end,1:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithTransient');
mcmc_plot(marray(:, 1:end,(end-7000):20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S1/S1data.mat');
whos
clear all
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S1/S1data.mat');
whos
dose
t_est
t_ori
m
m.Reactions
Set1Data
format short g
Set1Data
edit IFFL_DATA_plot_multiple_2.m
IFFL_DATA_plot_multiple_2
addpath(genpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB'))
IFFL_DATA_plot_multiple_2
edit IFFL_DATA_plot_multiple_2
whos
clear all
%-- 2/23/19, 1:55 PM --%
editTest004_useTestForTraining
edit Test004_useTestForTraining
grpData_test
% IFFL data arranged in structures for plot_multiple.m
% this version differs from the first one in that the data is plotted in a
% 5 by 2 array, where the experimental and simulation data is plotted side
% by side
%% Step 1: Build time vectors and data matrices
tv =  60*(0:8:(8*60))';
dmo = zeros(length(tv), 35);% data matrix of trajectories generated using original parameters
dme = zeros(length(tv), 35);% data matrix of trajectories generated using estimated parameters
dmexp = zeros(length(tv), 3*35);% data matrix of experimental data in triplicate
% load 'x_ori', 't_ori', 'x_est', 't_est', 'm', 'Set1Data'
% These variables have the following forms
% x_ori, t_ori, and x_est, t_est are cell arrays, and Set1Data is a 3D
% array of num time points x 4 x 7, where the first column is time, and
% columns 2:4 are the triplicate repeats.
% construct the various data matrices
% load S1 data
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S1/S1data.mat');
% The data is in a 7 element cell array. But first we need to extract the
% GFP data
iGFP = findspecies(m, 'protein deGFP*');
for i = 1:7
%trajectories generated using estimated parameters
[T, it_ori, ~] = unique(t_ori{i});
gfpdata = interp1(T, x_ori{i}(it_ori,iGFP)/1000,tv);
dmo(:, i)= gfpdata;
%trajectories generated using estimated parameters
[T, it_est, ~] = unique(t_est{i});
gfpdata = interp1(T, x_est{i}(it_est,iGFP)/1000,tv);
dme(:, i)= gfpdata;
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(Set1Data(:,1,i));
dmexp(:,3*(i-1)+(1:3))= interp1(T, Set1Data(it_exp,2:4,i),tv);
end
% load S2 data
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S2/S2data.mat');
iGFP = findspecies(m, 'protein deGFP*');
for i = 1:7
offset = 7;
%trajectories generated using estimated parameters
[T, it_ori, ~] = unique(t_ori{i});
gfpdata = interp1(T, x_ori{i}(it_ori,iGFP)/1000,tv);
dmo(:, offset+i)= gfpdata;
%trajectories generated using estimated parameters
[T, it_est, ~] = unique(t_est{i});
gfpdata = interp1(T, x_est{i}(it_est,iGFP)/1000,tv);
dme(:, offset+i)= gfpdata;
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(Set2Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set2Data(it_exp,2:4,i),tv);
end
% load S3 and S4 data
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S3/S3S4data.mat');
iGFP = findspecies(m, 'protein deGFP*');
t_ori = T_ORI{1}; % first element is S3
x_ori = X_ORI{1};
t_est = T_EST{1};
x_est = X_EST{1};
for i = 1:7
offset = 14;
%trajectories generated using estimated parameters
[T, it_ori, ~] = unique(t_ori{i});
gfpdata = interp1(T, x_ori{i}(it_ori,iGFP)/1000,tv);
dmo(:, offset+i)= gfpdata;
%trajectories generated using estimated parameters
[T, it_est, ~] = unique(t_est{i});
gfpdata = interp1(T, x_est{i}(it_est,iGFP)/1000,tv);
dme(:, offset+i)= gfpdata;
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(Set3Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set3Data(it_exp,2:4,i),tv);
end
t_ori = T_ORI{2}; % second element is S4
x_ori = X_ORI{2};
t_est = T_EST{2};
x_est = X_EST{2};
iGFP = findspecies(m, 'protein deGFP*');
for i = 1:7
offset = 21;
%trajectories generated using estimated parameters
[T, it_ori, ~] = unique(t_ori{i});
gfpdata = interp1(T, x_ori{i}(it_ori,iGFP)/1000,tv);
dmo(:, offset+i)= gfpdata;
%trajectories generated using estimated parameters
[T, it_est, ~] = unique(t_est{i});
gfpdata = interp1(T, x_est{i}(it_est,iGFP)/1000,tv);
dme(:, offset+i)= gfpdata;
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(transformedSet4data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, transformedSet4data(it_exp,2:4,i),tv);
end
% load S5 data
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S5/S5data.mat');
iGFP = findspecies(m, 'protein deGFP*');
for i = 1:7
offset = 28;
%trajectories generated using estimated parameters
[T, it_ori, ~] = unique(t_ori{i});
gfpdata = interp1(T, x_ori{i}(it_ori,iGFP)/1000,tv);
dmo(:, offset+i)= gfpdata;
%trajectories generated using estimated parameters
[T, it_est, ~] = unique(t_est{i});
gfpdata = interp1(T, x_est{i}(it_est,iGFP)/1000,tv);
dme(:, offset+i)= gfpdata;
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(Set5Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set5Data(it_exp,2:4,i),tv);
end
dmexp
ixexp
% from original parameters
ixo = {[], [1 2 3 4 5 6 7]';
[], 14+[1 2 3 4 5 6 7]';
[], 21+[1 2 3 4 5 6 7]';
[],  7+[1 2 3 4 5 6 7]';
[], 28+[1 2 3 4 5 6 7]'};
% from estimated parameters
ixe = {[], [1 2 3 4 5 6 7]';
[], 14+[1 2 3 4 5 6 7]';
[], 21+[1 2 3 4 5 6 7]';
[],  7+[1 2 3 4 5 6 7]';
[], 28+[1 2 3 4 5 6 7]'};
% experimental data
ixexp = {[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
14*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
21*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
7*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
28*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []};
%% Step 3: build title arrays
textarray = {'pTet constitutive data', 'pTet constitutive fit';
'TetR repression data','TetR repression fit';
'aTc induction data','aTc induction fit';
'pLac constitutive data','pLac constitutive fit';
'3oc12 AHL induction data','3oc12 AHL induction fit'};
ta = struct('text', {textarray},...
'fontsize', 16);
%% Step 4: Build legend arrays
textarray = {{'4nM', '2nM', '1nM', '0.5nM', '0.25nM', '0.125nM', '0nM'};
{'2nM', '0.2nM', '0.02nM', '0.002nM', '0.0002nM', '0.00002nM', '0 nM'};
{'10000nM', '1000nM', '100nM', '10nM', '1nM', '0.1nM', '0 nM'};
{'4nM', '2nM', '1nM', '0.5nM', '0.25nM', '0.125nM', '0nM'};
{'10000nM', '1000nM', '100nM', '10nM', '1nM', '0.1nM', '0 nM'}};
la = struct('text', {textarray},...
'fontsize', 9, ...
'location', 'NorthWest');
%% Step 5: Build ylabels
textarray = {'GFP, uM','GFP, uM';
'GFP, uM','GFP, uM';
'GFP, uM','GFP, uM';
'GFP, uM','GFP, uM';
'GFP, uM','GFP, uM'};
yl = struct('text', {textarray},...
'fontsize', 12,...
'axislimit', 'rowmax');% 'individual', 'rowmax', or a scalar input of type double
%% Step 5: Build xlabels
textarray = {'time, hours','time, hours';
'time, hours','time, hours';
'time, hours','time, hours';
'time, hours','time, hours';
'time, hours','time, hours'};
xl = struct('text', {textarray},...
'fontsize', 12, ...
'axislimit', 8);
ixexp
ixexp{1}
ixexp{5,1}
%-- 2/23/19, 4:35 PM --%
whos
dir examples
edit induction.m
mobj = model_txtl_ptetdeGFP_pLactetR_aTc
mobj.reactions
edit txtl_prom_plas
edit txtl_protein_lasR.m
edit txtl_prom_plas
edit txtl_prom_plac
mLasR = model_txtl_pLacLasR_pLasdeGFP
tube
tube.Reactions
tube.parameters
tube.Userdata.ReactionConfig.Transcription_Rate/RNAlength
txparamname
addparameter(tube, txparamname,tube.Userdata.ReactionConfig.Transcription_Rate/RNAlength);
mLasR = model_txtl_pLacLasR_pLasdeGFP
dbstack
tube
tube.parameters
mLasR = model_txtl_pLacLasR_pLasdeGFP
dbstack
tube.parameters
sbioselect(mLasR, 'TX_transcription_utr1_deGFP')
sbioselect(tube, 'TX_transcription_utr1_deGFP')
sbioselect(tube, 'Type', 'Parameter', 'Name', 'TX_transcription_utr1_deGFP')
isempty(sbioselect(tube, 'Type', 'Parameter', 'Name', 'TX_transcription_utr1_deGFP'))
mLasR = model_txtl_pLacLasR_pLasdeGFP
mLasR
mLasR = model_txtl_pLacLasR_pLasdeGFP
mobj
mobj.rules
mLasR = model_txtl_pLacLasR_pLasdeGFP
tube.Rules
isempty(sbioselect(tube,'Type','Rule', 'Rule', ruleStr))
ruleStr
mLasR = model_txtl_pLacLasR_pLasdeGFP
mLasR.reactions
mtet = model_txtl_ptetdeGFP_pLactetR_aTc
mtet.reactions
mlac = model_txtl_pLacdeGFP
mlac.reactions
analysis_vnprl_F2
close
whos
clear mvarray
clear marray
clear marray_full
clear marrayOrd
whos
clear all
pwd
clear all
dataPath = [pwd '/mcmc_simbio/exp_data/Zach_IFFL_raw'];
%% Step 1: Build time vectors and data matrices
tv =  60*(0:8:(8*60))';
dmexp = zeros(length(tv), 3*35);% data matrix of experimental data in triplicate
% load S1 data
load([dataPath '/S1/S1data.mat']);
whos
clear all
addpath(genpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB'))
tv =  60*(0:8:(8*60))';
dmexp = zeros(length(tv), 3*35);% data matrix of experimental data in triplicate
% load S1 data
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S1/S1data.mat', 'Set1Data');
whos
load([dataPath '/S3/S3S4data.mat'], {'Set3Data', 'transformedSet4data'});
dataPath = [pwd '/mcmc_simbio/exp_data/Zach_IFFL_raw'];
load([dataPath '/S3/S3S4data.mat'], {'Set3Data', 'transformedSet4data'});
load([dataPath '/S3/S3S4data.mat'], 'Set3Data', 'transformedSet4data');
ixexp = {[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
14*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
21*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
7*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
28*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []};
ixexp
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
dataPath = [pwd '/mcmc_simbio/exp_data/Zach_IFFL_raw'];
%% Step 1: Build time vectors and data matrices
tv =  60*(0:8:(8*60))';
dmexp = zeros(length(tv), 3*35);% data matrix of experimental data in triplicate
% load S1 data
load([dataPath '/S1/S1data.mat'], 'Set1Data');
iGFP = findspecies(m, 'protein deGFP*');
for i = 1:7
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(Set1Data(:,1,i));
dmexp(:,3*(i-1)+(1:3))= interp1(T, Set1Data(it_exp,2:4,i),tv);
end
% load S2 data
load([dataPath '/S2/S1data.mat'], 'Set2Data');
iGFP = findspecies(m, 'protein deGFP*');
for i = 1:7
offset = 7;
[T, it_exp, ~] = unique(Set2Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set2Data(it_exp,2:4,i),tv);
end
% load S3 and S4 data
load([dataPath '/S3/S3S4data.mat'], 'Set3Data', 'transformedSet4data');
iGFP = findspecies(m, 'protein deGFP*');
for i = 1:7
offset = 14;
[T, it_exp, ~] = unique(Set3Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set3Data(it_exp,2:4,i),tv);
end
iGFP = findspecies(m, 'protein deGFP*');
for i = 1:7
offset = 21;
[T, it_exp, ~] = unique(transformedSet4data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, transformedSet4data(it_exp,2:4,i),tv);
end
% load S5 data
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S5/S5data.mat');
load([dataPath '/S5/S5data.mat'], 'Set5Data');
iGFP = findspecies(m, 'protein deGFP*');
for i = 1:7
offset = 28;
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(Set5Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set5Data(it_exp,2:4,i),tv);
end
%% Step 2: build index arrays
% experimental data
ixexp = {[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []; ... % 7 conditions for the ptet constitutive. 3 repeats each.
7*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
14*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []; ... % 7 conditions too... and so on.
21*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
28*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []};
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
dataPath = [pwd '/mcmc_simbio/exp_data/Zach_IFFL_raw'];
%% Step 1: Build time vectors and data matrices
tv =  60*(0:8:(8*60))';
dmexp = zeros(length(tv), 3*35);% data matrix of experimental data in triplicate
% load S1 data
load([dataPath '/S1/S1data.mat'], 'Set1Data');
for i = 1:7
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(Set1Data(:,1,i));
dmexp(:,3*(i-1)+(1:3))= interp1(T, Set1Data(it_exp,2:4,i),tv);
end
% load S2 data
load([dataPath '/S2/S1data.mat'], 'Set2Data');
for i = 1:7
offset = 7;
[T, it_exp, ~] = unique(Set2Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set2Data(it_exp,2:4,i),tv);
end
% load S3 and S4 data
load([dataPath '/S3/S3S4data.mat'], 'Set3Data', 'transformedSet4data');
for i = 1:7
offset = 14;
[T, it_exp, ~] = unique(Set3Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set3Data(it_exp,2:4,i),tv);
end
for i = 1:7
offset = 21;
[T, it_exp, ~] = unique(transformedSet4data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, transformedSet4data(it_exp,2:4,i),tv);
end
% load S5 data
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S5/S5data.mat');
load([dataPath '/S5/S5data.mat'], 'Set5Data');
for i = 1:7
offset = 28;
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(Set5Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set5Data(it_exp,2:4,i),tv);
end
%% Step 2: build index arrays
% experimental data
ixexp = {[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []; ... % 7 conditions for the ptet constitutive. 3 repeats each.
7*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
14*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []; ... % 7 conditions too... and so on.
21*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
28*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []};
%
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
dataPath = [pwd '/mcmc_simbio/exp_data/Zach_IFFL_raw'];
%% Step 1: Build time vectors and data matrices
tv =  60*(0:8:(8*60))';
dmexp = zeros(length(tv), 3*35);% data matrix of experimental data in triplicate
% load S1 data
load([dataPath '/S1/S1data.mat'], 'Set1Data');
for i = 1:7
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(Set1Data(:,1,i));
dmexp(:,3*(i-1)+(1:3))= interp1(T, Set1Data(it_exp,2:4,i),tv);
end
% load S2 data
load([dataPath '/S2/S2data.mat'], 'Set2Data');
for i = 1:7
offset = 7;
[T, it_exp, ~] = unique(Set2Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set2Data(it_exp,2:4,i),tv);
end
% load S3 and S4 data
load([dataPath '/S3/S3S4data.mat'], 'Set3Data', 'transformedSet4data');
for i = 1:7
offset = 14;
[T, it_exp, ~] = unique(Set3Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set3Data(it_exp,2:4,i),tv);
end
for i = 1:7
offset = 21;
[T, it_exp, ~] = unique(transformedSet4data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, transformedSet4data(it_exp,2:4,i),tv);
end
% load S5 data
load('/Users/vipulsinghal/Dropbox/110114/Vipul_computational/Computational Tools/S5/S5data.mat');
load([dataPath '/S5/S5data.mat'], 'Set5Data');
for i = 1:7
offset = 28;
% trajectories of original data in triplicate
[T, it_exp, ~] = unique(Set5Data(:,1,i));
dmexp(:,3*(offset+(i-1))+(1:3))= interp1(T, Set5Data(it_exp,2:4,i),tv);
end
%% Step 2: build index arrays
% experimental data
ixexp = {[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []; ... % 7 conditions for the ptet constitutive. 3 repeats each.
7*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
14*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []; ... % 7 conditions too... and so on.
21*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], [];
28*3+[1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21], []};
size(dmexp)
T
tv
[T tv]
size(T)
size(tv)
8*60*60
transformedSet4data(:,1,1)
transformedSet4data(:,1,2)
help unique
ixexp
da1 = zeros(length(tv), 1, 3, 7);
for rep = 1:3
for doseid = 1:7
da1(:, 1, i, j) = ixexp{1,1}(j, i);
end
end
da1 = zeros(length(tv), 1, 3, 7);
for rep = 1:3
for doseid = 1:7
da1(:, 1, rep, doseid) = ixexp{1,1}(doseid, rep);
end
end
da1
da1 = zeros(length(tv), 1, 3, 7);
for rep = 1:3
for doseid = 1:7
da1(:, 1, rep, doseid) = dmexp(:, ixexp{1,1}(doseid, rep));
end
end
da1
da = cell(5, 1);
for i = 1:5
da{i} = zeros(length(tv), 1, 3, 7);
for rep = 1:3
for doseid = 1:7
da{i}(:, 1, rep, doseid) = 1000*dmexp(:, ixexp{i,1}(doseid, rep));
end
end
end
da
plot(da{3}(:, 1, 1, 1))
plot(tv, da{3}(:, 1, 1, 1))
figure; plot(tv, da{3}(:, 1, 1, 1))
figure; plot(tv/3600, da{3}(:, 1, 1, 1))
figure; plot(tv/3600, da{2}(:, 1, 1, 1))
figure; plot(tv/3600, da{1}(:, 1, 1, 1))
figure; plot(tv/3600, da{3}(:, 1, 1, 6))
figure; plot(tv/3600, da{3}(:, 1, 1, 7))
figure; plot(tv/3600, da{5}(:, 1, 1, 7))
figure; plot(tv/3600, da{5}(:, 1, 1, 2))
close all
di1 = struct('dataInfo', datadescription(1), ...
'timeVector', {tv}, ...
'timeUnits', {'seconds'},...
'dataArray', da(1),...
'measuredNames', {mn},...
'dataUnits', {{'nM'}},...
'dimensionLabels', {dimlabels}, ...
'dosedNames', {dosedNames1},...
'dosedVals', {dv1}, ...
'doseUnits', 'nM');
di2 = struct('dataInfo', datadescription(2), ...
'timeVector', {tv}, ...
'timeUnits', {'seconds'},...
'dataArray', da(2),...
'measuredNames', {mn},...
'dataUnits', {{'nM'}},...
'dimensionLabels', {dimlabels}, ...
'dosedNames', {dosedNames2},...
'dosedVals', {dv2}, ...
'doseUnits', 'nM');
di3 = struct('dataInfo', datadescription(3), ...
'timeVector', {tv}, ...
'timeUnits', {'seconds'},...
'dataArray', da(3),...
'measuredNames', {mn},...
'dataUnits', {{'nM'}},...
'dimensionLabels', {dimlabels}, ...
'dosedNames', {dosedNames3},...
'dosedVals', {dv3}, ...
'doseUnits', 'nM');
di4 = struct('dataInfo', datadescription(4), ...
'timeVector', {tv}, ...
'timeUnits', {'seconds'},...
'dataArray', da(4),...
'measuredNames', {mn},...
'dataUnits', {{'nM'}},...
'dimensionLabels', {dimlabels}, ...
'dosedNames', {dosedNames4},...
'dosedVals', {dv4}, ...
'doseUnits', 'nM');
di5 = struct('dataInfo', datadescription(5), ...
'timeVector', {tv}, ...
'timeUnits', {'seconds'},...
'dataArray', da(5),...
'measuredNames', {mn},...
'dataUnits', {{'nM'}},...
'dimensionLabels', {dimlabels}, ...
'dosedNames', {dosedNames5},...
'dosedVals', {dv5}, ...
'doseUnits', 'nM');
di6 = struct('dataInfo', datadescription(6), ...
'timeVector', {tv}, ...
'timeUnits', {'seconds'},...
'dataArray', da(6),...
'measuredNames', {mn},...
'dataUnits', {{'nM'}},...
'dimensionLabels', {dimlabels}, ...
'dosedNames', {dosedNames6},...
'dosedVals', {dv6}, ...
'doseUnits', 'nM');
di7 = struct('dataInfo', datadescription(7), ...
'timeVector', {tv}, ...
'timeUnits', {'seconds'},...
'dataArray', da(7),...
'measuredNames', {mn},...
'dataUnits', {{'nM'}},...
'dimensionLabels', {dimlabels}, ...
'dosedNames', {dosedNames7},...
'dosedVals', {dv7}, ...
'doseUnits', 'nM');
di = [di1, di2, di3, di4, di5, di6, di7];
di
clc
di
mcmc_trajectories
help mcmc_trajectories
mcmc_trajectories([], di, [], [], [], [], 'just_data_info', true);
dosedNames2
di = data_ZSIFFL; mcmc_trajectories([], di, [], [], [], [], 'just_data_info', true);
currdi.measuredNames
currdi.measuredNames{msnum}
hello = {'a', 's', 'r'}
figure; plot(sin(1:100)); title(hello{1:3})
di = data_ZSIFFL; mcmc_trajectories([], di, [], [], [], [], 'just_data_info', true);
title(currdi.measuredNames{msnum}{1:end})
close all
clear all
clc
analysis_vnprl_F2
clc
clear all
clc
di = data_ZSIFFL; mcmc_trajectories([], di, [], [], [], [], 'just_data_info', true);
close all
edit gftuple
ver
%-- 3/12/19, 1:52 PM --%
uiopen('/Volumes/DRBANNER/pisces/Yanxia/080317MouseLiverAdult/transcriptomeObj/headerType.matb',1)
load /Volumes/DRBANNER/pisces/Yanxia/080317MouseLiverAdult/transcriptomeObj/headerType.matb
load('/Volumes/DRBANNER/pisces/Yanxia/080317MouseLiverAdult/transcriptomeObj/headerType.matb')
load('/Volumes/DRBANNER/pisces/Yanxia/080317MouseLiverAdult/transcriptomeObj/id2Ind.matb')
txtl_init
mcmc_init
edit proj_tierra2018_calibration.m
edit proj_tierra2018_calibration_B.m
edit proj_acs_dsg2014_regen_F1.m
edit mcmc_info_constgfp3ii.m
edit data_dsg2014.m
[a, b, c] = import_ptetconstitutive;
a
b
c
b
c
a
a/60
a(1:13)/60
a(1:13)/3600
[tptet , data_ptet, dvptet] = import_ptetconstitutive;
[ttetR , data_tetR, dvtetR] = import_ptetconstitutive;
% data_array is nT x nMS x nIC x nEnv.
% need to separate out the Envs in the different data info entries.
% need to have data array be time by ms by reps by doses.
da1temp = data_ptet(1:13, :, :, 1);
da1 = permute(da1temp, [1, 2, 4, 3]);
da2temp = data_ptet(1:13, :, :, 2);
da2 = permute(da2temp, [1, 2, 4, 3]);
da3temp = data_ptet(1:13, :, :, 3);
da3 = permute(da3temp, [1, 2, 4, 3]);
da4temp = data_tetR(1:13, :, :, 1);
da4 = permute(da4temp, [1, 2, 4, 3]);
da5temp = data_tetR(1:13, :, :, 2);
da5 = permute(da5temp, [1, 2, 4, 3]);
da6temp = data_tetR(1:13, :, :, 3);
da6 = permute(da6temp, [1, 2, 4, 3]);
dvtetR
[tptet , data_ptet, dvptet] = import_ptetconstitutive;
[ttetR , data_tetR, dvtetR] = import_tetR_repression;
% data_array is nT x nMS x nIC x nEnv.
% need to separate out the Envs in the different data info entries.
% need to have data array be time by ms by reps by doses.
da1temp = data_ptet(1:13, :, :, 1);
da1 = permute(da1temp, [1, 2, 4, 3]);
da2temp = data_ptet(1:13, :, :, 2);
da2 = permute(da2temp, [1, 2, 4, 3]);
da3temp = data_ptet(1:13, :, :, 3);
da3 = permute(da3temp, [1, 2, 4, 3]);
da4temp = data_tetR(1:13, :, :, 1);
da4 = permute(da4temp, [1, 2, 4, 3]);
da5temp = data_tetR(1:13, :, :, 2);
da5 = permute(da5temp, [1, 2, 4, 3]);
da6temp = data_tetR(1:13, :, :, 3);
da6 = permute(da6temp, [1, 2, 4, 3]);
dvtetR
ttetR
ttetR(1:13)/3600
di = data_test015;
di
di(3)
mcmc_trajectories([], di, [], [], [], [], 'just_data_info', true);
mcmc_trajectories([], di(2), [], [], [], [], 'just_data_info', true);
mcmc_trajectories([], di(3), [], [], [], [], 'just_data_info', true);
mcmc_trajectories([], di(4), [], [], [], [], 'just_data_info', true);
mcmc_trajectories([], di(6), [], [], [], [], 'just_data_info', true);
currdi.measuredNames{msnum}{1:end}
msnum
mcmc_trajectories([], di(6), [], [], [], [], 'just_data_info', true);
di(2)
di(4)
di(4).dosedVals
proj_test015
edit analysis_regen_F1.m
close all
analysis_test015calib
proj_test015
analysis_test015calib
close all
analysis_test015calib
mi
length(mi(1).measuredSpeciesIndex)
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'RNAspike');
mi(1).dataToMapTo
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(1)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', true,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', ts1,...
'extrafignamestring', 'RNAspike');
close all
clc
marray(:, 600,end)
marray(:, end,end)
{'kfdG'
'krdG'
'kcp1'
'kcp2'
'pol1'
'pol2'};
[{'kfdG'
'krdG'
'kcp1'
'kcp2'
'pol1'
'pol2'}, marray(:, end,end)]
'pol2'}, mat2cell(marray(:, end,end))]
[{'kfdG'
'krdG'
'kcp1'
'kcp2'
'pol1'
'pol2'}, mat2cell(marray(:, end,end))]
help mat2cell
[{'kfdG'
'krdG'
'kcp1'
'kcp2'
'pol1'
'pol2'}, mat2cell(marray(:, end,end), ones(6,1), 1)]
[parnames, mat2cell(marray(:, end,end), ones(6,1), 1)]
dir mcmc_simbio/models_and_supporting_files/
edit model_tetR_repression1.m
dir mcmc_simbio/models_and_supporting_files/
edit mcmc_info_tetR_1i
%
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(1)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E1');
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(2)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E2');
mi(1).orderingIx
mi(1)
mi(1).paramMaps
mi(1).paramMaps(mi(1).orderingIx)
close all
clc
di
di(4)
di(4).dosedNames
di(4).dosedVals
[parnames, mat2cell(marray(:, end,end), ones(6,1), 1)]
[parnames, mat2cell(marray(:, [1 30 200 500 1100],end), ones(6,1), [1 1 1 1 1])]
[parnames, mat2cell(marray(:, [1 30 200 500 700 900 1100],end), ones(6,1), [1 1 1 1 1 1 1 1])]
[parnames, mat2cell(marray(:, [1 30 200 350 500 700 900 1100],end), ones(6,1), [1 1 1 1 1 1 1 1])]
[parnames, mat2cell(marray(:, [1:12:240],end), ones(6,1), ones(1,20))]
[parnames, mat2cell(marray(:, [14],end), ones(6,1), ones(1,1))]
[1:12:240]
aaa = [1:12:240]
aaa(14)
[parnames, mat2cell(marray(:, [157],end), ones(6,1), ones(1,1))]
proj_test_15_corr1
proj_test015_corr1
di(4).dosedNames
flipud([   10.0000   10.0000   10.0000   10.0000   10.0000   10.0000   10.0000   10.0000
0    0.2500    0.5000    0.7500    1.0000    2.0000    5.0000   10.0000])
proj_test015_corr1
close all
pwd
mai
mvarray = masterVecArray(marray, mai)
mai.masterVector
mvarray(:,end-3:end,end
mvarray(:,end-3:end,end)
close all
clc
mai.fixedParams
mai.masterVector
kcp1 = exp(  5.9874);
pol1 = exp(-11.3549);
espvec = [ 5.9874; -11.3549]
% next we simulate the results with the estimated test CSP params and
% the non CSP fixing ESPs above.
% create a master info
szm = size(marray);
mvarray = repmat(mai.masterVector, [1, szm(2:end)]) ;
eparray = repmat(espvec, [1, szm(2:end)]) ;
estParamsIx = setdiff((1:length(mai.masterVector))', mai.fixedParams);
mvarray(estParamsIx, :, :) = marray;
mvarray(mai.fixedParams, :, :) = eparray;
mvarray(:,1:3,1:4)
mi(1).dosedVals
titls
titls_array
mobj
mobj.reactions
help sbiosimulate
[T,X,NAMES] = sbiosimulate(mobj)
[T,X,NAMES] = sbiosimulate(mobj)cs = getconfigset(m, 'active');
set(cs, 'StopTime', 60);
cs = getconfigset(m, 'active');
set(cs, 'StopTime', 60);
m = mobj
cs = getconfigset(m, 'active');
set(cs, 'StopTime', 60);
cs = getconfigset(m, 'active');
set(cs, 'StopTime', 3660);
[T,X,NAMES] = sbiosimulate(mobj)
mobj.Parameters
mobj.species
mi(1).emo
data_info(mi(1).dataToMapTo(1))
mi
mi.dosedNames
data_info(mi(1).dataToMapTo(1)).dosedVals
mi.namesOrd
mi.namesUnord
mobj.species
size(marrayOrd)
(marrayOrd(:,2,2))
mi(1).paramMaps(mi(1).orderingIx,1
mi(1).paramMaps(mi(1).orderingIx,1)
set(mi(1).emo)
get(mi(1).emo)
get(mi(1).emo, 'ValueInfo')
vi=get(mi(1).emo, 'ValueInfo')
vi(:)
vi(1)
for i = 1:12
vi(i)
end
mi.namesOrd
vi
vi(8)
vi(9)
vi(10)
vi(10).InitialValue = 100
vi(11).InitialValue = 2
vi(12).InitialValue = 20
[T,X,NAMES] = sbiosimulate(mobj)
[T,X,NAMES] = sbiosimulate(m)
sd = simulate(mi(1).emo)
sd.data
sd.DataNames
mobj = model_tetR_repression1
[T,X,NAMES] = sbiosimulate(mobj)
mobj.Species
mobj.Species(7)
mobj.Species(1).InitialAmount = 0.1
[T,X,NAMES] = sbiosimulate(mobj)
mobj.Species(1).InitialAmount = 0
[T,X,NAMES] = sbiosimulate(mobj)
figure
plot(T, X(:,7))
hold on
mobj.Species(1).InitialAmount = 0.1
[T1,X1,NAMES] = sbiosimulate(mobj);
mobj.Species(1).InitialAmount = 2
[T2,X2,NAMES] = sbiosimulate(mobj);
plot(T1, X1(:,7), 'r')
plot(T2, X2(:,7), 'g')
mobj.Species(1).InitialAmount = 20
plot(T3, X3(:,7), 'g:')
[T3,X3,NAMES] = sbiosimulate(mobj);
plot(T3, X3(:,7), 'g:')
mobj.Parameters
mobj.Parameters.Value
mobj.Parameters(1).Value
log([1 6 .012 1 6 2 4 2 4 100])
exp(-12)
exp(5)
exp(-8)
marrayOrd(:,1,1)
marrayOrd(:,1,end)
analysis_test015corr1_Ffix
em
m
size(m)
p.nSimCurves
dose
tv
ms
ms{1}
[exp(m(end - kk+1,:)'); dose(i,:)']
em.ValueInfo
em.ValueInfo(11)
em.ValueInfo(12)
em.ValueInfo(10)
ms{ss}
XX
analysis_test015corr1_Ffix
da
da(:,:,1:3,:)
da(:,:,1,:)
da(:,:,1,:)*1000
[exp(m(end - kk+1,:)'); dose(i,:)']
sbioplot(sd)
edit proj_test015.m
da1temp = data_ptet(1:13, :, :, 1);
da1 = permute(da1temp, [1, 2, 4, 3]);
da2temp = data_ptet(1:13, :, :, 2);
da2 = permute(da2temp, [1, 2, 4, 3]);
da3temp = data_ptet(1:13, :, :, 3);
da3 = permute(da3temp, [1, 2, 4, 3]);
da4temp = data_tetR(1:13, :, :, 1);
da4 = permute(da4temp, [1, 2, 4, 3]);
da5temp = data_tetR(1:13, :, :, 2);
da5 = permute(da5temp, [1, 2, 4, 3]);
da6temp = data_tetR(1:13, :, :, 3);
da6 = permute(da6temp, [1, 2, 4, 3]);
da1
di = data_test015
mcmc_trajectories([], di, [], [], [], [], 'just_data_info', true);
mcmc_trajectories([], di(2), [], [], [], [], 'just_data_info', true);
close all
edit analysis_test015calib.m
analysis_test015calib
[parnames, mat2cell(marray(:, [1:12:240],end), ones(6,1), ones(1,20))]
[parnames, mat2cell(marray(:, [25],end), ones(6,1), ones(1,1))]
edit proj_test015_corr1.m
close all
proj_test015_corr1_Ffix
mi.namesOrd
mi
mai
clc
clear all
close all
mcmc_plot(marray(:, 1:end,(end-2000):100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithoutTr_E2');
mai.fixedParams
mai
mai.masterVector
mai.estNames
log(2)
mi(1).dataToMapTo(1)
edit analysis_test015corr1_Ffix.m
close all
[parnames, mat2cell(marray(:, [1:12:12*40],end), ones(6,1), ones(1,40))]
[parnames, mat2cell(marray(:, [1:12:12*40],end), ones(6,1), ones(1,41))]
[parnames, mat2cell(marray(:, [1:12:12*40],end), ones(4,1), ones(1,41))]
[1:12:12*40]
[parnames, mat2cell(marray(:, [1:12:12*40],end), ones(4,1), ones(1,40))]
size(marray)
parnames
[parnames([2 4 5 7]), mat2cell(marray(:, [1:12:12*40],end), ones(4,1), ones(1,40))]
mcmc_plot(marray([1 2 3 5], 1:end,(end-2000):100:end), parnames([1 2 3 5]),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithoutTr_E1');
%     mcmc_plot(marray([1 2 4 6], 1:10:end,1:100:end), parnames([1 2 4 6]),...
%     'savematlabfig', figsave, 'savejpeg', jpgsave,...
%     'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithTr_E2');
mcmc_plot(marray([1 2 4 6], 1:end,(end-2000):100:end), parnames([1 2 4 6]),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithoutTr_E2');
mcmc_plot(marray(:, 1:10:end,1:100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
edit proj_test015.m
mstack = marray(:, :)
mstack = marray(:, :)';
size(mstack)
ixs = find(mstack(:, 1)>-4.6 & mstack(:, 1)<-4)
ixs = find(mstack(:, 1)>-4.6 & mstack(:, 1)<-4);
size(ixs)
marray_red = marray(:, :,1:100:end);
mstack = marray_red(:, :)';
ixs = find(mstack(:, 1)>-4.6 & mstack(:, 1)<-4);
size(ixs)
mcmc_plot(mstack, parnames(:))
mcmc_plot(mstack(ixs,:), parnames(:))
mstack = marray(:, :)';
size(mstack)
ixs = find(mstack(:, 1)>-4.6 & mstack(:, 1)<-4)
ixs = find(mstack(:, 1)>-4.6 & mstack(:, 1)<-4);
size(ixs)
marray_red = marray(:, :,1:100:end);
mstack = marray_red(:, :)';
ixs = find(mstack(:, 1)>-4.6 & mstack(:, 1)<-4);
size(ixs)
mcmc_plot(mstack, parnames(:))
mcmc_plot(mstack(ixs,:), parnames(:))sdfwer2
close
size(marray)
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx,1),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(1)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E1');
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx,2),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(2)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E2');
size(marray)
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
%%
% close
% marray_red = marray(:, :,(end-16000:50:end));
% mstack = marray_red(:, :)';
% ixs = find(mstack(:, 1)>-4.7 & mstack(:, 1)<-3.45);
% mcmc_plot(mstack(ixs,:), parnames(:))
%%
mcmc_plot(marray(:, 1:10:end,1:100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
mcmc_plot(marray(:, 1:10:end,(end-8000):100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:10:end,(end-12000):100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,(end-6000):100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,(end-10000):500:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
edit analysis_test015calib.m
analysis_test015calib
mcmc_plot(marray(:, 1:end,(end-5000):500:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
analysis_test015calib
size(marray)
analysis_test015calib
size(marray)
mcmc_plot(marray(:, 1:end,(end-16000):1000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
%%
close
marray_red = marray(:, :,(end-8000:250:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 1)>-4.7 & mstack(:, 1)<-3.5);
mcmc_plot(mstack(ixs,:), parnames(:))
%%
%     mcmc_plot(marray(:, 1:end,1:500:end), parnames(:),...
%     'savematlabfig', figsave, 'savejpeg', jpgsave,...
%     'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
mcmc_plot(marray(:, 1:end,(end-16000):500:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
analysis_test015calib
mcmc_plot(marray(:, 1:10:end,1:1000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
mcmc_plot(marray(:, 1:4:end,1:250:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
close all
analysis_test015calib
mcmc_plot(marray(:, 1:end,(end-20000):1000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,(end-20000):500:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,(end-10000):300:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,(end-5000):250:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,(end-7500):250:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,(end-7500):1000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,(end-1200):2000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,(end-12000):2000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,(end-20000):2000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
%%
% close
% marray_red = marray(:, :,(end-18000:1000:end));
% mstack = marray_red(:, :)';
% ixs = find(mstack(:, 1)>-4.7 & mstack(:, 1)<-3.5);
% mcmc_plot(mstack(ixs,:), parnames(:))
%%
mcmc_plot(marray(:, 1:end,1:2000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
mcmc_plot(marray(:, 1:end,(end-10000):1000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
mcmc_plot(marray(:, 1:end,1:4000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
marray_red = marray(:, :,(end-10000:1000:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-3.5 & mstack(:, 4)<-2.5 &...
mstack(:, 6)>2.5 & mstack(:, 6)<3);
mcmc_plot(mstack(ixs,:), parnames(:))
close
marray_red = marray(:, :,(end-10000:200:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-3.5 & mstack(:, 4)<-2.5 &...
mstack(:, 6)>2.5 & mstack(:, 6)<3);
mcmc_plot(mstack(ixs,:), parnames(:))
marray_red = marray(:, :,(end-10000:200:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-3.1 & mstack(:, 4)<-2.8 &...
mstack(:, 6)>2.5 & mstack(:, 6)<2.8);
mcmc_plot(mstack(ixs,:), parnames(:))
marray_red = marray(:, :,(end-10000:200:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-3.14 & mstack(:, 4)<-3 &...
mstack(:, 6)>2.64 & mstack(:, 6)<2.7);
mcmc_plot(mstack(ixs,:), parnames(:))
marray_red = marray(:, :,(end-10000:200:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-2.93 & mstack(:, 4)<-2.8 &...
mstack(:, 6)>2.62 & mstack(:, 6)<2.66);
mcmc_plot(mstack(ixs,:), parnames(:))
close all
clear all
clc
analysis_test015corr1_Ffix
% figure
% % The ESPs we use are
kcp1 =   -3.7404;
pol1 =4.0991;
%
espvec = [ kcp1; pol1];
fixparamvec = [log(2); espvec];
%
% % next we simulate the results with the estimated test CSP params and
% % the non CSP fixing ESPs above.
%
% % create a master info
%
szm = size(marray);
mvarray_corr21 = repmat(mai.masterVector, [1, szm(2:end)]) ;
fixarray = repmat(fixparamvec, [1, szm(2:end)]) ;
estParamsIx = setdiff((1:length(mai.masterVector))', mai.fixedParams);
mvarray_corr21(estParamsIx, :, :) = marray;
mvarray_corr21(mai.fixedParams, :, :) = fixarray;
samplePoints = ceil(size(mvarray_corr21, 3) * [.9, 1]);
%
marrayOrd = mvarray_corr21(mi(1).paramMaps(mi(1).orderingIx,1),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'GFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{1,j} 'nM initial tetR DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{1,j} 'nM initial tetR DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(4), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E2');
% % The ESPs we use are
kcp1 =   0.59;
pol1 =0.369;
%
espvec = [ kcp1; pol1];
fixparamvec = [log(2); espvec];
%
% % next we simulate the results with the estimated test CSP params and
% % the non CSP fixing ESPs above.
%
% % create a master info
%
szm = size(marray);
mvarray_corr21 = repmat(mai.masterVector, [1, szm(2:end)]) ;
fixarray = repmat(fixparamvec, [1, szm(2:end)]) ;
estParamsIx = setdiff((1:length(mai.masterVector))', mai.fixedParams);
mvarray_corr21(estParamsIx, :, :) = marray;
mvarray_corr21(mai.fixedParams, :, :) = fixarray;
samplePoints = ceil(size(mvarray_corr21, 3) * [.9, 1]);
%
marrayOrd = mvarray_corr21(mi(1).paramMaps(mi(1).orderingIx,1),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'GFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{1,j} 'nM initial tetR DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{1,j} 'nM initial tetR DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(4), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E2');
% figure
% % The ESPs we use are
kcp1 =   9.8;
pol1 =0.369;
%
espvec = [ kcp1; pol1];
fixparamvec = [log(2); espvec];
%
% % next we simulate the results with the estimated test CSP params and
% % the non CSP fixing ESPs above.
%
% % create a master info
%
szm = size(marray);
mvarray_corr21 = repmat(mai.masterVector, [1, szm(2:end)]) ;
fixarray = repmat(fixparamvec, [1, szm(2:end)]) ;
estParamsIx = setdiff((1:length(mai.masterVector))', mai.fixedParams);
mvarray_corr21(estParamsIx, :, :) = marray;
mvarray_corr21(mai.fixedParams, :, :) = fixarray;
samplePoints = ceil(size(mvarray_corr21, 3) * [.9, 1]);
%
marrayOrd = mvarray_corr21(mi(1).paramMaps(mi(1).orderingIx,1),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'GFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{1,j} 'nM initial tetR DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{1,j} 'nM initial tetR DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(4), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E2');
% figure
% % The ESPs we use are
kcp1 =   -3.7404;
pol1 =3.0991;
%
espvec = [ kcp1; pol1];
fixparamvec = [log(2); espvec];
%
% % next we simulate the results with the estimated test CSP params and
% % the non CSP fixing ESPs above.
%
% % create a master info
%
szm = size(marray);
mvarray_corr21 = repmat(mai.masterVector, [1, szm(2:end)]) ;
fixarray = repmat(fixparamvec, [1, szm(2:end)]) ;
estParamsIx = setdiff((1:length(mai.masterVector))', mai.fixedParams);
mvarray_corr21(estParamsIx, :, :) = marray;
mvarray_corr21(mai.fixedParams, :, :) = fixarray;
samplePoints = ceil(size(mvarray_corr21, 3) * [.9, 1]);
%
marrayOrd = mvarray_corr21(mi(1).paramMaps(mi(1).orderingIx,1),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'GFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{1,j} 'nM initial tetR DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{1,j} 'nM initial tetR DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(4), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E2');
close all
clear all
clc
analysis_test015calib_kdfgfix
analysis_test015calib
size(marray)
mcmc_plot(marray(:, 1:end,(end-20000):300:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
marray_red = marray(:, :,((end-20000):100:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-2.89 & mstack(:, 4)<-2.85 &...
mstack(:, 6)>2.63 & mstack(:, 6)<2.65);
mcmc_plot(mstack(ixs,:), parnames(:))
marray_red = marray(:, :,((end-20000):end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-2.89 & mstack(:, 4)<-2.85 &...
mstack(:, 6)>2.63 & mstack(:, 6)<2.65);
mcmc_plot(mstack(ixs,:), parnames(:))
analysis_test015corr1_Ffix2
edit analysis_test015corr1.m
edit analysis_test015corr1_Ffix.m
analysis_test015corr1_Ffix
size(marray)
mcmc_plot(marray(:, 1:end,(end-3000):50:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithoutTr_E2');
%-- 3/18/19, 1:56 PM --%
analysis_test015calib
mcmc_plot(marray(:, 1:end,(end-15000):500:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
marray_red = marray(:, :,((end-14000):10:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-2.89 & mstack(:, 4)<-2.85 &...
mstack(:, 6)>2.63 & mstack(:, 6)<2.65);
mcmc_plot(mstack(ixs,:), parnames(:))
analysis_test015calib
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx,1),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(1)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E1');
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx,2),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(2)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E2');
analysis_test015calib
ixs
length(ixs)
help save
ESP2_tilda = mstack(ixs,:);
save('ESP2 points', 'ESP2_tilda')
ESP2_tilda
figure; subplot(2,2,1); hist(ESP2_tilda(:,1))
help hist
marray_red = marray(:, :,((end-2600):200:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-2.90 & mstack(:, 4)<-2.84 &...
mstack(:, 6)>2.61 & mstack(:, 6)<2.67);
mcmc_plot(mstack(ixs,:), parnames(:))
ESP2_tilda = mstack(ixs,:);
save('ESP2 points', 'ESP2_tilda')
figure; subplot(2,2,1); hist(ESP2_tilda(:,1))
figure; subplot(2,2,2); hist(ESP2_tilda(:,2))
subplot(2,2,2); hist(ESP2_tilda(:,2))
subplot(2,2,3); hist(ESP2_tilda(:,3))
subplot(2,2,1); hist(ESP2_tilda(:,1))
subplot(2,2,4); hist(ESP2_tilda(:,4)
subplot(2,2,4); hist(ESP2_tilda(:,4))
subplot(2,2,4); hist(ESP2_tilda(:,5))
analysis_test015corr1_Ffix
size(ESP2_tilda)
help randperm
randperm(length(ESP2_tilda), 20)
analysis_test015corr1_Ffix
size(marray_thin)
curr_calib = ESP2_tilda(ix_to_use(i), :);
% find the elements of mstacked that are within the set
kf_range = [curr_calib(1)-epsilon curr_calib(1)+epsilon];
kr_range = [curr_calib(2)-epsilon curr_calib(2)+epsilon];
ixs = find(mstacked(:, 1)>-kf_range(1) & mstacked(:, 1)<-kf_range(2) &...
mstacked(:, 2)>kr_range(1) & mstacked(:, 2)<kr_range(1));
figure
load('ESP2 points', 'ESP2_tilda')
% now for 20 points in ESP2_tilda, get the CSP and ESP1, and for those
% CSPs, get the corresponding subset of test csps.
%
% then generate 20 plots of the trajectories from these 20 points. And see
% which fit the data.
ix_to_use = randperm(length(ESP2_tilda), 20);
% test params:
marray_thin = marray(:, :,1:200:end);
mstacked = marray_thin(:,:)';
epsilon = 0.1;
for i = 1%:length(ix_to_use)
curr_calib = ESP2_tilda(ix_to_use(i), :);
% find the elements of mstacked that are within the set
kf_range = [curr_calib(1)-epsilon curr_calib(1)+epsilon];
kr_range = [curr_calib(2)-epsilon curr_calib(2)+epsilon];
ixs = find(mstacked(:, 1)>-kf_range(1) & mstacked(:, 1)<-kf_range(2) &...
mstacked(:, 2)>kr_range(1) & mstacked(:, 2)<kr_range(1));
figure
end
ixs
load('ESP2 points', 'ESP2_tilda')
% now for 20 points in ESP2_tilda, get the CSP and ESP1, and for those
% CSPs, get the corresponding subset of test csps.
%
% then generate 20 plots of the trajectories from these 20 points. And see
% which fit the data.
ix_to_use = randperm(length(ESP2_tilda), 20);
% test params:
marray_thin = marray(:, :,1:200:end);
mstacked = marray_thin(:,:)';
epsilon = 0.1;
ixs = cell(length(ix_to_use),1)
for i = 1:length(ix_to_use)
curr_calib = ESP2_tilda(ix_to_use(i), :);
% find the elements of mstacked that are within the set
kf_range = [curr_calib(1)-epsilon curr_calib(1)+epsilon];
kr_range = [curr_calib(2)-epsilon curr_calib(2)+epsilon];
ixs{i} = find(mstacked(:, 1)>-kf_range(1) & mstacked(:, 1)<-kf_range(2) &...
mstacked(:, 2)>kr_range(1) & mstacked(:, 2)<kr_range(1));
figure
end
close all
kr_range
kf_range
ESP2_tilda
mstacked(1:10,)
mstacked(1:10,:)
ixs
close all
kr_range
mstacked(:, 1)>kf_range(1)
ixs(2)
isempty(ixs(2))
isempty(ixs{2})
length(ixs{2})
length(ixs{3})
mi(1).paramMaps(mi(1).orderingIx,1)
for i = 1:length(ix_to_use)
curr_calib = ESP2_tilda(ix_to_use(i), :);
% find the elements of mstacked that are within the set
kf_range = [curr_calib(1)-epsilon curr_calib(1)+epsilon];
kr_range = [curr_calib(2)-epsilon curr_calib(2)+epsilon];
ixs{i} = find(mstacked(:, 1)>kf_range(1) & mstacked(:, 1)<kf_range(2) &...
mstacked(:, 2)>kr_range(1) & mstacked(:, 2)<kr_range(2));
%     pause(1)
figure
if ~isempty(ixs{i})
mvarray = repmat(mai.masterVector, [1,  length(ixs{3})]) ;
mvarray(:, estParamsIx) = mstacked(ixs{i});
marrayOrd = mvarray(:,mi(1).paramMaps(mi(1).orderingIx,1));
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'GFP'};
for k = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, k) = {[ms{k} ', ' titls{1,j} 'nM initial tetR DNA, Exp data']};
titls_array(j, 2, k) = {[ms{k} ', ' titls{1,j} 'nM initial tetR DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(1)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'test');
end
%
end
close all
clear all
analysis_test015corr1_Ffix
estParamsIx
analysis_test015corr1_Ffix
mai.masterVector
mai.masterVector'
repmat
help repmat
analysis_test015corr1_Ffix
close all
mstacked(ixs{i}, :)
mai
mai.estNames
mai.fixedParams
ixs_calib = find(ESP2_tilda(:, 4)>-2.88 & ESP2_tilda(:, 4)<-2.86 &...
ESP2_tilda(:, 6)>2.63 & ESP2_tilda(:, 6)<2.65);
ESP2_tilda2 = ESP2_tilda(ixs_calib,:);
ESP2_tilda2
size(ESP2_tilda2)
analysis_test015calib
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx,1),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(1)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E1');
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx,2),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(2)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E2');
mi(1).paramMaps
mi(1).paramMaps(mi(1).orderingIx,2)
mi(1).paramMaps(mi(1).orderingIx)
mi(1).paramMaps(mi(1).orderingIx,:)
edit proj_test015_corr1_Ffix3.m
mcmc_plot(marray(:, 1:end,(end-8000):1000:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
close
marray_red = marray(:, :,((end-8000):200:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-0.2447-0.1 & mstack(:, 4)<-0.2447+0.1 &...
mstack(:, 6)>0.5928-0.1 & mstack(:, 6)<0.5928+0.1);
mcmc_plot(mstack(ixs,:), parnames(:))
ESP2_tilda_ii = mstack(ixs,:);
ESP2_tilda_ii
marray_red = marray(:, :,((end-8000):1:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-0.2447-0.1 & mstack(:, 4)<-0.2447+0.1 &...
mstack(:, 6)>0.5928-0.1 & mstack(:, 6)<0.5928+0.1);
mcmc_plot(mstack(ixs,:), parnames(:))
ESP2_tilda_ii = mstack(ixs,:);
epsi = 0.02
marray_red = marray(:, :,((end-8000):1:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-0.2447-epsi & mstack(:, 4)<-0.2447+epsi &...
mstack(:, 6)>0.5928-epsi & mstack(:, 6)<0.5928+epsi);
mcmc_plot(mstack(ixs,:), parnames(:))
ESP2_tilda_ii = mstack(ixs,:);
close
close
epsi = 0.02
marray_red = marray(:, :,((end-12000):1:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-0.2447-epsi & mstack(:, 4)<-0.2447+epsi &...
mstack(:, 6)>0.5928-epsi & mstack(:, 6)<0.5928+epsi);
mcmc_plot(mstack(ixs,:), parnames(:))
ESP2_tilda_ii = mstack(ixs,:);
close
epsi = 0.02
kcp2val = 0.7937
pol2val = -0.5113
marray_red = marray(:, :,((end-12000):1:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>kcp2val-epsi & mstack(:, 4)<kcp2val+epsi &...
mstack(:, 6)>pol2val-epsi & mstack(:, 6)<pol2val+epsi);
mcmc_plot(mstack(ixs,:), parnames(:))
ESP2_tilda_ii = mstack(ixs,:);
close all
analysis_test015corr1_Ffix3
mcmc_plot(marray(:, 1:30:end,1:10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithTr_E2');
analysis_test015calib
mcmc_plot(marray(:, 1:10:end,1:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
close all
clear all
mcmc_plot(marray(:, 1:end,1:20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
analysis_test015calib
size(marray)
200*(45+45+37)
clear all
close al
close all
analysis_test015corr1_Ffix3
close all
% Plot trace and corner (posterior distribution) plots
%
mcmc_plot(marray(:, 1:end,1:100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithoutTr_E2');
mcmc_plot(marray(:, 1:10:end,1:10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithTr_E2');
mcmc_plot(marray(:, 1:30:end,1:100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithTr_E2');
analysis_test015corr1_Ffix3
curr_calib
analysis_test015corr1_Ffix3
length(ESP2_tilda2)
% Step 1 : grab C_test 10 points that satisfy both the ESP2 set restricton and the
% CSP-of-calib restrictions.
clc
load('ESP2 points', 'ESP2_tilda')
% now for 20 points in ESP2_tilda, get the CSP and ESP1, and for those
% CSPs, get the corresponding subset of test csps.
%
% then generate 20 plots of the trajectories from these 20 points. And see
% which fit the data.
ixs_calib = find(ESP2_tilda(:, 4)>-2.88 & ESP2_tilda(:, 4)<-2.86 &...
ESP2_tilda(:, 6)>2.63 & ESP2_tilda(:, 6)<2.66);
ESP2_tilda2 = ESP2_tilda(ixs_calib,:);
ix_to_use = randperm(length(ESP2_tilda2), 60);
% test params:
marray_thin = marray(:, :,1:200:end);
mstacked = marray_thin(:,:)';
epsilon = 1;
ixs = cell(length(ix_to_use),1);
estParamsIx = setdiff((1:length(mai.masterVector))', mai.fixedParams);
for i = 1:length(ix_to_use)
curr_calib = ESP2_tilda(ix_to_use(i), :)
% find the elements of mstacked that are within the set
kf_range = [curr_calib(1)-epsilon curr_calib(1)+epsilon]
kr_range = [curr_calib(2)-epsilon curr_calib(2)+epsilon]
ixs{i} = find(mstacked(:, 1)>kf_range(1) & mstacked(:, 1)<kf_range(2) &...
mstacked(:, 2)>kr_range(1) & mstacked(:, 2)<kr_range(2))
%     The corresponding ESP1s are:
kcp1 = curr_calib(3)
pol1 = curr_calib(5)
ESP1_ix = [9 10];
ESP1_vals = [kcp1, pol1];
if ~isempty(ixs{i})
%         figure(i)
mvarray = repmat(mai.masterVector', [length(ixs{i}), 1]) ;
mvarray(:, estParamsIx) = mstacked(ixs{i}, :);
mvarray(:, ESP1_ix) = repmat(ESP1_vals, [length(ixs{i}), 1]);
marrayOrd = mvarray(:,mi(1).paramMaps(mi(1).orderingIx,1));
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'GFP'};
for k = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, k) = {[ms{k} ', ' titls{1,j} 'nM initial tetR DNA, Exp data']};
titls_array(j, 2, k) = {[ms{k} ', ' titls{1,j} 'nM initial tetR DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(1)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'test');
end
%
end
ixs
ixs_calib = find(ESP2_tilda(:, 4)>-2.90 & ESP2_tilda(:, 4)<-2.84 &...
ESP2_tilda(:, 6)>2.61 & ESP2_tilda(:, 6)<2.68);
length(ESP2_tilda2)
ixs_calib = find(ESP2_tilda(:, 4)>-2.92 & ESP2_tilda(:, 4)<-2.82 &...
ESP2_tilda(:, 6)>2.59 & ESP2_tilda(:, 6)<2.70);
length(ESP2_tilda2)
clc
load('ESP2 points', 'ESP2_tilda')
% now for 20 points in ESP2_tilda, get the CSP and ESP1, and for those
% CSPs, get the corresponding subset of test csps.
%
% then generate 20 plots of the trajectories from these 20 points. And see
% which fit the data.
ixs_calib = find(ESP2_tilda(:, 4)>-2.92 & ESP2_tilda(:, 4)<-2.82 &...
ESP2_tilda(:, 6)>2.59 & ESP2_tilda(:, 6)<2.70);
length(ESP2_tilda2)
ESP2_tilda2 = ESP2_tilda(ixs_calib,:);
ix_to_use = randperm(length(ESP2_tilda2), 100);
% test params:
marray_thin = marray(:, :,1:200:end);
mstacked = marray_thin(:,:)';
epsilon = .1;
ixs = cell(length(ix_to_use),1);
estParamsIx = setdiff((1:length(mai.masterVector))', mai.fixedParams);
for i = 1:length(ix_to_use)
curr_calib = ESP2_tilda(ix_to_use(i), :)
% find the elements of mstacked that are within the set
kf_range = [curr_calib(1)-epsilon curr_calib(1)+epsilon]
kr_range = [curr_calib(2)-epsilon curr_calib(2)+epsilon]
ixs{i} = find(mstacked(:, 1)>kf_range(1) & mstacked(:, 1)<kf_range(2) &...
mstacked(:, 2)>kr_range(1) & mstacked(:, 2)<kr_range(2))
%     The corresponding ESP1s are:
kcp1 = curr_calib(3)
pol1 = curr_calib(5)
ESP1_ix = [9 10];
ESP1_vals = [kcp1, pol1];
if ~isempty(ixs{i})
%         figure(i)
mvarray = repmat(mai.masterVector', [length(ixs{i}), 1]) ;
mvarray(:, estParamsIx) = mstacked(ixs{i}, :);
mvarray(:, ESP1_ix) = repmat(ESP1_vals, [length(ixs{i}), 1]);
marrayOrd = mvarray(:,mi(1).paramMaps(mi(1).orderingIx,1));
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'GFP'};
for k = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, k) = {[ms{k} ', ' titls{1,j} 'nM initial tetR DNA, Exp data']};
titls_array(j, 2, k) = {[ms{k} ', ' titls{1,j} 'nM initial tetR DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(1)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'test');
end
%
end
ixs
analysis_test015corr1_Ffix3
clc
length(ESP2_tilda2)
clc
load('ESP2 points', 'ESP2_tilda')
% now for 20 points in ESP2_tilda, get the CSP and ESP1, and for those
% CSPs, get the corresponding subset of test csps.
%
% then generate 20 plots of the trajectories from these 20 points. And see
% which fit the data.
ixs_calib = find(ESP2_tilda(:, 4)>-3.02 & ESP2_tilda(:, 4)<-2.72 &...
ESP2_tilda(:, 6)>2.49 & ESP2_tilda(:, 6)<2.80);
length(ESP2_tilda2)
ESP2_tilda2 = ESP2_tilda(ixs_calib,:);
ix_to_use = randperm(length(ESP2_tilda2), 100);
% test params:
marray_thin = marray(:, :,1:200:end);
mstacked = marray_thin(:,:)';
epsilon = .99;
ixs = cell(length(ix_to_use),1);
estParamsIx = setdiff((1:length(mai.masterVector))', mai.fixedParams);
for i = 1:length(ix_to_use)
curr_calib = ESP2_tilda(ix_to_use(i), :);
% find the elements of mstacked that are within the set
kf_range = [curr_calib(1)-epsilon curr_calib(1)+epsilon];
kr_range = [curr_calib(2)-epsilon curr_calib(2)+epsilon];
ixs{i} = find(mstacked(:, 1)>kf_range(1) & mstacked(:, 1)<kf_range(2) &...
mstacked(:, 2)>kr_range(1) & mstacked(:, 2)<kr_range(2));
%     The corresponding ESP1s are:
kcp1 = curr_calib(3);
pol1 = curr_calib(5);
ESP1_ix = [9 10];
ESP1_vals = [kcp1, pol1];
end
ixs;
ixs
close all
now
datestr(now)
datestr(now. 'HHmm_ddmmyyyy')
datestr(now. hhmm_ddmmyyyy')
datestr(now, 'hhmm_ddmmyyyy')
datestr(now, 'HHMM_ddmmyyyy')
datestr(now, 'ddmmyyyy_HHMMSS')
analysis_test015corr1_Ffix3
mcmc_plot(marray(:, 1:end,1:40:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithoutTr_E2');
mcmc_plot(marray(:, 1:20:end,1:10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithTr_E2');
analysis_test015calib
analysis_test015corr1_Ffix3
close all
analysis_test015corr1_Ffix3
epsi_calib = 0.05
ixs_calib = find(ESP2_tilda(:, 4)>rkcp2-epsi_calib & ESP2_tilda(:, 4)<rkcp2+epsi_calib &...
ESP2_tilda(:, 6)>cpol2-epsi_calib & ESP2_tilda(:, 6)<cpol2+epsi_calib);
length(ESP2_tilda2)
ESP2_tilda2 = ESP2_tilda(ixs_calib,:)
epsi_calib = 0.005
ixs_calib = find(ESP2_tilda(:, 4)>rkcp2-epsi_calib & ESP2_tilda(:, 4)<rkcp2+epsi_calib &...
ESP2_tilda(:, 6)>cpol2-epsi_calib & ESP2_tilda(:, 6)<cpol2+epsi_calib);
length(ESP2_tilda2)
epsi_calib = 0.5
ixs_calib = find(ESP2_tilda(:, 4)>rkcp2-epsi_calib & ESP2_tilda(:, 4)<rkcp2+epsi_calib &...
ESP2_tilda(:, 6)>cpol2-epsi_calib & ESP2_tilda(:, 6)<cpol2+epsi_calib);
length(ESP2_tilda2)
epsi_calib = 0.5
ixs_calib = find(ESP2_tilda(:, 4)>rkcp2-epsi_calib & ESP2_tilda(:, 4)<rkcp2+epsi_calib &...
ESP2_tilda(:, 6)>cpol2-epsi_calib & ESP2_tilda(:, 6)<cpol2+epsi_calib);
ESP2_tilda2 = ESP2_tilda(ixs_calib,:);
length(ESP2_tilda2)
ixs_calib
rkcp2
cpol2
epsi_calib = 0.05
ixs_calib = find(ESP2_tilda(:, 4)>rkcp2-epsi_calib & ESP2_tilda(:, 4)<rkcp2+epsi_calib &...
ESP2_tilda(:, 6)>cpol2-epsi_calib & ESP2_tilda(:, 6)<cpol2+epsi_calib)
ESP2_tilda2 = ESP2_tilda(ixs_calib,:);
length(ESP2_tilda2)
epsi_calib = 0.005
ixs_calib = find(ESP2_tilda(:, 4)>(rkcp2-epsi_calib) & ESP2_tilda(:, 4)<(rkcp2+epsi_calib) &...
ESP2_tilda(:, 6)>(cpol2-epsi_calib) & ESP2_tilda(:, 6)<(cpol2+epsi_calib))
ESP2_tilda2 = ESP2_tilda(ixs_calib,:);
length(ESP2_tilda2)
epsi_calib = 0.01
ixs_calib = find(ESP2_tilda(:, 4)>(rkcp2-epsi_calib) & ESP2_tilda(:, 4)<(rkcp2+epsi_calib) &...
ESP2_tilda(:, 6)>(cpol2-epsi_calib) & ESP2_tilda(:, 6)<(cpol2+epsi_calib))
ESP2_tilda2 = ESP2_tilda(ixs_calib,:);
length(ESP2_tilda2)
% ix_to_use = randperm(length(ESP2_tilda2), 20);
ix_to_use = 1:length(ESP2_tilda2);
% test params:
marray_thin = marray(:, :,1:20:end);
mstacked = marray_thin(:,:)';
epsilon = .3;
ixs = cell(length(ix_to_use),1);
estParamsIx = setdiff((1:length(mai.masterVector))', mai.fixedParams);
count = 0;
for i = 1:length(ix_to_use)
curr_calib = ESP2_tilda(ix_to_use(i), :);
% find the elements of mstacked that are within the set
kf_range = [curr_calib(1)-epsilon curr_calib(1)+epsilon];
kr_range = [curr_calib(2)-epsilon curr_calib(2)+epsilon];
ixs{i} = find(mstacked(:, 1)>kf_range(1) & mstacked(:, 1)<kf_range(2) &...
mstacked(:, 2)>kr_range(1) & mstacked(:, 2)<kr_range(2));
if  ~isempty(ixs{i})
count = count+1;
non_empty(count) = i;
end
%     The corresponding ESP1s are:
kcp1 = curr_calib(3);
pol1 = curr_calib(5);
ESP1_ix = [9 10];
ESP1_vals = [kcp1, pol1];
end
count
non_empty
ixs(non_empty)
clc
clear non_empty
clear ixs
load('ESP2 points', 'ESP2_tilda')
% now for 20 points in ESP2_tilda, get the CSP and ESP1, and for those
% CSPs, get the corresponding subset of test csps.
%
% then generate 20 plots of the trajectories from these 20 points. And see
% which fit the data.
%
% ixs_calib = find(ESP2_tilda(:, 4)>-3.02 & ESP2_tilda(:, 4)<-2.72 &...
%     ESP2_tilda(:, 6)>2.49 & ESP2_tilda(:, 6)<2.80);
% length(ESP2_tilda2)
% ESP2_tilda2 = ESP2_tilda(ixs_calib,:);
epsi_calib = 0.01
ixs_calib = find(ESP2_tilda(:, 4)>(rkcp2-epsi_calib) & ESP2_tilda(:, 4)<(rkcp2+epsi_calib) &...
ESP2_tilda(:, 6)>(cpol2-epsi_calib) & ESP2_tilda(:, 6)<(cpol2+epsi_calib))
ESP2_tilda2 = ESP2_tilda(ixs_calib,:);
length(ESP2_tilda2)
% ix_to_use = randperm(length(ESP2_tilda2), 20);
ix_to_use = 1:length(ESP2_tilda2);
% test params:
marray_thin = marray(:, :,1:20:end);
mstacked = marray_thin(:,:)';
epsilon = .3;
ixs = cell(length(ix_to_use),1);
estParamsIx = setdiff((1:length(mai.masterVector))', mai.fixedParams);
count = 0;
for i = 1:length(ix_to_use)
curr_calib = ESP2_tilda(ix_to_use(i), :);
% find the elements of mstacked that are within the set
kf_range = [curr_calib(1)-epsilon curr_calib(1)+epsilon];
kr_range = [curr_calib(2)-epsilon curr_calib(2)+epsilon];
ixs{i} = find(mstacked(:, 1)>kf_range(1) & mstacked(:, 1)<kf_range(2) &...
mstacked(:, 2)>kr_range(1) & mstacked(:, 2)<kr_range(2));
if  ~isempty(ixs{i})
count = count+1;
non_empty(count) = i;
end
%     The corresponding ESP1s are:
kcp1 = curr_calib(3);
pol1 = curr_calib(5);
ESP1_ix = [9 10];
ESP1_vals = [kcp1, pol1];
end
count
non_empty
ixs(non_empty)
close all
ix_to_use
length(ixs(non_empty))
close all
analysis_test015corr1_Ffix3
mcmc_plot(marray(:, 1:20:end,1:100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithoutTr_E2');
mcmc_plot(marray(:, 1:30:end,(end - 4000):10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithTr_E2');
mcmc_plot(marray(:, 1:10:end,1:50:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithoutTr_E2');
mcmc_plot(marray(:, 1:2:end,(end - 4000):50:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'WithTr_E2');
close all
analysis_test015corr1_Ffix3
count
non_empty
close all
clc
close all
ixs
ixs{1}
length(ixs{1})
close all
analysis_test015corr1_Ffix3
close all
clear all
clc
analysis_test015calib
mcmc_plot(marray(:, 1:end,1:50:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
mcmc_plot(marray(:, 1:end,(end-6000):30:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
close all
mcmc_plot(marray(:, 1:20:end,1:100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
mcmc_plot(marray(:, 1:5:end,1:100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
%%
%  close
% marray_red = marray(:, :,((end-2600):10:end));
% mstack = marray_red(:, :)';
% ixs = find(mstack(:, 4)>-2.89 & mstack(:, 4)<-2.85 &...
%     mstack(:, 6)>2.63 & mstack(:, 6)<2.65);
% mcmc_plot(mstack(ixs,:), parnames(:))
%
mcmc_plot(marray(:, 1:10:end,1:50:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
%%
%  close
% marray_red = marray(:, :,((end-2600):10:end));
% mstack = marray_red(:, :)';
% ixs = find(mstack(:, 4)>-2.89 & mstack(:, 4)<-2.85 &...
%     mstack(:, 6)>2.63 & mstack(:, 6)<2.65);
% mcmc_plot(mstack(ixs,:), parnames(:))
%
mcmc_plot(marray(:, 1:10:end,1:200:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
analysis_test015calib
mcmc_plot(marray(:, 1:end,1:100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
analysis_test015calib
marray_red = marray(:, :,((end-2600):200:end));
mstack = marray_red(:, :)';
ixs = find(mstack(:, 4)>-3.1 & mstack(:, 4)<-2.8 &...
mstack(:, 6)>2.6 & mstack(:, 6)<2.8);
mcmc_plot(mstack(ixs,:), parnames(:))
ESP2_tilda = mstack(ixs,:);
close all
% Plot trace and corner (posterior distribution) plots
%     mcmc_plot(marray(:, 1:3:end,1:50:end), parnames(:));
%%
%  close
% marray_red = marray(:, :,((end-2600):10:end));
% mstack = marray_red(:, :)';
% ixs = find(mstack(:, 4)>-2.89 & mstack(:, 4)<-2.85 &...
%     mstack(:, 6)>2.63 & mstack(:, 6)<2.65);
% mcmc_plot(mstack(ixs,:), parnames(:))
%
mcmc_plot(marray(:, 1:end,1:5:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithTr');
analysis_test015calib
mai
mai.estNames
analysis_test015corr1_Ffix3
mai
mai.masterVector
mai.masterVector(mai.fixedParams)
analysis_test015corr1_Ffix3
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx,1),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'GFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{1,j} 'nM initial tetR DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{1,j} 'nM initial tetR DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(1)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E2');
close all
clc
clear all
analysis_test015calib
epsi = 0.2;
analysis_test015corr1_Ffix3
size(ESP2_tilda,1)
close all
clear all
clc
analysis_test015calib
close all
analysis_test015calib
size(ESP2_tilda)
hist(ESP2_tilda(:,3))
hist(ESP2_tilda(:,3), 100)
figure; subplot(3,2,1); hist(ESP2_tilda(:,1), 100); subplot(3,2,2); hist(ESP2_tilda(:,2), 100); subplot(3,2,3); hist(ESP2_tilda(:,3), 100); ...
subplot(3,2,4); hist(ESP2_tilda(:,4), 100); subplot(3,2,5); hist(ESP2_tilda(:,5), 100); subplot(3,2,6); hist(ESP2_tilda(:,6), 100);
figure;
subplot(3,2,1); hist(ESP2_tilda(:,1), 100); title('kfdg')
subplot(3,2,2); hist(ESP2_tilda(:,2), 100);  title('krdg')
subplot(3,2,3); hist(ESP2_tilda(:,3), 100);  title('kcp1')
subplot(3,2,4); hist(ESP2_tilda(:,4), 100);  title('kcp2')
subplot(3,2,5); hist(ESP2_tilda(:,5), 100);  title('pol1')
subplot(3,2,6); hist(ESP2_tilda(:,6), 100); title('pol2')
close all
clear all
load('ESP2 points_pts1_ts20', 'ESP2_tilda')
size(ESP2_tilda)
analysis_test015corr1_Ffix3
analysis_test015calib
clear all
clc
close all
analysis_test015calib
close all
analysis_test015calib
edit proj_test015.m
proj_test015
model info
model_info
model_info.namesUnord
model_info.paramMaps
master_info.masterVector
master_info
master_info.estNames
mcmc_info
mcmc_info.runsim_info
mcmc_info.model_info
mcmc_info.model_info.namesUnord
mcmc_info.model_info.paramMaps
mi
mi.namesOrd
mi.orderingIx
mi.orderingIx2
dbstack
mi.emp
mi.emo
get(mi.emo, 'ValueInfo')
vi = get(mi.emo, 'ValueInfo')
vi(1)
vi(2)
vi(3)
vi(4)
vi(5)
mvarray = masterVecArray(marray, mai);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
%
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx,1),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'RNA'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial RNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(1)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E1');
marrayOrd = mvarray(mi(1).paramMaps(mi(1).orderingIx,2),:,samplePoints);
titls = arrayfun(@num2str, mi(1).dosedVals, 'UniformOutput', false);
titls_array = cell(length(titls), 2, length(mi(1).measuredSpeciesIndex));
ms = {'MG aptamer', 'deGFP'};
for i = 1:length(mi(1).measuredSpeciesIndex)
for j = 1:length(titls)
titls_array(j, 1, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, Exp data']};
titls_array(j, 2, i) = {[ms{i} ', ' titls{j} 'nM initial DNA, MCMC samples']};
end
end
mcmc_trajectories(mi(1).emo, data_info(mi(1).dataToMapTo(2)), mi(1), marrayOrd,...
titls_array, {},...
'SimMode', 'meanstd', 'separateExpSim', false,...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'E2');
close all
clear all
clc
clear non_empty
clear ixs
load('CSP_fixed_pts_ts20', 'CSP_fixed_pts')
whos
size(CSP_fixed_pts)
non_empty
close all
clear all
clc
size(marray)
analysis_test015calib_E1E2same
mcmc_plot(marray(:, 1:10:end,1:10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
edit proj_test015.m
analysis_test015calib
edit analysis_test015calib
analysis_test015corr1_Ffix3
close all
clear all
analysis_test015corr1_Ffix3
size(CSP_fixed_pts2)
size(CSP_fixed_pts)
size(CSP_fixed_pts2(1:20,:)
size(CSP_fixed_pts2(1:20,:))
(CSP_fixed_pts2(1:20,:))
load('CSP_fixed_pts_ts20', 'CSP_fixed_pts')
figure;
subplot(3,2,1); hist(CSP_fixed_pts(:,1), 100); title('kfdg')
subplot(3,2,2); hist(CSP_fixed_pts(:,2), 100);  title('krdg')
subplot(3,2,3); hist(CSP_fixed_pts(:,3), 100);  title('kcp1')
subplot(3,2,4); hist(CSP_fixed_pts(:,4), 100);  title('kcp2')
subplot(3,2,5); hist(CSP_fixed_pts(:,5), 100);  title('pol1')
subplot(3,2,6); hist(CSP_fixed_pts(:,6), 100); title('pol2')
(CSP_fixed_pts2(1:80,:))
size(CSP_fixed_pts)
ixs_calib
CSP_fixed_pts(1:20,:)
CSP_fixed_pts(1:10000:end,:)
CSP_fixed_pts(1:5000:end,:)
load('CSP_fixed_pts_ts20', 'CSP_fixed_pts')
figure;
subplot(3,2,1); hist(CSP_fixed_pts(1:3000:end,1), 100); title('kfdg')
subplot(3,2,2); hist(CSP_fixed_pts(1:3000:end,2), 100);  title('krdg')
subplot(3,2,3); hist(CSP_fixed_pts(1:3000:end,3), 100);  title('kcp1')
subplot(3,2,4); hist(CSP_fixed_pts(1:3000:end,4), 100);  title('kcp2')
subplot(3,2,5); hist(CSP_fixed_pts(1:3000:end,5), 100);  title('pol1')
subplot(3,2,6); hist(CSP_fixed_pts(1:3000:end,6), 100); title('pol2')
load('CSP_fixed_pts_ts20', 'CSP_fixed_pts')
figure;
subplot(3,2,1); hist(CSP_fixed_pts(1:1000:end,1), 30); title('kfdg')
subplot(3,2,2); hist(CSP_fixed_pts(1:1000:end,2), 30);  title('krdg')
subplot(3,2,3); hist(CSP_fixed_pts(1:1000:end,3), 30);  title('kcp1')
subplot(3,2,4); hist(CSP_fixed_pts(1:1000:end,4), 30);  title('kcp2')
subplot(3,2,5); hist(CSP_fixed_pts(1:1000:end,5), 30);  title('pol1')
subplot(3,2,6); hist(CSP_fixed_pts(1:1000:end,6), 30); title('pol2')
ixs(non_empty){1}(1:10,:)
non_empty
ixs{1}(1:10,:)
ixs{2}(1:10,:)
ixs{2}(1:10,:size(CSP_fixed_pts,1))
size(CSP_fixed_pts,1)
ixs_calib = 1:5000:size(CSP_fixed_pts,1);
ixs_calib
clc
clear non_empty
clear ixs
load('CSP_fixed_pts_ts20', 'CSP_fixed_pts')
close all
epsi_calib = 0.06;
ixs_calib = 1:5000:size(CSP_fixed_pts,1);
%find(ESP2_tilda(:, 4)>(rkcp2-epsi_calib) & ESP2_tilda(:, 4)<(rkcp2+epsi_calib) &...
% ESP2_tilda(:, 6)>(cpol2-epsi_calib) & ESP2_tilda(:, 6)<(cpol2+epsi_calib))
CSP_fixed_pts2 = CSP_fixed_pts(ixs_calib,:);
length(CSP_fixed_pts2)
ix_to_use = randperm(length(CSP_fixed_pts2), 5)
clc
clear non_empty
clear ixs
load('CSP_fixed_pts_ts20', 'CSP_fixed_pts')
close all
epsi_calib = 0.06;
% CSP_fixed_pts = CSP_fixed_pts(1:2000:end,:);
ixs_calib = 1:size(CSP_fixed_pts,1);
%find(ESP2_tilda(:, 4)>(rkcp2-epsi_calib) & ESP2_tilda(:, 4)<(rkcp2+epsi_calib) &...
% ESP2_tilda(:, 6)>(cpol2-epsi_calib) & ESP2_tilda(:, 6)<(cpol2+epsi_calib))
CSP_fixed_pts2 = CSP_fixed_pts(ixs_calib,:);
length(CSP_fixed_pts2)
ix_to_use = randperm(length(CSP_fixed_pts2), 10)
CSP_fixed_pts2(ix_to_use,:)
rkcp2
cpol2
CSP_fixed_pts2(ix_to_use,:)
ixs_calib
length(ixs_calib)
kf_range
kr_range
jpgsave = false;
size(marray)
size(mstacked)
marray_thin = marray(:, 1:end,1:400:end);
mstacked = marray_thin(:,:)';
size(mstacked)
marray_thin = marray(:, 1:end,1:800:end);
mstacked = marray_thin(:,:)';
size(mstacked)
mcmc_plot(marray(:, 1:end,(end-1000):20:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'all_WithoutTr');
edit proj_test015_E1E2same.m
proj_test015_E1E2same
data_info
data_info(3)
proj_test015_E1E2same
da{1}(:,1,1,1,1)
da{1}(:,1,1,1,2)
analysis_test015calib_E1E2same
close all
%-- 3/25/19, 9:03 PM --%
dir mcmc_simbio/projects/
%-- 3/28/19, 4:33 PM --%
sal = 5450
bon = 8320
bon/sal =
bon/sal
107/365
prorate = 107/365
rawmonth = bon/sal
rawmonth / prorate
%-- 4/4/19, 8:21 PM --%
m = model_txtl_pLacdeGFP
m.reactions
mtet = model_txtl_ptetdeGFP_pLactetR_aTc
mtet.reac
mtet.r
mtet.re
di = data_ZSIFFL;
mcmc_trajectories([], di(1), [], [], [], [], 'just_data_info', true)
mcmc_trajectories([], di(1:5), [], [], [], [], 'just_data_info', true)
close all
dir mcmc_simbio/projects/
help dir
dir mcmc_simbio/projects/*.m
edit proj_VNPRL_mrna
edit proj_acs_dsg2014_regen_F1
edit proj_test015_E1E2same
dir mcmc_simbio/models_and_supporting_files/*.m
dir mcmc_simbio/models_and_supporting_files/mcmc*.m
edit mcmc_info_vnprl_F2.m
dir mcmc_simbio/models_and_supporting_files/model*
edit mcmc_info_dsg2014_regen_F1.m
%-- 4/5/19, 2:23 PM --%
geneexpr
m
mobj
Mobj
Mobj.reaction
mplac = model_txtl_pLacdeGFP;
mlas = model_txtl_pLacLasR_pLasdeGFP;
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mplac.Reactions
mlas
mlas.reac
mtet.Reactions
%-- 4/9/19, 1:34 PM --%
mplac = model_txtl_pLacdeGFP
mplac
mplac.Reactions
mlas = model_txtl_pLacLasR_pLasdeGFP;
mlas.Reactions
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mtet.reac
mlas = model_txtl_pLacLasR_pLasdeGFP;
tube
tube.Reactions
tube.Species
tube.reac
tube.spe
tube.reac
mlas = model_txtl_pLacLasR_pLasdeGFP;
tube.reac
tube.Species
mlas = model_txtl_pLacLasR_pLasdeGFP;
mlas.reac
mplac = model_txtl_pLacdeGFP;
mlas = model_txtl_pLacLasR_pLasdeGFP;
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mplac.reac
mplas/reac
mlas.reac
mtet.reac
mlac.param
mplac.Parameters
mlas.param
mlas.rules
mlas.eve
mtet.par
mtet.para
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
R
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
m
parnames
r
m.reactions
rx
edit txtl_protein_tetR.m
edit txtl_prom_ptet.m
rx
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
rx
edit txtl_protein_tetR.m
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
paramObj
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
regexp(protein.Name,'(^protein )')
protein.Name
regx = regexp(protein.Name,'(^protein )')
regx = regexp(protein.Name,'^protein ')
regx = regexp(protein.Name,'^protein ', 'split')
help regexp
regx = regexp(protein.Name,'^protein ', 'end')
protein.Name(regx+1:end)
edit txtl_transcription
edit txtl_enzyme_resource_degradation.m
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mtet.param
edit txtl_enzyme_resource_degradation.m
edit  model_txtl_ptetdeGFP_pLactetR_aTc
model_txtl_ptetdeGFP_pLactetR_aTc
dir mcmc_simbio/exp_data/
edit data_ZSIFFL
model_txtl_ptetdeGFP_pLactetR_aTc
mtet = model_txtl_ptetdeGFP_pLactetR_aTc
edit model_txtl_ptetdeGFP_pLactetR_aTc
mtet = model_txtl_ptetdeGFP_pLactetR_aTc
mtet.Parameters
mtet.even
mtet.rule
edit analysis_vnprl_F2.m
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000] % DO NOT FIX THIS.
'AGTPdeg_rate'                      exp(-9.5172)      [1e-7 1e-2] % set from before
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.01 1e7]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 1000]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11 % set to 1
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e7]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-5 10]  %set to exp(-5.4)
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 100000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.005 1e7]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 1000]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
%
%     {'AGTPreg_ON'                     }
%     {'TXTL_P70_RNAPbound_F'           }
%     {'TXTL_NTP_RNAP_1_Kd'             }
%     {'TXTL_NTP_RNAP_1_F'              }
%     {'TXTL_NTP_RNAP_2_Kd'             }
%     {'TXTL_NTP_RNAP_2_F'              }
%     {'TXTL_RNAdeg_F'                  }
%     {'TXTL_UTR_UTR1_F'                }
%     {'TL_AA_Kd'                       }
%     {'TL_AA_F'                        }
%     {'TL_AGTP_Kd'                     }
%     {'TL_AGTP_F'                      }
%     {'TXTL_PROT_deGFP_MATURATION'     }
% are fixed at the values above.
% 3. regen_F:
% estimate all 13 remaining params:
%     {'TX_elong_glob'                  }
%     {'AGTPdeg_time'                   }
%     {'AGTPdeg_rate'                   }
%     {'TXTL_P70_RNAPbound_Kd'          }
%     {'TXTL_RNAPBOUND_TERMINATION_RATE'}
%     {'TXTL_RNAdeg_Kd'                 }
%     {'TXTL_RNAdeg_kc'                 }
%     {'RNAP'                           }
%     {'RNase'                          }
%     {'TL_elong_glob'                  }
%     {'TXTL_UTR_UTR1_Kd'               }
%     {'TXTL_RIBOBOUND_TERMINATION_RATE'}
%     {'Ribo'                           }
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 3 5 7 12 14 15 16 17 19 25 26]';
estParams = activeNames2(estParamsIX,1);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:26)', estParamsIX);
activeNames2(estParamsIX,:)
activeNames2(fixedParamsIX, :)
log(activeNames2(estParamsIX,2))
log(cell2mat(activeNames2(estParamsIX,2)))
help mat2cell
help num2cell
estARRAY = [activeNames2(estParamsIX,[1 2]) num2cell(log(cell2mat(activeNames2(estParamsIX,2))))]
estARRAY = [activeNames2(estParamsIX,[1 2]) num2cell(log(cell2mat(activeNames2(estParamsIX,2))))]
fixARRAY = [activeNames2(fixedParamsIX,[1 2]) num2cell(log(cell2mat(activeNames2(fixedParamsIX,2))))]
estARRAY = [activeNames2(estParamsIX,[1]) num2cell(log(cell2mat(activeNames2(estParamsIX,2))))]
fixARRAY = [activeNames2(fixedParamsIX,[1]) num2cell(log(cell2mat(activeNames2(fixedParamsIX,2))))]
mtet = model_txtl_ptetdeGFP_pLactetR_aTc
mtet.Parameters
estARRAY = [activeNames2(estParamsIX,[1]) num2cell(log(cell2mat(activeNames2(estParamsIX,2))))]
fixARRAY = [activeNames2(fixedParamsIX,[1]) num2cell(log(cell2mat(activeNames2(fixedParamsIX,2))))]
clear all
clc
%-- 4/13/19, 4:51 PM --%
exp(2.6)
exp(3.5)
EXP(8.8)
exp(8.8)
exp(5)
size(marray)
size(masterVecArray)
size(mvarray)
size(marrayOrd)
size(marray)
mcmc_plot(marray(:, 1:end,18000:100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
mcmc_plot(marray(:, 1:end,10000:400:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
mcmc_plot(marray(1:6, 1:end,10000:400:end), parnames(1:6),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
mcmc_plot(marray(7:end, 1:end,10000:400:end), parnames(7:end),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
close all
mcmc_plot(marray(1:6, 1:end,10000:100:end), parnames(1:6),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
mcmc_plot(marray(7:end, 1:end,10000:100:end), parnames(7:end),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
[exp(5) exp(20)]
format short g
[exp(5) exp(20)]
%-- 4/14/19, 10:11 AM --%
mcmc_plot(marray(1:6, 1:end,10000:100:end), parnames(1:6),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
mcmc_plot(marray(7:end, 1:end,10000:100:end), parnames(7:end),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
mcmc_plot(marray(:, 1:end,10000:400:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
dir mcmc_simbio/
dir mcmc_simbio/src
edit mcmc_cut
mai.paramRanges
mai
mai.estNames
mai
mai.paramRanges([7,9], :)
parRanges = mai.paramRanges
parRanges([7,9], :) = [-2.5, 1.9;3.5, 10.75]
parRanges([7,9], :) = [-2.5, 1.9;3.5, 10.75]
marray_cut = mcmc_cut(marray, [7, 9], flipud((parRanges)'));
mcmc_plot(marray_cut(:, 1:end,(end-18000):100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
whos
parRanges = mai.paramRanges;
parRanges([7,9], :) = [-2.5, 1.9;3.5, 10.75]
marray_cut = mcmc_cut(marray, [7, 9], flipud((parRanges)'));
marray_cut = mcmc_cut(marray, [7, 9], flipud((parRanges)'));
flipud((parRanges)')
flipud((pRanges)')flipud((parRanges)')
flipud((pRanges)'))
flipud((pRanges)')
parRanges = mai.paramRanges
mai
parRanges = mai.paramRanges
marray_cut = mcmc_cut(marray, [7, 9], flipud((parRanges)'))
edit rowvec
help rowvec
parRanges = mai.paramRanges;
parRanges([7,9], :) = [-2.5, 1.9;3.5, 10.75]
marray_cut = mcmc_cut(marray, [7, 9], flipud((parRanges([7 9]))'));
mcmc_plot(marray_cut(:, 1:end,(end-18000):100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
parRanges
marray_cut = mcmc_cut(marray, [7, 9], flipud((parRanges([7 9], :))'));
size(marray_cut)
mcmc_plot(marray_cut(:, 1:end,(end-10000):100:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
parRanges = mai.paramRanges;
parRanges([7,9], :) = [-1.863, 1.9;3.5, 10.75]
marray_cut = mcmc_cut(marray, [7, 9], flipud((parRanges([7 9], :))'));
mcmc_plot(marray_cut(:, 1:end,(end-10000):500:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray_cut(1:6, 1:end,10000:100:end), parnames(1:6),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
mcmc_plot(marray_cut(7:end, 1:end,10000:100:end), parnames(7:end),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedInAllWalkers');
mcmc_plot(marray_cut(:, 1:end,10000:500:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
parRanges([7,9], :) = [-0.2966 0.1031; 8.298 8.738];
marray_cut = mcmc_cut(marray, [7,9], flipud((parRanges([7 9], :))'));
mcmc_plot(marray_cut(:, 1:end,10000:10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
size(marray_cut)
mcmc_plot(marray_cut(:, 1:end,1:10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray_cut(:, 1:end,ceil(end/3):10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
parRanges([6,9], :) = [15.59 15.73 ; 8.385 8.622];
marray_cut = mcmc_cut(marray, [6,9], flipud((parRanges([6 9], :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/3):5:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
close a
close
parRanges([6,7, 9], :) = [15.59 15.73 ;
-0.2966 0.1031;
8.385 8.622];
marray_cut = mcmc_cut(marray, [6,7,9], flipud((parRanges([6 7 9], :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/3):5:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
parRanges([6,7, 9], :) = [15.65 15.73 ;
-0.039 0.02126;
8.386 8.461 ];
marray_cut = mcmc_cut(marray, [6,7,9], flipud((parRanges([6 7 9], :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
parRanges([6,7, 9], :) = [15.59 15.73 ;
-0.2966 0.1031;
8.385 8.622];
marray_cut = mcmc_cut(marray, [6,7,9], flipud((parRanges([6 7 9], :))'));
mcmc_3D(marray_cut([6 7 9], 1:end,ceil(end/4):end), parnames([6 7 9]), 'RNA deg covariation')
size(marray_cut)
size(marray_cut([6 7 9], 1:end,ceil(end/4):end))
mcut = marray_cut([6 7 9], 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames([6 7 9]), 'RNA deg covariation')
help meshgrid
meshkdcat = meshgrid(linspace([15.65 15.73]), linspace([-0.039 0.02126]))
meshkdcat = meshgrid(linspace([15.65 15.73], 10), linspace([-0.039 0.02126],10))
help linspace
meshkdcat = meshgrid(linspace(15.65 15.73, 10), linspace(-0.039 0.02126,10))
meshkdcat = meshgrid(linspace(15.65, 15.73, 10), linspace(-0.039, 0.02126,10))
meshcatase = meshgrid(linspace(-0.039, 0.02126,10), linspace(8.386, 8.461, 10), )
meshcatase = meshgrid(linspace(-0.039, 0.02126,10), linspace(8.386, 8.461, 10) )
meshKdase= meshgrid(linspace(15.65, 15.73, 10), linspace(8.386, 8.461, 10) )
help fill3
help mesh
close all
parRanges([6,7, 9], :) = [15.59 15.73 ;
-0.2966 0.1031;
8.385 8.622];
marray_cut = mcmc_cut(marray, [6,7,9], flipud((parRanges([6 7 9], :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
paramIndices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
parRanges(paramIndices, :) = [...
2.3 2.95; %1
8.6 8.95; %2
-10.1 -9.7; %3
13.5 14.5; %4
-1 5 ; %5
15.59 15.73; %6
-0.2966 0.1031; %7
1 1.8; %8
8.385 8.622;%9
3.18 3.69; % 10 -- TLcat
-3 13.5;%RiboKd
2.2 2.6;% Ribo term
3 4 ];% Ribo
marray_cut = mcmc_cut(marray, paramIndices, flipud((parRanges(paramIndices, :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
close all
paramIndices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
parRanges(paramIndices, :) = [...
2.3 2.95; %1
8.6 8.95; %2
-10.1 -9.7; %3
13 15; %4
-1 5 ; %5
15.59 15.73; %6
-0.2966 0.1031; %7
0.7 2.2; %8
8.385 8.622;%9
3.18 3.69; % 10 -- TLcat
-3 13.5;%RiboKd
2 3;% Ribo term
3 4.6 ];% Ribo
marray_cut = mcmc_cut(marray, paramIndices, flipud((parRanges(paramIndices, :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
parRanges([7,9], :) = [-0.2966 0.1031; 8.298 8.738];
marray_cut = mcmc_cut(marray, [7,9], flipud((parRanges([7 9], :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/3):10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut([6 7 9], 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames([6 7 9]), 'RNA deg covariation')
oCandidateParams = marray_cut(:,:,end)
oCandidateParams = marray_cut(:,1:10:end,end)
oCandidateParams = marray_cut(:,1:100:end,end)
oCandidateParams = marray_cut(:,1:80:end,end)
parnames
parnames([6 7 9])
mcmc_3D(mcut(:,:)', parnames([6 7 9]), 'RNA deg covariation')
parnames
mtet = model_txtl_ptetdeGFP_pLactetR_aTc
mtet.Parameters
mtet.Species
exp(8.5)
exp(3.75)
exp(1.4419)
EstimatedParams =[...
1.7214    2.2150    1.9129    2.8813    1.9206    1.8227    1.7988    1.9129    2.8933    1.9129    1.9129    2.9532    1.2016    2.4114    1.2010
7.5328    8.8082    8.7341    8.9006    8.6899    8.6647    8.7718    8.7341    8.7898    8.7341    8.7341    8.8455    7.5343    8.8161    7.5873
-14.8727   -9.8416   -9.7383   -9.9196   -9.8184   -9.9059   -9.7755   -9.7383   -9.9750   -9.7383   -9.7383   -9.9564  -12.2002  -10.0040  -12.2410
0.2732   13.3223    1.9202   14.1785   -4.0507    3.1690   -0.9288    1.9202   14.0184    1.9202    1.9202   14.0528   -2.0771   13.6801   -2.1193
1.8090    4.1443    4.2077    2.8498   -0.2423    3.6222    6.1661    4.2077    2.6321    4.2077    4.2077    6.8439    1.8918   -0.0937    0.8244
15.8692   15.6993   15.7065   15.8548   15.9099   15.8929   15.8031   15.7065   15.6317   15.7065   15.7065   15.7650   15.3658   15.9196   15.8506
0.0064   -0.2471    0.0346   -0.1201    0.0127   -0.0695   -0.0200    0.0346    0.0695    0.0346    0.0346    0.0223   -0.1934    0.0113   -0.1089
2.2668    1.8478    2.0623    1.2667    2.0964    2.1888    2.1649    2.0623    1.2365    2.0623    2.0623    1.1738    5.6302    1.6939    5.3141
8.6165    8.6996    8.4251    8.7288    8.6508    8.7161    8.5770    8.4251    8.3158    8.4251    8.4251    8.4971    8.3127    8.6617    8.7136
4.0941    4.6648    3.1164    3.8744    3.5745    3.0612    3.5962    3.1164    3.4550    3.1164    3.1164    3.3135    3.8037    3.4360    3.5834
12.6096   14.2733    4.2841    8.2831   16.0856   -4.8711   12.7940    4.2841    2.0779    4.2841    4.2841    6.1993   12.4489    1.8138    4.6891
2.7504    6.1502    2.9274    2.0641    2.2956    6.4824    3.5291    2.9274    2.2867    2.9274    2.9274    2.3566    6.5085    2.3352    5.7604
3.6967    2.6849    4.9000    7.7984    7.5775    3.6345    3.4997    4.9000    9.1144    4.9000    4.9000    9.1339    3.1382    6.7332    3.2369];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesInMasterVector = [1 3 5 7 23 15 30 31 32 2 6 28 33];
masterVector = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]         %1
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]         %2
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]        %3
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]      %4
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]
'TXTL_UTR_UTR1_Kd'                   , exp(-0.2),   [exp(-2) exp(2)]
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]         %7
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(0) exp(5)]          %10
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]
'TL_AA_Kd'                           , exp(6.6),   [exp(0) exp(5)]         %13
'TL_AGTP_Kd'                         , exp(14.5),   [exp(0) exp(5)]
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]         %16
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]        %19
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]
'TXTL_PLAC_RNAPbound_Kd'             , exp(2.6),   [exp(5) exp(17)]
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]        %22
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]          %25
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]         %28
'TXTL_RNAdeg_F'                      , exp(0),   [exp(0) exp(5)]
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)] % 31
'RNase'                              , exp(8.5),  [exp(5) exp(10)]
'Ribo'                               , exp(3.75),  [exp(1) exp(6)] }; %33
% Set the master vector values.
masterVector(indicesInMasterVector, 2) = exp(paramVecToUse)
% Set the master vector values.
masterVector(indicesInMasterVector, 2) = num2cell(exp(paramVecToUse))
cell2num(masterVector(indicesInMasterVector, 2))
cell2mat(masterVector(indicesInMasterVector, 2))
log(cell2mat(masterVector(indicesInMasterVector, 2)))
masterVector(indicesInMasterVector, 1)
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
6     'TXTL_UTR_UTR1_Kd'                   , exp( -0.2000)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)};
cell2mat(preFixedParams(:,1))
masterVector(cell2mat(preFixedParams(:,1)),:)
masterVector = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]         %1
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]         %2
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]        %3
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]      %4
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]
'TXTL_UTR_UTR1_Kd'                   , exp(-0.2),   [exp(-2) exp(2)]
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]         %7
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(0) exp(5)]          %10
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]
'TL_AA_Kd'                           , exp(6.6),   [exp(0) exp(5)]         %13
'TL_AGTP_Kd'                         , exp(14.5),   [exp(0) exp(5)]
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]         %16
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]        %19
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]
'TXTL_PLAC_RNAPbound_Kd'             , exp(2.6),   [exp(5) exp(17)]
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]        %22
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]          %25
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]         %28
'TXTL_RNAdeg_F'                      , exp(0),   [exp(0) exp(5)]
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)] % 31
'RNase'                              , exp(8.5),  [exp(5) exp(10)]
'Ribo'                               , exp(3.75),  [exp(1) exp(6)] %33
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };
% Set the master vector values that are set from the values estimated in "vnprl_F2"
masterVector(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
6     'TXTL_UTR_UTR1_Kd'                   , exp( -0.2000)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)};
masterVector(cell2mat(preFixedParams(:,1)),:)
indicesMasterVectorEstimated = [1 3 5 7 23 15 30 31 32 2 6 28 33];
masterVector = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]         %1
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]         %2
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]        %3
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]      %4
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]
'TXTL_UTR_UTR1_Kd'                   , exp(-0.2),   [exp(-2) exp(2)]
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]         %7
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(0) exp(5)]          %10
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]
'TL_AA_Kd'                           , exp(6.6),   [exp(0) exp(5)]         %13
'TL_AGTP_Kd'                         , exp(14.5),   [exp(0) exp(5)]
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]         %16
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]        %19
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]
'TXTL_PLAC_RNAPbound_Kd'             , exp(2.6),   [exp(5) exp(17)]
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]        %22
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]          %25
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]         %28
'TXTL_RNAdeg_F'                      , exp(0),   [exp(0) exp(5)]
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)] % 31
'RNase'                              , exp(8.5),  [exp(5) exp(10)]
'Ribo'                               , exp(3.75),  [exp(1) exp(6)] %33
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };
% Set the master vector values that are set from the values estimated in "vnprl_F2"
masterVector(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
6     'TXTL_UTR_UTR1_Kd'                   , exp( -0.2000)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)};
masterVector(cell2mat(preFixedParams(:,1)),:)
masterVector(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3)
masterVector(cell2mat(preFixedParams(:,1)),:)
masterVector(cell2mat(preFixedParams(:,1)),3)
masterVector{cell2mat(preFixedParams(:,1)),3}
cell2mat(masterVector(cell2mat(preFixedParams(:,1)),3))
[cell2mat(masterVector(cell2mat(preFixedParams(:,1)),2)) cell2mat(masterVector(cell2mat(preFixedParams(:,1)),3))]
format short g; [cell2mat(masterVector(cell2mat(preFixedParams(:,1)),2)) cell2mat(masterVector(cell2mat(preFixedParams(:,1)),3))]
format short g; aa = [cell2mat(masterVector(cell2mat(preFixedParams(:,1)),2)) cell2mat(masterVector(cell2mat(preFixedParams(:,1)),3))]
aa(:,1)<aa(:,3) & aa(:,1)>aa(:,2)
[-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2)]
%-- 4/15/19, 8:40 PM --%
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 7
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
EstimatedParams =[...
1.7214    2.2150    1.9129    2.8813    1.9206    1.8227    1.7988    1.9129    2.8933    1.9129    1.9129    2.9532    1.2016    2.4114    1.2010
7.5328    8.8082    8.7341    8.9006    8.6899    8.6647    8.7718    8.7341    8.7898    8.7341    8.7341    8.8455    7.5343    8.8161    7.5873
-14.8727   -9.8416   -9.7383   -9.9196   -9.8184   -9.9059   -9.7755   -9.7383   -9.9750   -9.7383   -9.7383   -9.9564  -12.2002  -10.0040  -12.2410
0.2732   13.3223    1.9202   14.1785   -4.0507    3.1690   -0.9288    1.9202   14.0184    1.9202    1.9202   14.0528   -2.0771   13.6801   -2.1193
1.8090    4.1443    4.2077    2.8498   -0.2423    3.6222    6.1661    4.2077    2.6321    4.2077    4.2077    6.8439    1.8918   -0.0937    0.8244
15.8692   15.6993   15.7065   15.8548   15.9099   15.8929   15.8031   15.7065   15.6317   15.7065   15.7065   15.7650   15.3658   15.9196   15.8506
0.0064   -0.2471    0.0346   -0.1201    0.0127   -0.0695   -0.0200    0.0346    0.0695    0.0346    0.0346    0.0223   -0.1934    0.0113   -0.1089
2.2668    1.8478    2.0623    1.2667    2.0964    2.1888    2.1649    2.0623    1.2365    2.0623    2.0623    1.1738    5.6302    1.6939    5.3141
8.6165    8.6996    8.4251    8.7288    8.6508    8.7161    8.5770    8.4251    8.3158    8.4251    8.4251    8.4971    8.3127    8.6617    8.7136
4.0941    4.6648    3.1164    3.8744    3.5745    3.0612    3.5962    3.1164    3.4550    3.1164    3.1164    3.3135    3.8037    3.4360    3.5834
12.6096   14.2733    4.2841    8.2831   16.0856   -4.8711   12.7940    4.2841    2.0779    4.2841    4.2841    6.1993   12.4489    1.8138    4.6891
2.7504    6.1502    2.9274    2.0641    2.2956    6.4824    3.5291    2.9274    2.2867    2.9274    2.9274    2.3566    6.5085    2.3352    5.7604
3.6967    2.6849    4.9000    7.7984    7.5775    3.6345    3.4997    4.9000    9.1144    4.9000    4.9000    9.1339    3.1382    6.7332    3.2369];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 7 23 15 30 31 32 2 6 28 33];
masterVector = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]         %1
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]         %2
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]        %3
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]      %4
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]
'TXTL_UTR_UTR1_Kd'                   , exp(-0.2),   [exp(-2) exp(2)]
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]         %7
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(0) exp(5)]          %10
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]
'TL_AA_Kd'                           , exp(6.6),   [exp(0) exp(5)]         %13
'TL_AGTP_Kd'                         , exp(14.5),   [exp(0) exp(5)]
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]         %16
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]        %19
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]
'TXTL_PLAC_RNAPbound_Kd'             , exp(2.6),   [exp(5) exp(17)]
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]        %22
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]          %25
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]         %28
'TXTL_RNAdeg_F'                      , exp(0),   [exp(0) exp(5)]
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)] % 31
'RNase'                              , exp(8.5),  [exp(5) exp(10)]
'Ribo'                               , exp(3.75),  [exp(1) exp(6)] %33
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };
% Set the master vector values that are set from the values estimated in "vnprl_F2"
masterVector(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
6     'TXTL_UTR_UTR1_Kd'                   , exp( -0.2000)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)};
masterVector(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g; aa = [cell2mat(masterVector(cell2mat(preFixedParams(:,1)),2)) cell2mat(masterVector(cell2mat(preFixedParams(:,1)),3))]
[-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2)]
[-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2) (1:length(aa))']
aa
num2cell(aa)
[num2cell(aa) (masterVector(cell2mat(preFixedParams(:,1)),1))]
[num2cell(aa) (masterVector(cell2mat(preFixedParams(:,1)),1)) num2cell(preFixedParams(:,1))]
num2cell(preFixedParams(:,1))
(preFixedParams(:,1))
[num2cell(aa) (masterVector(cell2mat(preFixedParams(:,1)),1)) preFixedParams(:,1)]
[num2cell(aa) (masterVector(cell2mat(preFixedParams(:,1)),1)) preFixedParams(:,1) [-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2) (1:length(aa))']]
[num2cell(aa) (masterVector(cell2mat(preFixedParams(:,1)),1)) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2) (1:length(aa))'])]
[num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2) (1:length(aa))']) (masterVector(cell2mat(preFixedParams(:,1)),1))]
[num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2) (1:length(aa))']) (masterVector(cell2mat(preFixedParams(:,1)),1))]sfawfaefaw
aa = [cell2mat(leg(masterVector(cell2mat(preFixedParams(:,1)),2))) cell2mat(log(masterVector(cell2mat(preFixedParams(:,1)),3)))]
aa = [cell2mat(log(masterVector(cell2mat(preFixedParams(:,1)),2))) cell2mat(log(masterVector(cell2mat(preFixedParams(:,1)),3)))]
aa = [log(cell2mat(masterVector(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(masterVector(cell2mat(preFixedParams(:,1)),3)))]
[num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2) (1:length(aa))']) (masterVector(cell2mat(preFixedParams(:,1)),1))]
cell2table
cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2) (1:length(aa))']) (masterVector(cell2mat(preFixedParams(:,1)),1))])
ans.Properties
cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2) (1:length(aa))']) (masterVector(cell2mat(preFixedParams(:,1)),1))], 'w)
help cell2table
cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2) (1:length(aa))']) (masterVector(cell2mat(preFixedParams(:,1)),1))], 'VariableNames', {'logval', 'log lb', 'log ub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) aa(:,1)-aa(:,2) (1:length(aa))']) (masterVector(cell2mat(preFixedParams(:,1)),1))], 'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
masterVector = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]         %1
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]         %2
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]        %3
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]      %4
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]
'TXTL_UTR_UTR1_Kd'                   , exp(-0.2),   [exp(-2) exp(2)]
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]         %7
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]          %10
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]
'TL_AA_Kd'                           , exp(6.6),   [exp(0) exp(5)]         %13
'TL_AGTP_Kd'                         , exp(14.5),   [exp(0) exp(5)]
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]         %16
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]        %19
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]
'TXTL_PLAC_RNAPbound_Kd'             , exp(2.6),   [exp(5) exp(17)]
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]        %22
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]          %25
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]         %28
'TXTL_RNAdeg_F'                      , exp(0),   [exp(0) exp(5)]
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)] % 31
'RNase'                              , exp(8.5),  [exp(5) exp(10)]
'Ribo'                               , exp(3.75),  [exp(1) exp(6)] %33
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };
% Set the master vector values that are set from the values estimated in "vnprl_F2"
masterVector(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
6     'TXTL_UTR_UTR1_Kd'                   , exp( -0.2000)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)};
masterVector(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g; aa = [log(cell2mat(masterVector(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(masterVector(cell2mat(preFixedParams(:,1)),3)))]
cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (masterVector(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
masterVector = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]         %1
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]         %2
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]        %3
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]      %4
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]
'TXTL_UTR_UTR1_Kd'                   , exp(-0.2),   [exp(-2) exp(2)]
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]         %7
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]          %10
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]         %16
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]        %19
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]
'TXTL_PLAC_RNAPbound_Kd'             , exp(2.6),   [exp(5) exp(17)]
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]        %22
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]          %25
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]         %28
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)] % 31
'RNase'                              , exp(8.5),  [exp(5) exp(10)]
'Ribo'                               , exp(3.75),  [exp(1) exp(6)] %33
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };
% Set the master vector values that are set from the values estimated in "vnprl_F2"
masterVector(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
6     'TXTL_UTR_UTR1_Kd'                   , exp( -0.2000)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)};
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
masterVector(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g; aa = [log(cell2mat(masterVector(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(masterVector(cell2mat(preFixedParams(:,1)),3)))]
cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (masterVector(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
ans.ubdiff ./ ans.lbdiff
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (masterVector(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
edit mcmc_info_vnprl_F2.m
dir mcmc_simbio/projects/
edit proj_ZSIFFL_mtet.m
mtet = model_txtl_ptetdeGFP_pLactetR_aTc
mtet.Species
paramIndices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
parRanges(paramIndices, :) = [...
2.3 2.95; %1
8.6 8.95; %2
-10.1 -9.7; %3
13 15; %4
-1 5 ; %5
15.59 15.73; %6
-0.2966 0.1031; %7
0.7 2.2; %8 pol
8.385 8.622;%9 RNase
3.18 3.69; % 10 -- TLcat
-3 13.5;%RiboKd
2 3;% Ribo term
3 4.6 ];% Ribo
marray_cut = mcmc_cut(marray, paramIndices, flipud((parRanges(paramIndices, :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
CandidateParams = marray_cut(:,:,end)
activeNames1 = {...
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e7]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-7 10]
'RNase'                             exp(6.4899)         [1 100000]};
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000] % DO NOT FIX THIS.
'AGTPdeg_rate'                      exp(-9.5172)      [1e-7 1e-2] % set from before
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.01 1e7]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 1000]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11 % set to 1
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e7]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-5 10]  %set to exp(-5.4)
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 100000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.005 1e7]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 1000]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
%
%     {'AGTPreg_ON'                     }
%     {'TXTL_P70_RNAPbound_F'           }
%     {'TXTL_NTP_RNAP_1_Kd'             }
%     {'TXTL_NTP_RNAP_1_F'              }
%     {'TXTL_NTP_RNAP_2_Kd'             }
%     {'TXTL_NTP_RNAP_2_F'              }
%     {'TXTL_RNAdeg_F'                  }
%     {'TXTL_UTR_UTR1_F'                }
%     {'TL_AA_Kd'                       }
%     {'TL_AA_F'                        }
%     {'TL_AGTP_Kd'                     }
%     {'TL_AGTP_F'                      }
%     {'TXTL_PROT_deGFP_MATURATION'     }
% are fixed at the values above.
% 3. regen_F:
% estimate all 13 remaining params:
%     {'TX_elong_glob'                  }
%     {'AGTPdeg_time'                   }
%     {'AGTPdeg_rate'                   }
%     {'TXTL_P70_RNAPbound_Kd'          }
%     {'TXTL_RNAPBOUND_TERMINATION_RATE'}
%     {'TXTL_RNAdeg_Kd'                 }
%     {'TXTL_RNAdeg_kc'                 }
%     {'RNAP'                           }
%     {'RNase'                          }
%     {'TL_elong_glob'                  }
%     {'TXTL_UTR_UTR1_Kd'               }
%     {'TXTL_RIBOBOUND_TERMINATION_RATE'}
%     {'Ribo'                           }
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 3 5 7 12 14 15 16 17 19 25 26]';
estParams = activeNames2(estParamsIX,1)
CandidateParams(:,1:100:end,:)
%-- 4/17/19, 9:17 PM --%
activeNames1 = {...
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e7]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-7 10]
'RNase'                             exp(6.4899)         [1 100000]};
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000] % DO NOT FIX THIS.
'AGTPdeg_rate'                      exp(-9.5172)      [1e-7 1e-2] % set from before
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.01 1e7]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 1000]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11 % set to 1
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e7]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-5 10]  %set to exp(-5.4)
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 100000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.005 1e7]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 1000]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
%
%     {'AGTPreg_ON'                     }
%     {'TXTL_P70_RNAPbound_F'           }
%     {'TXTL_NTP_RNAP_1_Kd'             }
%     {'TXTL_NTP_RNAP_1_F'              }
%     {'TXTL_NTP_RNAP_2_Kd'             }
%     {'TXTL_NTP_RNAP_2_F'              }
%     {'TXTL_RNAdeg_F'                  }
%     {'TXTL_UTR_UTR1_F'                }
%     {'TL_AA_Kd'                       }
%     {'TL_AA_F'                        }
%     {'TL_AGTP_Kd'                     }
%     {'TL_AGTP_F'                      }
%     {'TXTL_PROT_deGFP_MATURATION'     }
% are fixed at the values above.
% 3. regen_F:
% estimate all 13 remaining params:
%     {'TX_elong_glob'                  }
%     {'AGTPdeg_time'                   }
%     {'AGTPdeg_rate'                   }
%     {'TXTL_P70_RNAPbound_Kd'          }
%     {'TXTL_RNAPBOUND_TERMINATION_RATE'}
%     {'TXTL_RNAdeg_Kd'                 }
%     {'TXTL_RNAdeg_kc'                 }
%     {'RNAP'                           }
%     {'RNase'                          }
%     {'TL_elong_glob'                  }
%     {'TXTL_UTR_UTR1_Kd'               }
%     {'TXTL_RIBOBOUND_TERMINATION_RATE'}
%     {'Ribo'                           }
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 3 5 7 12 14 15 16 17 19 25 26]';
estParams = activeNames2(estParamsIX,1);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:26)', estParamsIX);
estARRAY = [activeNames2(estParamsIX,[1]) num2cell(log(cell2mat(activeNames2(estParamsIX,2))))]
fixARRAY = [activeNames2(fixedParamsIX,[1]) num2cell(log(cell2mat(activeNames2(fixedParamsIX,2))))]
clear all
parRanges = mai.paramRanges;
paramIndices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
parRanges(paramIndices, :) = [...
2.3 2.95; %1
8.6 8.95; %2
-10.1 -9.7; %3
13 15; %4
-1 5 ; %5
15.59 15.73; %6
-0.2966 0.1031; %7
0.7 2.2; %8 pol
8.385 8.622;%9 RNase
3.18 3.69; % 10 -- TLcat
-3 13.5;%RiboKd
2 3;% Ribo term
3 4.6 ];% Ribo
marray_cut = mcmc_cut(marray, paramIndices, flipud((parRanges(paramIndices, :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
CandidateParams = marray_cut(:,1:100:end,end)
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 7 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 % fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       % from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]        % from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7% TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          % fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          % fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]          %10% fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          % TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         % TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13% fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       % fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        % from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         % TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          % TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]        %19% TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         % fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]         % from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]        %22% fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         % from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           % fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]          %25% fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        % fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        % fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28% from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           % fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       % from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       % 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          % from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33% from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    % fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
activeNames(indicesMasterVectorEstimated, 2)
log(cell2mat(activeNames(indicesMasterVectorEstimated, 2) ))
%-- 4/17/19, 10:22 PM --%
activeNames1 = {...
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e7]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-7 10]
'RNase'                             exp(6.4899)         [1 100000]};
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000] % DO NOT FIX THIS.
'AGTPdeg_rate'                      exp(-9.5172)      [1e-7 1e-2] % set from before
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.01 1e7]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 1000]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11 % set to 1
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e7]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-5 10]  %set to exp(-5.4)
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 100000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.005 1e7]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 1000]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
%
%     {'AGTPreg_ON'                     }
%     {'TXTL_P70_RNAPbound_F'           }
%     {'TXTL_NTP_RNAP_1_Kd'             }
%     {'TXTL_NTP_RNAP_1_F'              }
%     {'TXTL_NTP_RNAP_2_Kd'             }
%     {'TXTL_NTP_RNAP_2_F'              }
%     {'TXTL_RNAdeg_F'                  }
%     {'TXTL_UTR_UTR1_F'                }
%     {'TL_AA_Kd'                       }
%     {'TL_AA_F'                        }
%     {'TL_AGTP_Kd'                     }
%     {'TL_AGTP_F'                      }
%     {'TXTL_PROT_deGFP_MATURATION'     }
% are fixed at the values above.
% 3. regen_F:
% estimate all 13 remaining params:
%     {'TX_elong_glob'                  }
%     {'AGTPdeg_time'                   }
%     {'AGTPdeg_rate'                   }
%     {'TXTL_P70_RNAPbound_Kd'          }
%     {'TXTL_RNAPBOUND_TERMINATION_RATE'}
%     {'TXTL_RNAdeg_Kd'                 }
%     {'TXTL_RNAdeg_kc'                 }
%     {'RNAP'                           }
%     {'RNase'                          }
%     {'TL_elong_glob'                  }
%     {'TXTL_UTR_UTR1_Kd'               }
%     {'TXTL_RIBOBOUND_TERMINATION_RATE'}
%     {'Ribo'                           }
%%
% Names of parameters and species to actually estimate.
estParamsIX = [1 2 3 5 7 12 14 15 16 17 19 25 26]';
estParams = activeNames2(estParamsIX,1);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:26)', estParamsIX);
estARRAY = [activeNames2(estParamsIX,[1]) num2cell(log(cell2mat(activeNames2(estParamsIX,2))))]
fixARRAY = [activeNames2(fixedParamsIX,[1]) num2cell(log(cell2mat(activeNames2(fixedParamsIX,2))))]
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 % fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       % from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]        % from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7% TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          % fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          % fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]          %10% fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          % TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         % TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13% fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       % fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        % from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         % TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          % TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]        %19% TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         % fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]         % from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]        %22% fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         % from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           % fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]          %25% fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        % fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        % fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28% from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           % fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       % from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       % 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          % from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33% from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    % fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
estParamsIX = [7, 11, 12, 16:19]';
estParams = activeNames(estParamsIX,1);
estParams
mtet = model_txtl_ptetdeGFP_pLactetR_aTc
mtet.Species
mtet.param
edit mcmc_info_constgfp3tetR1.m
mtet.name
di = data_ZSIFFL
di
di(1)
di(3)
di(4)
mi = mcmc_info_ZSIFFL_mtet_phase1
mi = mcmc_info_ZSIFFL_mtet_phase1(mtet)
[mi, ac] = mcmc_info_ZSIFFL_mtet_phase1(mtet)
proj_ZSIFFL_mtet
ii
proj_ZSIFFL_mtet
pIX_TopoGeom = mi(i).paramMaps(mi(i).orderingIx, j)
mi(i).paramMaps
mi(i).orderingIx
length(mi(i).orderingIx)
length(mi(i).paramMaps)
proj_ZSIFFL_mtet
errmsg2
m.ValueInfo(i)
m.ValueInfo(i+1)
m.ValueInfo(36).Name)
m.ValueInfo(36).Name
m.ValueInfo(34).Name
m.ValueInfo(36).Name
m.ValueInfo(35).Name
m.ValueInfo(37).Name
pn
m
m.ValueInfo
for i = 1:37
modelValues{i} = m.ValueInfo.Name;
end
modelValues
for i = 1:37
modelValues{i} = m.ValueInfo(i).Name;
end
modelValues'
proj_ZSIFFL_mtet
mi(1).dosedNames
mi(3).dosedNames
mi(2).dosedNames
ds
mi(2).dosedNames
ds
mi(3).dosedNames
length(mi(i).dosedNames)
mi(i).dosedNames
mi(i).dosedNames{1}
sbioselect(mobj, 'Type', 'species', 'Name',mi(i).dosedNames{1})
sbioselect(mobj, 'Type', 'species', 'Name',mi(i).dosedNames)
ds.Name
ds(1).Name
ds(1).Name == mi(i).dosedNames
cellfun(strcmp, {ds(1).Name}, mi)(i).dosedNames
cellfun(strcmp, {ds(1).Name}, mi(i).dosedNames)
cellfun(strcmp, {ds(1).Name}, mi(i).dosedNames, 'UniformOutput', true)
help cellfun
cellfun(@strcmp, {ds(1).Name}, mi(i).dosedNames, 'UniformOutput', true)
cellfun(@(x) strcmp({ds(1).Name}, x), mi(i).dosedNames, 'UniformOutput', true)
cellfun(@(x) strcmp({ds(2).Name}, x), mi(i).dosedNames, 'UniformOutput', true)
find(cellfun(@(x) strcmp({ds(2).Name}, x), mi(i).dosedNames, 'UniformOutput', true))
mi(i).dosedNames(doseOrderingIx)
mi
mi.model_info
mi.model_info(3)
proj_ZSIFFL_mtet
mi(i).dosedNames(doseOrderingIx)
mi(i).dosedVals(doseOrderingIx,:)
edit data_ZSIFFL
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 % fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 % fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 % fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19% TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22% fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25% fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 % from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%%
% Names of parameters and species to actually estimate.
% As mentioned above, I have planned this out in the file
% ZachIFFL_estimation_strategy.txt
% 'TX_elong_glob'                      ,     'fix'
% 'TL_elong_glob'                      ,     'fix'
% 'AGTPdeg_time'                       ,     'fix'
% 'AGTPreg_ON'                         ,     'fix'
% 'AGTPdeg_rate'                       ,     'fix'
% 'TXTL_PROT_deGFP_MATURATION'         ,     'fix'
% 'TXTL_UTR_UTR1_Kd'                   ,     'fix'
% 'TXTL_PTET_RNAPbound_Kd'             ,     'est'
% 'TXTL_PTET_RNAPbound_F'              ,     'fix'
% 'TXTL_NTP_RNAP_1_Kd'                 ,     'fix'
% 'TXTL_NTP_RNAP_2_Kd'                 ,     'fix'
% 'TXTL_PTET_sequestration_Kd'         ,     'est'
% 'TXTL_PTET_sequestration_F'          ,     'est'
% 'TL_AA_Kd'                           ,     'fix'
% 'TL_AGTP_Kd'                         ,     'fix'
% 'TXTL_RNAdeg_Kd'                     ,     'fix'
% 'TXTL_INDUCER_TETR_ATC_Kd'           ,     'est'
% 'TXTL_INDUCER_TETR_ATC_F'            ,     'est'
% 'TXTL_DIMER_tetR_Kd'                 ,     'est'
% 'TXTL_DIMER_tetR_F'                  ,     'est'
% 'TXTL_UTR_UTR1_F'                    ,     'fix'
% 'TXTL_PLAC_RNAPbound_Kd'             ,     'fix'
% 'TXTL_PLAC_RNAPbound_F'              ,     'fix'
% 'TXTL_RNAPBOUND_TERMINATION_RATE'    ,     'fix'
% 'TXTL_NTP_RNAP_1_F'                  ,     'fix'
% 'TXTL_NTP_RNAP_2_F'                  ,     'fix'
% 'TL_AA_F'                            ,     'fix'
% 'TL_AGTP_F'                          ,     'fix'
% 'TXTL_RIBOBOUND_TERMINATION_RATE'    ,     'fix'
% 'TXTL_RNAdeg_F'                      ,     'fix'
% 'TXTL_RNAdeg_kc'                     ,     'fix'
% Thus, the 7 estimated parameters are:
% 'TXTL_PTET_RNAPbound_Kd'             ,     'est'
% 'TXTL_PTET_sequestration_Kd'         ,     'est'
% 'TXTL_PTET_sequestration_F'          ,     'est'
% 'TXTL_INDUCER_TETR_ATC_Kd'           ,     'est'
% 'TXTL_INDUCER_TETR_ATC_F'            ,     'est'
% 'TXTL_DIMER_tetR_Kd'                 ,     'est'
% 'TXTL_DIMER_tetR_F'                  ,     'est'
estParamsIX = [7, 11, 12, 16:19]';
estParams = activeNames(estParamsIX,1)
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 % fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 % fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 % fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19% TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22% fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25% fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 % from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
% Thus, the 10 estimated parameters are:
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
estParamsIX = [7, 11, 12, 16:19]';
estParams = activeNames(estParamsIX,1)
mlac = model_txtl_pLacdeGFP.m
mlac = model_txtl_pLacdeGFP
mlac.Parameters
mlac.Spe
proj_ZSIFFL_mtet_phase2
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
edit proj_ZSIFFL_mtet.m
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
% !! NEED TO CHECK IF AT THE PICKED POINT THE TRAJECTORIES LOOK OK.
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 % fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 % fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 % fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19% TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22% fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25% fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 % from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%%
% Names of parameters and species to actually estimate.
% As mentioned above, I have planned this out in the file
% ZachIFFL_estimation_strategy.txt
% 'TX_elong_glob'                      ,     'fix'
% 'TL_elong_glob'                      ,     'fix'
% 'AGTPdeg_time'                       ,     'fix'
% 'AGTPreg_ON'                         ,     'fix'
% 'AGTPdeg_rate'                       ,     'fix'
% 'TXTL_PROT_deGFP_MATURATION'         ,     'fix'
% 'TXTL_UTR_UTR1_Kd'                   ,     'fix'
% 'TXTL_PTET_RNAPbound_Kd'             ,     'est'
% 'TXTL_PTET_RNAPbound_F'              ,     'fix'
% 'TXTL_NTP_RNAP_1_Kd'                 ,     'fix'
% 'TXTL_NTP_RNAP_2_Kd'                 ,     'fix'
% 'TXTL_PTET_sequestration_Kd'         ,     'est'
% 'TXTL_PTET_sequestration_F'          ,     'est'
% 'TL_AA_Kd'                           ,     'fix'
% 'TL_AGTP_Kd'                         ,     'fix'
% 'TXTL_RNAdeg_Kd'                     ,     'fix'
% 'TXTL_INDUCER_TETR_ATC_Kd'           ,     'est'
% 'TXTL_INDUCER_TETR_ATC_F'            ,     'est'
% 'TXTL_DIMER_tetR_Kd'                 ,     'est'
% 'TXTL_DIMER_tetR_F'                  ,     'est'
% 'TXTL_UTR_UTR1_F'                    ,     'fix'
% 'TXTL_PLAC_RNAPbound_Kd'             ,     'fix'
% 'TXTL_PLAC_RNAPbound_F'              ,     'fix'
% 'TXTL_RNAPBOUND_TERMINATION_RATE'    ,     'fix'
% 'TXTL_NTP_RNAP_1_F'                  ,     'fix'
% 'TXTL_NTP_RNAP_2_F'                  ,     'fix'
% 'TL_AA_F'                            ,     'fix'
% 'TL_AGTP_F'                          ,     'fix'
% 'TXTL_RIBOBOUND_TERMINATION_RATE'    ,     'fix'
% 'TXTL_RNAdeg_F'                      ,     'fix'
% 'TXTL_RNAdeg_kc'                     ,     'fix'
% Thus, the 7 estimated parameters are:
% 'TXTL_PTET_RNAPbound_Kd'             ,     'est'
% 'TXTL_PTET_sequestration_Kd'         ,     'est'
% 'TXTL_PTET_sequestration_F'          ,     'est'
% 'TXTL_INDUCER_TETR_ATC_Kd'           ,     'est'
% 'TXTL_INDUCER_TETR_ATC_F'            ,     'est'
% 'TXTL_DIMER_tetR_Kd'                 ,     'est'
% 'TXTL_DIMER_tetR_F'                  ,     'est'
estParamsIX = [7, 11, 12, 16:19]';
estParams = activeNames(estParamsIX,1)
clc
clear all
mcmc_plot(marray(:, 1:end,1:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllWalkers');
close al
close all
%-- 4/23/19, 5:35 AM --%
whos
data_info
mi
mi(3).dataToMapTo
mi(2).dataToMapTo
mi(1).dataToMapTo
data_info(mi(1).dataToMapTo)
data_info(mi(1).dataToMapTo).measuredNames
data_info(mi(1).dataToMapTo).measuredNames{1}
data_info(mi(1).dataToMapTo).measuredNames{1}{1}
data_info(mi(2).dataToMapTo).measuredNames{1}{1}
data_info(mi(3).dataToMapTo).measuredNames{1}{1}
edit mcmc_info_vnprl_F2.m
edit proj_vnprl_F2.m
edit proj_vnprl.m
ddii = data_VNPRL2011;
ddii.measuredNames
data_info.measuredNames
edit data_ZSIFFL.m
data_info.dosedNames
data_info(1).dosedNames
data_info(1).dosedNames{1}
mi
mi(3)
data_info(mi(3).dataToMapTo).measuredNames
data_info(mi(3).dataToMapTo).measuredNames{1}
help isstr
exp(-25)
parRanges([1], :) = [-1.16, -0.92 ]
marray_cut = mcmc_cut(marray, [1], flipud((parRanges([1], :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut([1], 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames([1]), 'RNA deg covariation')
parRanges([1], :) = [-1.16, -0.92 ]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 70):end), [1], flipud((parRanges([1], :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut([1], 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames([1]), 'RNA deg covariation')
parIDs = [1 2 3];
parRanges(parIDs, :) = [-1.16, -0.92 ;
-4 -0.5;
-8.5 -15]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 70):end), parIDs, flipud((parRanges(parIDs, :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut(parIDs, 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames(parIDs), '3 params')
clc
parIDs = [1 2 3];
parRanges(parIDs, :) = [-1.16, -0.92 ;
-4 -0.5;
-8.5 -15]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 70):end), parIDs, flipud((parRanges(parIDs, :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut(parIDs, 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames(parIDs), '3 params')
parRanges
parIDs = [1 2 3];
parRanges(parIDs, :) = [-1.16, -0.92 ;
-4 -0.5;
-15 -8.5]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 70):end), parIDs, flipud((parRanges(parIDs, :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut(parIDs, 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames(parIDs), '3 params')
mcut(:,:)'
size(mcut)
close all
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)		, 		[exp(0)	exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)		, 		[exp(-5)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)		, 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)		, 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)		, 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)		, 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)		, 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
% Thus, the 10 estimated parameters are:
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
estParamsIX = [1 2 3 7 11 16 21 31 32 33]';
estParams = activeNames(estParamsIX,1)
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)		, 		[exp(0)	exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)		, 		[exp(-5)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)		, 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)		, 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)		, 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)		, 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)		, 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
% Thus, the 10 estimated parameters are:
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
estParamsIX = [1 2 3 7 11 16 21 31 32 33]';
estParams = activeNames(estParamsIX,1)
proj_ZSIFFL_mtet_phase2
%-- 4/28/19, 5:08 AM --%
% !! todo -- set the parameters estimated from phase 1. then this will be
% ready to run.
% Phase 2 of the estimation procedure of the tetR system parameters from
% Zach's tetR data.
%
% The topologies involved in this estimataion probem are:
% plac - UTR1 - tetR, ptet - UTR1 - deGFP, aTc; This has three
% topologies, the constitutive expression geometry, the repression
% geometry, and the aTc induction geometry.
%
% A lot of the core parameters are set from those estimated from the
% constitutive expression fits to the data in the VNPRL2011 and ACS 2014 papers.
%
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)		, 		[exp(0)	exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)		, 		[exp(-5)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)		, 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)		, 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)		, 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)		, 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)		, 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
% Thus, the 10 estimated parameters are:
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
estParamsIX = [1 2 3 7 11 16 21 31 32 33]';
estParams = activeNames(estParamsIX,1)
[...
{'tx_{cat}'}
{'tl_cat'}
{'tau'}
{'pol_{Kd,tet}'}
{'rep_{Kd}'}
{'ATC_{Kd}'  }
{'pol_{Kd,lac}'        }
{'pol'}
{'RNase'}
{'Ribo'}]
parnames = ...
[...
{'tx_{cat}'}
{'tl_cat'}
{'tau'}
{'pol_{Kd,tet}'}
{'rep_{Kd}'}
{'ATC_{Kd}'  }
{'pol_{Kd,lac}'        }
{'pol'}
{'RNase'}
{'Ribo'}];
[estParams parnames]
clear all
clear all
% Set working directory to the txtlsim toolbox directory.
projdir = [pwd '/mcmc_simbio/projects/proj_ZSIFFL_mtet'];
addpath(projdir)
jpgsave = true;
figsave = false;
% Load model, mcmc_info, and data_info.
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mcmc_info = mcmc_info_ZSIFFL_mtet_phase1(mtet);
di = data_ZSIFFL;
mi = mcmc_info.model_info;
ri = mcmc_info.runsim_info;
mai = mcmc_info.master_info;
% plot data from existing simulations.
tsIDtouse = 3;
plotflag = true;
switch tsIDtouse
case 1
ts1 = '20190420_045130_1_92790';
ts2 = '20190420_070950_1_30930';
tstamp = {ts1 ts2};
nIterID = {1:2, 1};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
case 2
ts1 = '20190420_045130_1_92790';
ts2 = '20190420_071438_1_30930';
ts3 = '20190420_071438_2_15465';
ts4 = '20190420_155505_1_7732';
ts5 = '20190420_155505_2_3093';
ts6 = '20190420_155505_3_1546';
ts7 = '20190420_155505_4_773';
ts8 = '20190420_155505_5_309';
ts9 = '20190420_155505_6_155';
ts10 = '20190420_155505_7_77';
ts11 = '20190420_155505_8_31';
%
%         tstamp = {ts1 ts2 ts3 ts4 ts5 ts6 ts7 ts8 ts9 ts10 ts11};
%         nIterID = {1:2, 1:10 1:8 1:5 1:5 1:5 1:5 1:5, 1:5 1:5 1:5};
tstamp = {ts4 ts5 ts6 ts7 ts8 ts9 ts10 ts11};
nIterID = {1:5 1:5 1:5 1:5 1:5, 1:5 1:5 1:5};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
%         conclusions from case 2:
%     [{'pol_{Kd, tet}'     } OK
%     {'rep_{Kd}'} expand lower bound from ~3 to maybe -5?
%     {'rep_F' }  OK
%     {'ATC_{Kd}'  } expand upper bound from 18 to 25?
%     {'ATC_F'   } OK
%     {'dim_{Kd}'        } expand lower bound from 7 to -3
%     {'dim_F'         }
case 3
ts1 = '20190421_155749_1_773';
ts2 = '20190421_155749_2_309';
ts3 = '20190422_142534_1_773';
ts4 = '20190422_214228_1_773';
ts5 = '20190424_104801_1_773';
tstamp = {ts1 ts2 ts3 ts4 ts5};
nIterID = {1:10 1:2 1:4 1:7 1:14};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
end
tsToSave = ts5;
mai.masterVector
marray_full = mcmc_get_walkers(tstamp,nIterID, projdir);
marray = marray_full(:,:,1:end);
clear marray_full
parnames = ...
[    {'rep_{Kd}'}
{'ATC_{Kd}'  }
{'dim_{Kd}'        }    ];
%
%     {'TX_elong_glob'                  }
%     {'AGTPdeg_time'                   }
%     {'AGTPdeg_rate'                   }
%     {'TXTL_P70_RNAPbound_Kd'          }
%     {'TXTL_RNAPBOUND_TERMINATION_RATE'}
%     {'TXTL_RNAdeg_Kd'                 }
%     {'TXTL_RNAdeg_kc'                 }
%     {'RNAP'                           }
%     {'RNase'                          }
%     {'TL_elong_glob'                  }
%     {'TXTL_UTR_UTR1_Kd'               }
%     {'TXTL_RIBOBOUND_TERMINATION_RATE'}
%     {'Ribo'                           }
%
%%
if plotflag
%     close all
% Plot trace and corner (posterior distribution) plots
mcmc_plot(marray(:, 1:end,(end - 70):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllWalkers');
%%
% {'rep_{Kd}'} -1.16, -0.92
%
parIDs = [1 2 3];
parRanges(parIDs, :) = [-1.16, -0.92 ;
-4 -0.5;
-15 -8.5]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 70):end), parIDs, flipud((parRanges(parIDs, :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut(parIDs, 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames(parIDs), '3 params')
% We can literally pick any point in this cartesian product.
%     parRanges(parIDs, :) = [-1.16, -0.92 ;
%         -4 -0.5;
%         -15 -8.5]
%     parRanges([1, 2, 3], :) = [15.59 15.73 ;
%         -0.2966 0.1031;
%         8.385 8.622];
%     marray_cut = mcmc_cut(marray, [6,7,9], flipud((parRanges([6 7 9], :))'));
%
%     mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
%     'savematlabfig', figsave, 'savejpeg', false,...
%     'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
%     mcut = marray_cut([6 7 9], 1:end,ceil(end/4):end);
%     mcmc_3D(mcut(:,:)', parnames([6 7 9]), 'RNA deg covariation')
%
%     paramIndices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
%     parRanges(paramIndices, :) = [...
%         2.3 2.95; %1
%         8.6 8.95; %2
%         -10.1 -9.7; %3
%         13 15; %4
%         -1 5 ; %5
%         15.59 15.73; %6
%         -0.2966 0.1031; %7
%         0.7 2.2; %8 pol
%         8.385 8.622;%9 RNase
%         3.18 3.69; % 10 -- TLcat
%         -3 13.5;%RiboKd
%         2 3;% Ribo term
%         3 4.6 ];% Ribo
%     marray_cut = mcmc_cut(marray, paramIndices, flipud((parRanges(paramIndices, :))'));
%
%     mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
%     'savematlabfig', figsave, 'savejpeg', false,...
%     'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
%
%  CandidateParams = marray_cut(:,1:100:end,end)
%     figure
%     [C,lags,ESS]=eacorr(marray(:, :,1:end));%10000:end
%     plot(lags,C,'.-',lags([1 end]),[0 0],'k');
%     grid on
%     xlabel('lags')
%     ylabel('autocorrelation');
%     text(lags(end),0,sprintf('Effective Sample Size (ESS): %.0f_ ',...
%         ceil(mean(ESS))),'verticalalignment','bottom','horizontalalignment','right')
%     title('Markov Chain Auto Correlation')
%
%% Plot trajectories.
% rebuild the master vector array, either via mcmc_cut or just using
% all estimated points.
%     mvarray = masterVecArray(marray_cut, mai);
mvarray = masterVecArray(marray, mai);
clear marray
for miID = 1:length(mi)
currmi = mi(miID);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
marrayOrd = mvarray(currmi.paramMaps(currmi.orderingIx),:,samplePoints);
dvStr = arrayfun(@num2str, currmi.dosedVals, 'UniformOutput', false);
% titles array: # dose combs x (exp, sim) ==2 x # measured species.
nms = length(currmi.measuredSpeciesIndex);
ndc = size(currmi.dosedVals,2); %# dose combinations
titls_array = cell(ndc, 2, nms);
currdi = data_info(currmi.dataToMapTo);
dn = currdi.dosedNames; %usually the last one will be the thing that is changing...
% can generalize to use all dose info if it becomes needed.
for msID = 1:nms
% for each measured species (ms), plot the trajectories over
% all the doses, for both experiment and simulation
if iscell(data_info(currmi.dataToMapTo).measuredNames{msID})
if ischar( data_info(currmi.dataToMapTo).measuredNames{msID}{1})
ms = data_info(currmi.dataToMapTo).measuredNames{msID}{1};
else
error('what is your data type?')
end
elseif ischar( data_info(currmi.dataToMapTo).measuredNames{msID})
ms = data_info(currmi.dataToMapTo).measuredNames{msID};
else
error('what is your data type?')
end
for dcID = 1:ndc
dosestr = [];
for dnID = 1:length(dn)
dosestr = [dosestr ' ' dn{dnID} num2str(currmi.dosedVals(ndID, dcID))];
end
% dose combination by (exp, sim) by measured species ID
titls_array{dcID, 1, msID} = ['Exp ' ms ' ' dosestr];
titls_array{dcID, 2, msID} = ['Sim ' ms ' ' dosestr];
end
end
end
clear all
% Set working directory to the txtlsim toolbox directory.
projdir = [pwd '/mcmc_simbio/projects/proj_ZSIFFL_mtet'];
addpath(projdir)
jpgsave = true;
figsave = false;
% Load model, mcmc_info, and data_info.
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mcmc_info = mcmc_info_ZSIFFL_mtet_phase1(mtet);
di = data_ZSIFFL;
mi = mcmc_info.model_info;
ri = mcmc_info.runsim_info;
mai = mcmc_info.master_info;
% plot data from existing simulations.
tsIDtouse = 3;
plotflag = true;
switch tsIDtouse
case 1
ts1 = '20190420_045130_1_92790';
ts2 = '20190420_070950_1_30930';
tstamp = {ts1 ts2};
nIterID = {1:2, 1};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
case 2
ts1 = '20190420_045130_1_92790';
ts2 = '20190420_071438_1_30930';
ts3 = '20190420_071438_2_15465';
ts4 = '20190420_155505_1_7732';
ts5 = '20190420_155505_2_3093';
ts6 = '20190420_155505_3_1546';
ts7 = '20190420_155505_4_773';
ts8 = '20190420_155505_5_309';
ts9 = '20190420_155505_6_155';
ts10 = '20190420_155505_7_77';
ts11 = '20190420_155505_8_31';
%
%         tstamp = {ts1 ts2 ts3 ts4 ts5 ts6 ts7 ts8 ts9 ts10 ts11};
%         nIterID = {1:2, 1:10 1:8 1:5 1:5 1:5 1:5 1:5, 1:5 1:5 1:5};
tstamp = {ts4 ts5 ts6 ts7 ts8 ts9 ts10 ts11};
nIterID = {1:5 1:5 1:5 1:5 1:5, 1:5 1:5 1:5};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
%         conclusions from case 2:
%     [{'pol_{Kd, tet}'     } OK
%     {'rep_{Kd}'} expand lower bound from ~3 to maybe -5?
%     {'rep_F' }  OK
%     {'ATC_{Kd}'  } expand upper bound from 18 to 25?
%     {'ATC_F'   } OK
%     {'dim_{Kd}'        } expand lower bound from 7 to -3
%     {'dim_F'         }
case 3
ts1 = '20190421_155749_1_773';
ts2 = '20190421_155749_2_309';
ts3 = '20190422_142534_1_773';
ts4 = '20190422_214228_1_773';
ts5 = '20190424_104801_1_773';
tstamp = {ts1 ts2 ts3 ts4 ts5};
nIterID = {1:10 1:2 1:4 1:7 1:14};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
end
tsToSave = ts5;
mai.masterVector
marray_full = mcmc_get_walkers(tstamp,nIterID, projdir);
marray = marray_full(:,:,1:end);
clear marray_full
parnames = ...
[    {'rep_{Kd}'}
{'ATC_{Kd}'  }
{'dim_{Kd}'        }    ];
%
%     {'TX_elong_glob'                  }
%     {'AGTPdeg_time'                   }
%     {'AGTPdeg_rate'                   }
%     {'TXTL_P70_RNAPbound_Kd'          }
%     {'TXTL_RNAPBOUND_TERMINATION_RATE'}
%     {'TXTL_RNAdeg_Kd'                 }
%     {'TXTL_RNAdeg_kc'                 }
%     {'RNAP'                           }
%     {'RNase'                          }
%     {'TL_elong_glob'                  }
%     {'TXTL_UTR_UTR1_Kd'               }
%     {'TXTL_RIBOBOUND_TERMINATION_RATE'}
%     {'Ribo'                           }
%
%%
if plotflag
%     close all
% Plot trace and corner (posterior distribution) plots
mcmc_plot(marray(:, 1:end,(end - 70):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllWalkers');
%%
% {'rep_{Kd}'} -1.16, -0.92
%
parIDs = [1 2 3];
parRanges(parIDs, :) = [-1.16, -0.92 ;
-4 -0.5;
-15 -8.5]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 70):end), parIDs, flipud((parRanges(parIDs, :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut(parIDs, 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames(parIDs), '3 params')
% We can literally pick any point in this cartesian product.
%     parRanges(parIDs, :) = [-1.16, -0.92 ;
%         -4 -0.5;
%         -15 -8.5]
%     parRanges([1, 2, 3], :) = [15.59 15.73 ;
%         -0.2966 0.1031;
%         8.385 8.622];
%     marray_cut = mcmc_cut(marray, [6,7,9], flipud((parRanges([6 7 9], :))'));
%
%     mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
%     'savematlabfig', figsave, 'savejpeg', false,...
%     'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
%     mcut = marray_cut([6 7 9], 1:end,ceil(end/4):end);
%     mcmc_3D(mcut(:,:)', parnames([6 7 9]), 'RNA deg covariation')
%
%     paramIndices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
%     parRanges(paramIndices, :) = [...
%         2.3 2.95; %1
%         8.6 8.95; %2
%         -10.1 -9.7; %3
%         13 15; %4
%         -1 5 ; %5
%         15.59 15.73; %6
%         -0.2966 0.1031; %7
%         0.7 2.2; %8 pol
%         8.385 8.622;%9 RNase
%         3.18 3.69; % 10 -- TLcat
%         -3 13.5;%RiboKd
%         2 3;% Ribo term
%         3 4.6 ];% Ribo
%     marray_cut = mcmc_cut(marray, paramIndices, flipud((parRanges(paramIndices, :))'));
%
%     mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
%     'savematlabfig', figsave, 'savejpeg', false,...
%     'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
%
%  CandidateParams = marray_cut(:,1:100:end,end)
%     figure
%     [C,lags,ESS]=eacorr(marray(:, :,1:end));%10000:end
%     plot(lags,C,'.-',lags([1 end]),[0 0],'k');
%     grid on
%     xlabel('lags')
%     ylabel('autocorrelation');
%     text(lags(end),0,sprintf('Effective Sample Size (ESS): %.0f_ ',...
%         ceil(mean(ESS))),'verticalalignment','bottom','horizontalalignment','right')
%     title('Markov Chain Auto Correlation')
%
%% Plot trajectories.
% rebuild the master vector array, either via mcmc_cut or just using
% all estimated points.
%     mvarray = masterVecArray(marray_cut, mai);
mvarray = masterVecArray(marray, mai);
clear marray
for miID = 1:length(mi)
currmi = mi(miID);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
marrayOrd = mvarray(currmi.paramMaps(currmi.orderingIx),:,samplePoints);
dvStr = arrayfun(@num2str, currmi.dosedVals, 'UniformOutput', false);
% titles array: # dose combs x (exp, sim) ==2 x # measured species.
nms = length(currmi.measuredSpeciesIndex);
ndc = size(currmi.dosedVals,2); %# dose combinations
titls_array = cell(ndc, 2, nms);
currdi = data_info(currmi.dataToMapTo);
dn = currdi.dosedNames; %usually the last one will be the thing that is changing...
% can generalize to use all dose info if it becomes needed.
for msID = 1:nms
% for each measured species (ms), plot the trajectories over
% all the doses, for both experiment and simulation
if iscell(data_info(currmi.dataToMapTo).measuredNames{msID})
if ischar( data_info(currmi.dataToMapTo).measuredNames{msID}{1})
ms = data_info(currmi.dataToMapTo).measuredNames{msID}{1};
else
error('what is your data type?')
end
elseif ischar( data_info(currmi.dataToMapTo).measuredNames{msID})
ms = data_info(currmi.dataToMapTo).measuredNames{msID};
else
error('what is your data type?')
end
for dcID = 1:ndc
dosestr = [];
for dnID = 1:length(dn)
dosestr = [dosestr ' ' dn{dnID} num2str(currmi.dosedVals(ndID, dcID))];
end
% dose combination by (exp, sim) by measured species ID
titls_array{dcID, 1, msID} = ['Exp ' ms ' ' dosestr];
titls_array{dcID, 2, msID} = ['Sim ' ms ' ' dosestr];
end
end
end
end
end
clear all
% Set working directory to the txtlsim toolbox directory.
projdir = [pwd '/mcmc_simbio/projects/proj_ZSIFFL_mtet'];
addpath(projdir)
jpgsave = true;
figsave = false;
% Load model, mcmc_info, and data_info.
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mcmc_info = mcmc_info_ZSIFFL_mtet_phase1(mtet);
di = data_ZSIFFL;
mi = mcmc_info.model_info;
ri = mcmc_info.runsim_info;
mai = mcmc_info.master_info;
% plot data from existing simulations.
tsIDtouse = 3;
plotflag = true;
switch tsIDtouse
case 1
ts1 = '20190420_045130_1_92790';
ts2 = '20190420_070950_1_30930';
tstamp = {ts1 ts2};
nIterID = {1:2, 1};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
case 2
ts1 = '20190420_045130_1_92790';
ts2 = '20190420_071438_1_30930';
ts3 = '20190420_071438_2_15465';
ts4 = '20190420_155505_1_7732';
ts5 = '20190420_155505_2_3093';
ts6 = '20190420_155505_3_1546';
ts7 = '20190420_155505_4_773';
ts8 = '20190420_155505_5_309';
ts9 = '20190420_155505_6_155';
ts10 = '20190420_155505_7_77';
ts11 = '20190420_155505_8_31';
%
%         tstamp = {ts1 ts2 ts3 ts4 ts5 ts6 ts7 ts8 ts9 ts10 ts11};
%         nIterID = {1:2, 1:10 1:8 1:5 1:5 1:5 1:5 1:5, 1:5 1:5 1:5};
tstamp = {ts4 ts5 ts6 ts7 ts8 ts9 ts10 ts11};
nIterID = {1:5 1:5 1:5 1:5 1:5, 1:5 1:5 1:5};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
%         conclusions from case 2:
%     [{'pol_{Kd, tet}'     } OK
%     {'rep_{Kd}'} expand lower bound from ~3 to maybe -5?
%     {'rep_F' }  OK
%     {'ATC_{Kd}'  } expand upper bound from 18 to 25?
%     {'ATC_F'   } OK
%     {'dim_{Kd}'        } expand lower bound from 7 to -3
%     {'dim_F'         }
case 3
ts1 = '20190421_155749_1_773';
ts2 = '20190421_155749_2_309';
ts3 = '20190422_142534_1_773';
ts4 = '20190422_214228_1_773';
ts5 = '20190424_104801_1_773';
tstamp = {ts1 ts2 ts3 ts4 ts5};
nIterID = {1:10 1:2 1:4 1:7 1:14};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
end
tsToSave = ts5;
mai.masterVector
marray_full = mcmc_get_walkers(tstamp,nIterID, projdir);
marray = marray_full(:,:,1:end);
clear marray_full
parnames = ...
[    {'rep_{Kd}'}
{'ATC_{Kd}'  }
{'dim_{Kd}'        }    ];
%
%     {'TX_elong_glob'                  }
%     {'AGTPdeg_time'                   }
%     {'AGTPdeg_rate'                   }
%     {'TXTL_P70_RNAPbound_Kd'          }
%     {'TXTL_RNAPBOUND_TERMINATION_RATE'}
%     {'TXTL_RNAdeg_Kd'                 }
%     {'TXTL_RNAdeg_kc'                 }
%     {'RNAP'                           }
%     {'RNase'                          }
%     {'TL_elong_glob'                  }
%     {'TXTL_UTR_UTR1_Kd'               }
%     {'TXTL_RIBOBOUND_TERMINATION_RATE'}
%     {'Ribo'                           }
%
%%
if plotflag
%     close all
% Plot trace and corner (posterior distribution) plots
mcmc_plot(marray(:, 1:end,(end - 70):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllWalkers');
%%
% {'rep_{Kd}'} -1.16, -0.92
%
parIDs = [1 2 3];
parRanges(parIDs, :) = [-1.16, -0.92 ;
-4 -0.5;
-15 -8.5]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 70):end), parIDs, flipud((parRanges(parIDs, :))'));
mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut(parIDs, 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames(parIDs), '3 params')
% We can literally pick any point in this cartesian product.
%     parRanges(parIDs, :) = [-1.16, -0.92 ;
%         -4 -0.5;
%         -15 -8.5]
%     parRanges([1, 2, 3], :) = [15.59 15.73 ;
%         -0.2966 0.1031;
%         8.385 8.622];
%     marray_cut = mcmc_cut(marray, [6,7,9], flipud((parRanges([6 7 9], :))'));
%
%     mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
%     'savematlabfig', figsave, 'savejpeg', false,...
%     'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
%     mcut = marray_cut([6 7 9], 1:end,ceil(end/4):end);
%     mcmc_3D(mcut(:,:)', parnames([6 7 9]), 'RNA deg covariation')
%
%     paramIndices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
%     parRanges(paramIndices, :) = [...
%         2.3 2.95; %1
%         8.6 8.95; %2
%         -10.1 -9.7; %3
%         13 15; %4
%         -1 5 ; %5
%         15.59 15.73; %6
%         -0.2966 0.1031; %7
%         0.7 2.2; %8 pol
%         8.385 8.622;%9 RNase
%         3.18 3.69; % 10 -- TLcat
%         -3 13.5;%RiboKd
%         2 3;% Ribo term
%         3 4.6 ];% Ribo
%     marray_cut = mcmc_cut(marray, paramIndices, flipud((parRanges(paramIndices, :))'));
%
%     mcmc_plot(marray_cut(:, 1:end,ceil(end/4):end), parnames(:),...
%     'savematlabfig', figsave, 'savejpeg', false,...
%     'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
%
%  CandidateParams = marray_cut(:,1:100:end,end)
%     figure
%     [C,lags,ESS]=eacorr(marray(:, :,1:end));%10000:end
%     plot(lags,C,'.-',lags([1 end]),[0 0],'k');
%     grid on
%     xlabel('lags')
%     ylabel('autocorrelation');
%     text(lags(end),0,sprintf('Effective Sample Size (ESS): %.0f_ ',...
%         ceil(mean(ESS))),'verticalalignment','bottom','horizontalalignment','right')
%     title('Markov Chain Auto Correlation')
%
%% Plot trajectories.
% rebuild the master vector array, either via mcmc_cut or just using
% all estimated points.
%     mvarray = masterVecArray(marray_cut, mai);
mvarray = masterVecArray(marray, mai);
clear marray
for miID = 1:length(mi)
currmi = mi(miID);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
marrayOrd = mvarray(currmi.paramMaps(currmi.orderingIx),:,samplePoints);
dvStr = arrayfun(@num2str, currmi.dosedVals, 'UniformOutput', false);
% titles array: # dose combs x (exp, sim) ==2 x # measured species.
nms = length(currmi.measuredSpeciesIndex);
ndc = size(currmi.dosedVals,2); %# dose combinations
titls_array = cell(ndc, 2, nms);
currdi = data_info(currmi.dataToMapTo);
dn = currdi.dosedNames; %usually the last one will be the thing that is changing...
% can generalize to use all dose info if it becomes needed.
for msID = 1:nms
% for each measured species (ms), plot the trajectories over
% all the doses, for both experiment and simulation
if iscell(data_info(currmi.dataToMapTo).measuredNames{msID})
if ischar( data_info(currmi.dataToMapTo).measuredNames{msID}{1})
ms = data_info(currmi.dataToMapTo).measuredNames{msID}{1};
else
error('what is your data type?')
end
elseif ischar( data_info(currmi.dataToMapTo).measuredNames{msID})
ms = data_info(currmi.dataToMapTo).measuredNames{msID};
else
error('what is your data type?')
end
for dcID = 1:ndc
dosestr = [];
for dnID = 1:length(dn)
dosestr = [dosestr ' ' dn{dnID} num2str(currmi.dosedVals(dnID, dcID))];
end
% dose combination by (exp, sim) by measured species ID
titls_array{dcID, 1, msID} = ['Exp ' ms ' ' dosestr];
titls_array{dcID, 2, msID} = ['Sim ' ms ' ' dosestr];
end
end
end
end
titls_array
currmi.dosedVals
ndc
dn
currdi
analysis_ZSIFFL_mtet_phase1_b
titls_array
for miID = 1:length(mi)
currmi = mi(miID);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
marrayOrd = mvarray(currmi.paramMaps(currmi.orderingIx),:,samplePoints);
dvStr = arrayfun(@num2str, currmi.dosedVals, 'UniformOutput', false);
% titles array: # dose combs x (exp, sim) ==2 x # measured species.
nms = length(currmi.measuredSpeciesIndex);
ndc = size(currmi.dosedVals,2); %# dose combinations
titls_array = cell(ndc, 2, nms);
currdi = data_info(currmi.dataToMapTo);
dn = currdi.dosedNames; %usually the last one will be the thing that is changing...
% can generalize to use all dose info if it becomes needed.
for msID = 1:nms
% for each measured species (ms), plot the trajectories over
% all the doses, for both experiment and simulation
if iscell(data_info(currmi.dataToMapTo).measuredNames{msID})
if ischar( data_info(currmi.dataToMapTo).measuredNames{msID}{1})
ms = data_info(currmi.dataToMapTo).measuredNames{msID}{1};
else
error('what is your data type?')
end
elseif ischar( data_info(currmi.dataToMapTo).measuredNames{msID})
ms = data_info(currmi.dataToMapTo).measuredNames{msID};
else
error('what is your data type?')
end
for dcID = 1:ndc
dosestr = [];
for dnID = 1:length(dn)
dosestr = [dosestr ' ' dn{dnID} ' ' num2str(currdi.dosedVals(dnID, dcID))];
end
% dose combination by (exp, sim) by measured species ID
titls_array{dcID, 1, msID} = ['Exp ' ms ' ' dosestr];
titls_array{dcID, 2, msID} = ['Sim ' ms ' ' dosestr];
end
end
titls_array
end
for miID = 1:length(mi)
currmi = mi(miID);
samplePoints = ceil(size(mvarray, 3) * [.9, 1]);
marrayOrd = mvarray(currmi.paramMaps(currmi.orderingIx),:,samplePoints);
dvStr = arrayfun(@num2str, currmi.dosedVals, 'UniformOutput', false);
% titles array: # dose combs x (exp, sim) ==2 x # measured species.
nms = length(currmi.measuredSpeciesIndex);
ndc = size(currmi.dosedVals,2); %# dose combinations
titls_array = cell(ndc, 2, nms);
currdi = data_info(currmi.dataToMapTo);
dn = currdi.dosedNames; %usually the last one will be the thing that is changing...
% can generalize to use all dose info if it becomes needed.
for msID = 1:nms
% for each measured species (ms), plot the trajectories over
% all the doses, for both experiment and simulation
if iscell(data_info(currmi.dataToMapTo).measuredNames{msID})
if ischar( data_info(currmi.dataToMapTo).measuredNames{msID}{1})
ms = data_info(currmi.dataToMapTo).measuredNames{msID}{1};
else
error('what is your data type?')
end
elseif ischar( data_info(currmi.dataToMapTo).measuredNames{msID})
ms = data_info(currmi.dataToMapTo).measuredNames{msID};
else
error('what is your data type?')
end
for dcID = 1:ndc
dosestr = [];
for dnID = 1:length(dn)
dosestr = [dosestr ' ' dn{dnID} ' ' num2str(currdi.dosedVals(dnID, dcID))];
end
% dose combination by (exp, sim) by measured species ID
titls_array{dcID, 1, msID} = ['Exp ' ms dosestr];
titls_array{dcID, 2, msID} = ['Sim ' ms dosestr];
end
end
titls_array
end
regexp(projdir, '/')
sls = regexp(projdir, '/');
sls(end)
projdir(sls(end)+1 : end)
sls = regexp(projdir, '/', 'split');
sls
analysis_ZSIFFL_mtet_phase1_b
close all
clear all
analysis_ZSIFFL_mtet_phase2
sls = regexp(projdir, '/', 'split');
extrastring = sls{end};
whos
mtet
mtet.reactions
mtet.Parameters
analysis_ZSIFFL_mtet_phase2
close all
clear all
analysis_ZSIFFL_mtet_phase1_b
analysis_ZSIFFL_mtet_phase2
close all
clear all
clc
analysis_ZSIFFL_mtet_phase2
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-5)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
% Thus, the 10 estimated parameters are:
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
estParamsIX = [1 2 3 7 11 16 21 31 32 33]';
estParams = activeNames(estParamsIX,1);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:size(activeNames, 1))', estParamsIX);
% for troubleshooting / visualizing the fixed params:
%     log(cell2mat(activeNames2(fixedParamsIX,[2])))
%     activeNames2(fixedParamsIX,[1:2])
% since activeNames2 is a superset of activeNames1, we can just use
% activeNames2 as the master vector.
masterVector = log(cell2mat(activeNames(:,2))); % log transformed.
% paramMap is a matrix mapping the parameters in the master vector to the
% (unordered) list of parameters in the model. (obvioulsy within the code
% these parameters get ordered before they are used in the exported model)
% More precisely, Let pp = paramMap(:, 1); then masterVector(pp) is the list
% of parameters for the first geometry within that topology, as specified by
% namesUnord. Note that namesUnord is just all the active parameters in
% the model, not just the estimated ones.
% One such matrix exists for each topology. It has dimnesions
% length(model_info(i).namesUnord) x number of geometries associated with that topo.
paramMap_ptet = [1:10 13:15 20 23:34]';
paramMap_tetR = [1:15 18:34]';
paramMap_aTc = (1:34)';
paramMap_plac = [1:6 9 10 13:15 20:34]';
activeNames
edit mcmc_info_ZSIFFL_mtet_phase2.m
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-5)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames
activeNames(:,3)
cell2mat(activeNames(:,3))
activeNames(cell2mat(mtet_phase1_params(:,1)),3)
mtet_phase1_params(:,4)
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4)
cell2mat(activeNames(:,3))
edit proj_ZSIFFL_mtet_phase2.m
%-- 4/29/19, 7:16 AM --%
analysis_ZSIFFL_mtet_phase2
6exit
close all
%-- 4/29/19, 12:43 PM --%
txtl_init
mcmc_init
close all
analysis_ZSIFFL_mtet_phase2
addpath(genpath(pwd))
close all
analysis_ZSIFFL_mtet_phase2
clc
close all
%-- 4/29/19, 5:44 PM --%
analysis_ZSIFFL_mtet_phase2
mcmc_plot(marray(:, 1:10:end,1:3:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'Burned_in');
analysis_ZSIFFL_mtet_phase2
mcmc_plot(mvarray(:, 1:10:end,1:3:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', '
close all
clc
mcmc_plot(marray(:, 1:end,1:5:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllWalkers');
% clear all
% Set working directory to the txtlsim toolbox directory.
projdir = [pwd '/mcmc_simbio/projects/proj_ZSIFFL_mtet_phase2'];
addpath(projdir)
sls = regexp(projdir, '/', 'split');
extrastring = sls{end};
jpgsave = true;
figsave = false;
% Load model, mcmc_info, and data_info.
% construct simbiology model object(s)
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mlac = model_txtl_pLacdeGFP;
% setup the mcmc_info struct
mcmc_info = mcmc_info_ZSIFFL_mtet_phase2(mtet, mlac);
di = data_ZSIFFL;
mi = mcmc_info.model_info;
ri = mcmc_info.runsim_info;
mai = mcmc_info.master_info;
% plot data from existing simulations.
tsIDtouse = 2;
plotflag = true;
switch tsIDtouse
case 1
ts1 = '20190427_170334_1_2058';
ts2 = '20190427_170334_2_1029';
tstamp = {ts1 ts2};
nIterID = {1:10 1:3};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
case 2
ts1 = '20190428_142033_1_2058';
ts2 = '20190428_142033_2_1029';
ts3 = '20190429_083138_1_1029';
tstamp = {ts1 ts2 ts3};
nIterID = {1:10 1:2 1:3};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
end
tsToSave = ts3;
mai.masterVector
marray_full = mcmc_get_walkers(tstamp,nIterID, projdir);
marray = marray_full(:,:,1:end);
clear marray_full
parnames = ...
[...
{'tx_{cat}'}
{'tl_cat'}
{'tau'}
{'pol_{Kd,tet}'}
{'rep_{Kd}'}
{'ATC_{Kd}'  }
{'pol_{Kd,lac}'        }
{'pol'}
{'RNase'}
{'Ribo'}];
%
%     {'TX_elong_glob'             }
%     {'TL_elong_glob'             }
%     {'AGTPdeg_time'              }
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_PLAC_RNAPbound_Kd'    }
%     {'RNAP'                      }
%     {'RNase'                     }
%     {'Ribo'                      }
%
%
% if plotflag
%    close all
% Plot trace and corner (posterior distribution) plots
mcmc_plot(marray(:, 1:end,1:5:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllWalkers');
mm = model_txtl_pLacLasR_pLasdeGFP
mm.para
mm.react
mm.rul
edit proj_ZSIFFL_mtet_phase2.m
edit proj_ZSIFFL_training.m
% clear all
% Set working directory to the txtlsim toolbox directory.
projdir = [pwd '/mcmc_simbio/projects/proj_ZSIFFL_mtet_phase2'];
addpath(projdir)
sls = regexp(projdir, '/', 'split');
extrastring = sls{end};
jpgsave = true;
figsave = false;
% Load model, mcmc_info, and data_info.
% construct simbiology model object(s)
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mlac = model_txtl_pLacdeGFP;
% setup the mcmc_info struct
mcmc_info = mcmc_info_ZSIFFL_mtet_phase2(mtet, mlac);
di = data_ZSIFFL;
mi = mcmc_info.model_info;
ri = mcmc_info.runsim_info;
mai = mcmc_info.master_info;
% plot data from existing simulations.
tsIDtouse = 2;
plotflag = true;
switch tsIDtouse
case 1
ts1 = '20190427_170334_1_2058';
ts2 = '20190427_170334_2_1029';
tstamp = {ts1 ts2};
nIterID = {1:10 1:3};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
case 2
ts1 = '20190428_142033_1_2058';
ts2 = '20190428_142033_2_1029';
ts3 = '20190429_083138_1_1029';
ts4 = '20190429_200219_1_1029'
tstamp = {ts1 ts2 ts3};
nIterID = {1:10 1:2 1:4 1:2};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
end
tsToSave = ts4;
mai.masterVector
marray_full = mcmc_get_walkers(tstamp,nIterID, projdir);
marray = marray_full(:,:,1:end);
clear marray_full
parnames = ...
[...
{'tx_{cat}'}
{'tl_cat'}
{'tau'}
{'pol_{Kd,tet}'}
{'rep_{Kd}'}
{'ATC_{Kd}'  }
{'pol_{Kd,lac}'        }
{'pol'}
{'RNase'}
{'Ribo'}];
%
%     {'TX_elong_glob'             }
%     {'TL_elong_glob'             }
%     {'AGTPdeg_time'              }
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_PLAC_RNAPbound_Kd'    }
%     {'RNAP'                      }
%     {'RNase'                     }
%     {'Ribo'                      }
%
%
% if plotflag
%    close all
% Plot trace and corner (posterior distribution) plots
mcmc_plot(marray(:, 1:end,(end-6):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllWalkers');
% clear all
% Set working directory to the txtlsim toolbox directory.
projdir = [pwd '/mcmc_simbio/projects/proj_ZSIFFL_mtet_phase2'];
addpath(projdir)
sls = regexp(projdir, '/', 'split');
extrastring = sls{end};
jpgsave = true;
figsave = false;
% Load model, mcmc_info, and data_info.
% construct simbiology model object(s)
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mlac = model_txtl_pLacdeGFP;
% setup the mcmc_info struct
mcmc_info = mcmc_info_ZSIFFL_mtet_phase2(mtet, mlac);
di = data_ZSIFFL;
mi = mcmc_info.model_info;
ri = mcmc_info.runsim_info;
mai = mcmc_info.master_info;
% plot data from existing simulations.
tsIDtouse = 2;
plotflag = true;
switch tsIDtouse
case 1
ts1 = '20190427_170334_1_2058';
ts2 = '20190427_170334_2_1029';
tstamp = {ts1 ts2};
nIterID = {1:10 1:3};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
case 2
ts1 = '20190428_142033_1_2058';
ts2 = '20190428_142033_2_1029';
ts3 = '20190429_083138_1_1029';
ts4 = '20190429_200219_1_1029'
tstamp = {ts1 ts2 ts3};
nIterID = {1:10 1:2 1:4 1:2};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
end
tsToSave = ts4;
mai.masterVector
marray_full = mcmc_get_walkers(tstamp,nIterID, projdir);
marray = marray_full(:,:,1:end);
clear marray_full
parnames = ...
[...
{'tx_{cat}'}
{'tl_cat'}
{'tau'}
{'pol_{Kd,tet}'}
{'rep_{Kd}'}
{'ATC_{Kd}'  }
{'pol_{Kd,lac}'        }
{'pol'}
{'RNase'}
{'Ribo'}];
%
%     {'TX_elong_glob'             }
%     {'TL_elong_glob'             }
%     {'AGTPdeg_time'              }
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_PLAC_RNAPbound_Kd'    }
%     {'RNAP'                      }
%     {'RNase'                     }
%     {'Ribo'                      }
%
%
% if plotflag
%    close all
% Plot trace and corner (posterior distribution) plots
mcmc_plot(marray(:, 1:end,(end-6):5:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllWalkers');
edit analysis_ZSIFFL_mtet_phase2.m
close all
edit mcmc_info_ZSIFFL_mtet_phase2.m
%-- 4/30/19, 10:14 PM --%
edit mcmc_info_ZSIFFL_training_full.m
edit analysis_ZSIFFL_mtet_phase2.m
% clear all
% Set working directory to the txtlsim toolbox directory.
projdir = [pwd '/mcmc_simbio/projects/proj_ZSIFFL_mtet_phase2'];
addpath(projdir)
sls = regexp(projdir, '/', 'split');
extrastring = sls{end};
jpgsave = true;
figsave = false;
% Load model, mcmc_info, and data_info.
% construct simbiology model object(s)
mtet = model_txtl_ptetdeGFP_pLactetR_aTc;
mlac = model_txtl_pLacdeGFP;
% setup the mcmc_info struct
mcmc_info = mcmc_info_ZSIFFL_mtet_phase2(mtet, mlac);
di = data_ZSIFFL;
mi = mcmc_info.model_info;
ri = mcmc_info.runsim_info;
mai = mcmc_info.master_info;
% plot data from existing simulations.
tsIDtouse = 2;
plotflag = true;
switch tsIDtouse
case 1
ts1 = '20190427_170334_1_2058';
ts2 = '20190427_170334_2_1029';
tstamp = {ts1 ts2};
nIterID = {1:10 1:3};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
case 2
ts1 = '20190428_142033_1_2058';
ts2 = '20190428_142033_2_1029';
ts3 = '20190429_083138_1_1029';
ts4 = '20190429_200219_1_1029';
ts5='20190429_200219_2_412';
ts6='20190430_141254_1_412';
ts7='20190430_141254_2_206';
tstamp = {ts1 ts2 ts3 ts4 ts5 ts6 ts7};
nIterID = {1:10 1:2 1:4 1:5 1:3 1:5 1:4};
load([projdir '/simdata_' ts1 '/full_variable_set_' ts1 '.mat'], ...
'mi',...
'mcmc_info', 'data_info', 'mai', 'ri');
end
tsToSave = ts7;
mai.masterVector
marray_full = mcmc_get_walkers(tstamp,nIterID, projdir);
marray = marray_full(:,:,1:end);
clear marray_full
parnames = ...
[...
{'tx_{cat}'}
{'tl_cat'}
{'tau'}
{'pol_{Kd,tet}'}
{'rep_{Kd}'}
{'ATC_{Kd}'  }
{'pol_{Kd,lac}'        }
{'pol'}
{'RNase'}
{'Ribo'}];
%
%     {'TX_elong_glob'             }
%     {'TL_elong_glob'             }
%     {'AGTPdeg_time'              }
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_PLAC_RNAPbound_Kd'    }
%     {'RNAP'                      }
%     {'RNase'                     }
%     {'Ribo'                      }
%
%
% if plotflag
%    close all
% Plot trace and corner (posterior distribution) plots
mcmc_plot(marray(:, 1:5:end,(end-40):end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllWalkers');
close all
analysis_ZSIFFL_mtet_phase2
edit mcmc_info_ZSIFFL_mtet_phase2.m
exp([8 11])/3600
exp([9 11])/3600
exp([9 10.05 11])/3600
exp(3.7)
exp(5.9)
% !! todo -- set the parameters estimated from phase 1. then this will be
% ready to run.
% Phase 2 of the estimation procedure of the tetR system parameters from
% Zach's tetR data.
%
% The topologies involved in this estimataion probem are:
% plac - UTR1 - tetR, ptet - UTR1 - deGFP, aTc; This has three
% topologies, the constitutive expression geometry, the repression
% geometry, and the aTc induction geometry.
%
% A lot of the core parameters are set from those estimated from the
% constitutive expression fits to the data in the VNPRL2011 and ACS 2014 papers.
%
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-6.07), [exp(-20) exp(10)] %36
'TXTL_INDUCER_LASR_AHL_F'            , exp(-6.07), [exp(-6) exp(6)] %37
'TXTL_PLAS_RNAPbound_Kd'             , exp(-6.07), [exp(-20) exp(10)]%38
'TXTL_PLAS_RNAPbound_F'              , exp(-6.07), [exp(-6) exp(-6)]%39
'TXTL_PLAS_TFBIND_Kd'                , exp(-6.07), [exp(-20) exp(10)]%40
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(-6.07), [exp(-20) exp(10)]%41
'TXTL_PLAS_TFRNAPbound_F'            , exp(-6.07), [exp(-6) exp(-6)]%42
'TXTL_PLAS_TFBIND_F'                 , exp(-6.07), [exp(-6) exp(-6)]}%43
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(-1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(12)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(16.57)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [7 21 31 33 36:43]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:)
% The topologies involved in this estimataion probem are:
% plac - UTR1 - tetR, ptet - UTR1 - deGFP, aTc; This has three
% topologies, the constitutive expression geometry, the repression
% geometry, and the aTc induction geometry.
%
% A lot of the core parameters are set from those estimated from the
% constitutive expression fits to the data in the VNPRL2011 and ACS 2014 papers.
%
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-6.07), [exp(-20) exp(10)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(-6.07), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(-6.07), [exp(-20) exp(10)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(-6.07), [exp(-6) exp(-6)]%39-1
'TXTL_PLAS_TFBIND_Kd'                , exp(-6.07), [exp(-20) exp(10)]%40-1
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(-6.07), [exp(-20) exp(10)]%41-1
'TXTL_PLAS_TFRNAPbound_F'            , exp(-6.07), [exp(-6) exp(-6)]%42-1
'TXTL_PLAS_TFBIND_F'                 , exp(-6.07), [exp(-6) exp(-6)]}%43-1
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(-1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(12)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(16.57)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [7 21 31 33 35:42]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:)
mm
model_txtl_pLacLasR_pLasdeGFP
mm = model_txtl_pLacLasR_pLasdeGFP
mm.parame
dii = data_ZSIFFL
dii(5)
dii(5).dosedNames
dii(5).dosedVals
mm.spe
edit proj_ZSIFFL_training.m
proj_ZSIFFL_mtet_phase2
edit proj_ZSIFFL_mtet_phase2
proj_ZSIFFL_training
logP(:,:,1
logP(:,:,1)
minit(:,wix)
logPfuns{1}
logPfuns
logPfuns{2}
dbstack
mai
mi
% !! todo -- set the parameters estimated from phase 1. then this will be
% ready to run.
% Phase 2 of the estimation procedure of the tetR system parameters from
% Zach's tetR data.
%
% The topologies involved in this estimataion probem are:
% plac - UTR1 - tetR, ptet - UTR1 - deGFP, aTc; This has three
% topologies, the constitutive expression geometry, the repression
% geometry, and the aTc induction geometry.
%
% A lot of the core parameters are set from those estimated from the
% constitutive expression fits to the data in the VNPRL2011 and ACS 2014 papers.
%
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(-20) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(1.3), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(-2), [exp(-20) exp(20)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(1.3), [exp(-6) exp(-6)]%39-1
'TXTL_PLAS_TFBIND_Kd'                , exp(-2), [exp(-20) exp(20)]%40-1
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(2), [exp(-20) exp(20)]%41-1
'TXTL_PLAS_TFRNAPbound_F'            , exp(1.3), [exp(-6) exp(-6)]%42-1
'TXTL_PLAS_TFBIND_F'                 , exp(1.3), [exp(-6) exp(-6)]}%43-1
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(-1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(12)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(16.57)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [7 21 31 33 35:42]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:size(activeNames, 1))', estParamsIX);
% for troubleshooting / visualizing the fixed params:
%     log(cell2mat(activeNames2(fixedParamsIX,[2])))
%     activeNames2(fixedParamsIX,[1:2])
% since activeNames2 is a superset of activeNames1, we can just use
% activeNames2 as the master vector.
masterVector = log(cell2mat(activeNames(:,2))); % log transformed.
% paramMap is a matrix mapping the parameters in the master vector to the
% (unordered) list of parameters in the model. (obvioulsy within the code
% these parameters get ordered before they are used in the exported model)
% More precisely, Let pp = paramMap(:, 1); then masterVector(pp) is the list
% of parameters for the first geometry within that topology, as specified by
% namesUnord. Note that namesUnord is just all the active parameters in
% the model, not just the estimated ones.
% One such matrix exists for each topology. It has dimnesions
% length(model_info(i).namesUnord) x number of geometries associated with that topo.
paramMap_ptet = [1:10 13:15 20 23:34]';
paramMap_tetR = [1:15 18:34]';
paramMap_aTc = (1:34)';
paramMap_plac = [1:6 9 10 13:15 20:34]';
paramMap_plas = [1:6 9 10 13:15 20:42]';
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
%     'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
%     'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
%     'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
%     'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
%     'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
%     'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
%     'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
%     'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
%     'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
%     'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
%     'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
%     'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
%     'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
%     'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
%     'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
%     'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
%     'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
%     'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% parameter ranges (for the to-be-estimated parameters in the master
% vector)
paramRanges = log(cell2mat(activeNames(estParamsIX,3)))
minit(:,wix)
proj_ZSIFFL_training
%-- 5/1/19, 7:06 PM --%
analysis_ZSIFFL_mtet_phase2
mcmc_plot(marray(:, 1:end,(end-120):5:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllWalkers');
%
%-- 5/2/19, 8:14 PM --%
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(-20) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(1.3), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(-2), [exp(-20) exp(20)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(1.3), [exp(-6) exp(6)]%39-1
'TXTL_PLAS_TFBIND_Kd'                , exp(-2), [exp(-20) exp(20)]%40-1
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(2), [exp(-20) exp(20)]%41-1
'TXTL_PLAS_TFRNAPbound_F'            , exp(1.3), [exp(-6) exp(6)]%42-1
'TXTL_PLAS_TFBIND_F'                 , exp(1.3), [exp(-6) exp(6)]}%43-1
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(-1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(12)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(16.57)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [7 21 31 33 35:42]';
estParams = activeNames(estParamsIX,1)
activeNames(estParamsIX,:)
mlas
mlas.spe
close all
proj_ZSIFFL_training
proj_ZSIFFL_training('parallel', true, 'stepLadder', [1])
mmm = model_txtl_pLacLasR_pLasdeGFP
mmm
sd = txtl_runsim(mmm)
help txtl_runsim
edit txtl_runsim
help txtl_runsim
mmm.getconfigset
edit mcmc_info_ZSIFFL_mtet_phase2.m
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(18)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(15)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(12)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(12)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(25)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
% Thus, the 10 estimated parameters are:
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
estParamsIX = [1 2 3 7 11 16 21 31 32 33]';
estParams = activeNames(estParamsIX,1);
activeNames
edit mcmc_info_ZSIFFL_training_full.m
clc
size(marray)
marray(:,1:2,end)
size(marray_cut)
mai
help arrayfun
help randn
cell2mat(marray_gauss)
mmm
mmm.rea
mmm.Reactions(28)
get(mmm.Reactions(28).KineticLaw)
close all
mvarray(:,1:5,samplePoints)
mvarray(:,1:5,end)
[(1:42)' mvarray(:,1:5,end)]
%-- 5/6/19, 5:31 PM --%
mai
mai.masterVector
% !! todo -- set the parameters estimated from phase 1. then this will be
% ready to run.
% Phase 2 of the estimation procedure of the tetR system parameters from
% Zach's tetR data.
%
% The topologies involved in this estimataion probem are:
% plac - UTR1 - tetR, ptet - UTR1 - deGFP, aTc; This has three
% topologies, the constitutive expression geometry, the repression
% geometry, and the aTc induction geometry.
%
% A lot of the core parameters are set from those estimated from the
% constitutive expression fits to the data in the VNPRL2011 and ACS 2014 papers.
%
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
forwardoffset = 4
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(-20) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(1.3), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(-2), [exp(-20) exp(20)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(1.3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(-2), [exp(-20) exp(20)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(2), [exp(-20) exp(20)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(1.3), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(1.3), [exp(-6) exp(6)]}%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(-1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(12)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(16.57)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% finally, we set some parameters to try to raise the ceiling of the gene expression.
% this is to make the values match for the 3OC12HSL training data.
explore_params = ...
{...
23       ,       'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8+forwardoffset),   [exp(-3) exp(10)]
28      ,          'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3 +forwardoffset),   [exp(0) exp(10)]
1       ,        'TX_elong_glob'                      , exp(2.6 +forwardoffset),   [exp(0) exp(5 +forwardoffset)]
2       ,           'TL_elong_glob'                      , exp(3.5 +forwardoffset),   [exp(0) exp(6 +forwardoffset)]};
activeNames(cell2mat(explore_params(:,1)),3) = explore_params(:,4);
%%
estParamsIX = [7 21 31 33 35:42]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:size(activeNames, 1))', estParamsIX);
% for troubleshooting / visualizing the fixed params:
%     log(cell2mat(activeNames2(fixedParamsIX,[2])))
%     activeNames2(fixedParamsIX,[1:2])
% since activeNames2 is a superset of activeNames1, we can just use
% activeNames2 as the master vector.
masterVector = log(cell2mat(activeNames(:,2)))
clear all
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(-20) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(1.3), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(-2), [exp(-20) exp(20)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(1.3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(-2), [exp(-20) exp(20)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(2), [exp(-20) exp(20)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(1.3), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(1.3), [exp(-6) exp(6)]}%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(-1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(12)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(16.57)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(-20) exp(20)] %36-1
, exp(1.3), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(-2), [exp(-20) exp(20)]%38-1
, exp(1.3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(-2), [exp(-20) exp(20)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(2), [exp(-20) exp(20)]%41-1 plas-pol_{tf, Kd} <
, exp(1.3), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
, exp(1.3), [exp(-6) exp(6)]
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [7 21 23 28 31 33 35 37 39 40]';
estParams = activeNames(estParamsIX,1)
%-- 5/7/19, 2:22 PM --%
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(-3) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(-20) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(1.3), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(-2), [exp(-20) exp(20)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(1.3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(-2), [exp(-20) exp(20)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(2), [exp(-20) exp(20)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(1.3), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(1.3), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(-1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(12)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(16.57)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [7 21 23 28 31 33 35 37 39 40]';
estParams = activeNames(estParamsIX,1)
activeNames(estParamsIX,:)
activeNames(estParamsIX,3)
cell2mat(activeNames(estParamsIX,3))
log(cell2mat(activeNames(estParamsIX,3)))
cell2mat(activeNames(estParamsIX,2))
log(cell2mat(activeNames(estParamsIX,2)))
[log(cell2mat(activeNames(estParamsIX,2))) log(cell2mat(activeNames(estParamsIX,3)))]
exp(10)/3600
edit manual_txtlsim_parameters.m
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     50       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.57)   [1800 42000] % set to exp(9.57)
'AGTPdeg_rate'                      0.0002      [1e-5 1e-2] % set from before
'AGTPreg_ON'                        0.02        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             600         [0.1 1e6]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   0.15        [1e-4 100]         % 7
'TXTL_NTP_RNAP_1_Kd'                100000      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                1e6         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11 % set to 1
'TXTL_RNAdeg_Kd'                    2000        [100 1e5]
'TXTL_RNAdeg_F'                     1        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-5.4)   [1e-4 1]  %set to exp(-5.4)
'RNAP'                              100         [5 5000] % 15
'RNase'                             100         [1 10000]
'TL_elong_glob'                     20          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        0.0023      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  20          [0.05 1e5]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          10      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        10      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   40          [0.1 20000]
'Ribo'                              30          [10 10000]};
log(cell2mat(activeNames2(:,2))
log(cell2mat(activeNames2(:,2)))
edit analysis_ZSIFFL_mtet_phase2.m
edit proj_ZSIFFL_training.m
%-- 5/8/19, 6:06 PM --%
10*60+23
(10*60+23)/48*100
((10*60+23)/48*100)/60
((((10*60+23)/48*100)/60)*20*3)/60
%-- 5/9/19, 3:55 PM --%
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [23 28 31 33 35 37 39 40]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:)
estParams
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [23 28 31 33 35 37 39 40]';
estParams = activeNames(estParamsIX,1)
activeNames(estParamsIX,:)
log(cell2mat(activeNames(estParamsIX,2)))
exp(5.9)
exp(4.4)
close all
% plac - UTR1 - tetR, ptet - UTR1 - deGFP, aTc; This has three
% topologies, the constitutive expression geometry, the repression
% geometry, and the aTc induction geometry.
%
% A lot of the core parameters are set from those estimated from the
% constitutive expression fits to the data in the VNPRL2011 and ACS 2014 papers.
%
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [1 2 3 7 21 23 28 31 33 35 37 39 40]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:)
activeNames(estParamsIX,1)
% A lot of the core parameters are set from those estimated from the
% constitutive expression fits to the data in the VNPRL2011 and ACS 2014 papers.
%
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [1 2 7 11 16 21 23 28 31 33 35 37 39 40]';
estParams = activeNames(estParamsIX,1)
edit proj_ZSIFFL_trainingB.m
log(cell2mat(activeNames(estParamsIX,3)))
mat2cell(log(cell2mat(activeNames(estParamsIX,3))), ones(14, 2))
mat2cell(log(cell2mat(activeNames(estParamsIX,3))), ones(14,1), ones(1, 2))
[cell2mat(activeNames(estParamsIX,1))) mat2cell(log(cell2mat(activeNames(estParamsIX,3))), ones(14,1), ones(1, 2))]
[(activeNames(estParamsIX,1))) mat2cell(log(cell2mat(activeNames(estParamsIX,3))), ones(14,1), ones(1, 2))]
[activeNames(estParamsIX,1) mat2cell(log(cell2mat(activeNames(estParamsIX,3))), ones(14,1), ones(1, 2))]
%-- 5/10/19, 10:43 AM --%
edit analysis_vnprl_F2.m
%-- 5/10/19, 6:00 PM --%
close all
clear all
close all
%-- 5/11/19, 12:36 PM --%
edit analysis_ZSIFFL_training_fullC.m
parIDs = [4 5 11];
parRanges(parIDs, :) = [-1 0 ;
-4 0;
11 15]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 40):end), parIDs, flipud((parRanges(parIDs, :))'));
mcmc_plot(marray_cut, parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut(parIDs, 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames(parIDs), '3 params')
marray_cut = mcmc_cut(marray(:, 1:end,(end - 40):end), parIDs, flipud((parRanges(parIDs, :))'));
mcut0 = marray_cut(parIDs, :,:);
mcmc_3D(mcut0(:,:)', parnames(parIDs), '3 params');
[activeNames(estParamsIX,1) mat2cell(log(cell2mat(activeNames(estParamsIX,3))), ones(14,1), ones(1, 2))]
size(marray_cut)
parRanges(parIDs, :) = [-1 0 ;
-2.5 -1.5;
11.5 14.5]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 40):end), parIDs, flipud((parRanges(parIDs, :))'));
size(marray_cut)
parRanges(parIDs, :) = [-1 0 ;
-3 -1;
11.5 14.5]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 40):end), parIDs, flipud((parRanges(parIDs, :))'));
size(marray_cut)
%-- 5/11/19, 1:56 PM --%
edit proj_ZSIFFL_trainingC.m
parIDs = [4 5 11];
%     parRanges(parIDs, :) = [-1 0 ;
%         -4 0;
%         11 15]
parRanges(parIDs, :) = [-1 0 ;
-3 -1;
11.5 14.5]
marray_cut = mcmc_cut(marray(:, 1:end,(end - 40):end), parIDs, flipud((parRanges(parIDs, :))'));
mcut0 = marray_cut(parIDs, :,:);
mcmc_3D(mcut0(:,:)', parnames(parIDs), '3 params');
mcmc_plot(marray_cut, parnames(:),...
'savematlabfig', figsave, 'savejpeg', false,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'BurnedIn');
mcut = marray_cut(parIDs, 1:end,ceil(end/4):end);
mcmc_3D(mcut(:,:)', parnames(parIDs), '3 params')
CLOSE ALL
close all
edit model_txtl_ptetdeGFP_pLactetR_aTc.m
edit analysis_ZSIFFL_training_fullE.m
mcmc_plot(marray(:, 1:end,1:4:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave,...
'extrafignamestring', 'Without_transient');
% % % % %%
%
mcmc_plot(marray(:, 1:end,(end - 20):4:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'Burned_in');
% % % % %
%-- 5/19/19, 3:57 PM --%
mm = model_dsg2014_regen
mm.rea
mm.param
edit mcmc_info_vnprl_F2.m
activeNames2 = {... % changes made to ranges on feb 8, 2019. setting parameters based on
...% posterior plots.
'TX_elong_glob'                     exp(4.9354)       [0.5 300]        % 1
'AGTPdeg_time'                      exp(9.17)   [1800 42000] % DO NOT FIX THIS.
'AGTPdeg_rate'                      exp(-9.5172)      [1e-7 1e-2] % set from before
'AGTPreg_ON'                        exp(-3.912)        [0.005 0.2]        %4 % set from before
'TXTL_P70_RNAPbound_Kd'             exp(9.514)         [0.01 1e7]  %
'TXTL_P70_RNAPbound_F'              exp(1.5)    [1e-5 300] % set to exp(1.5)
'TXTL_RNAPBOUND_TERMINATION_RATE'   exp(3.3005)        [0.1 1000]         % 7
'TXTL_NTP_RNAP_1_Kd'                exp(2.9459)      [1 1e6]
'TXTL_NTP_RNAP_1_F'                 exp(0)      [1e-5 100] % set to 1
'TXTL_NTP_RNAP_2_Kd'                exp(13.997)         [0.1 1e7]
'TXTL_NTP_RNAP_2_F'                 exp(0)      [1e-6 1000]        %11 % set to 1
'TXTL_RNAdeg_Kd'                    exp(9.237)        [100 1e7]
'TXTL_RNAdeg_F'                     exp(0)        [0.01 10000] % set to 1 (1 is right in the middle of the broad posterior density, and so not entirely arbitrary. )
'TXTL_RNAdeg_kc'                    exp(-4.4)   [1e-5 10]  %set to exp(-5.4)
'RNAP'                              exp(1.4419)         [0.1 5000] % 15
'RNase'                             exp(6.4899)         [1 100000]
'TL_elong_glob'                     exp(0.5219)          [0.1 500]
'TXTL_PROT_deGFP_MATURATION'        exp(-6.0748)      [0.0002 0.02] %18 % set from before
'TXTL_UTR_UTR1_Kd'                  exp(11.189)          [0.005 1e7]
'TXTL_UTR_UTR1_F'                   exp(-0.2)   [1e-5 100] % set to exp(-0.2)
'TL_AA_Kd'                          exp(6.5566)      [.1 1e6] % 21
'TL_AA_F'                           exp(-0.3)   [1e-5 20]   % set to exp(-0.3)
'TL_AGTP_Kd'                        exp(14.509)      [.1 1e7] % 23
'TL_AGTP_F'                         exp(-1.2)   [1e-5 100]  %set to exp(-1.2)
'TXTL_RIBOBOUND_TERMINATION_RATE'   exp(5.398)          [0.1 1000]
'Ribo'                              exp(7.3081)          [1 10000]}; %26
activeNames2(:,2)
cell2num(activeNames2(:,2))
cell2mat(activeNames2(:,2))
log(cell2mat(activeNames2(:,2)))
num2cell(log(cell2mat(activeNames2(:,2))))
[activeNames2(:,1) num2cell(log(cell2mat(activeNames2(:,2)))) num2cell(log(cell2mat(activeNames2(:,3))))
]
lasmodel = model_txtl_pLacLasR_pLasdeGFP
lasmodel.reactio
lacmodel = model_txtl_pLacdeGFP
lacmodel.reac
tetmodel = model_txtl_ptetdeGFP_pLactetR_aTc
tetmodel.reac
lasmodel = model_txtl_pLacLasR_pLasdeGFP
lasmodel.Reactions
lasmodel.param
lasmodel.Parameters(35)
get(lasmodel.Parameters(35))
lasmodel.Reactions
lasmodel.Reactions(1)
get(lasmodel.Reactions(1))
get(lasmodel.Reactions(28))
get(lasmodel.Reactions(29))
get(lasmodel.Reactions(30))
get(lasmodel.Reactions(31))
edit mcmc_info_ZSIFFL_mtet_phase1.m
edit mcmc_info_ZSIFFL_mtet_phase1_b.m
edit mcmc_info_ZSIFFL_mtet_phase2.m
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
% !! NEED TO CHECK IF AT THE PICKED POINT THE TRAJECTORIES LOOK OK.
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 % fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 % fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 % fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19% TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22% fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25% fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 % from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%%
% Names of parameters and species to actually estimate.
% As mentioned above, I have planned this out in the file
% ZachIFFL_estimation_strategy.txt
% 'TX_elong_glob'                      ,     'fix'
% 'TL_elong_glob'                      ,     'fix'
% 'AGTPdeg_time'                       ,     'fix'
% 'AGTPreg_ON'                         ,     'fix'
% 'AGTPdeg_rate'                       ,     'fix'
% 'TXTL_PROT_deGFP_MATURATION'         ,     'fix'
% 'TXTL_UTR_UTR1_Kd'                   ,     'fix'
% 'TXTL_PTET_RNAPbound_Kd'             ,     'est'
% 'TXTL_PTET_RNAPbound_F'              ,     'fix'
% 'TXTL_NTP_RNAP_1_Kd'                 ,     'fix'
% 'TXTL_NTP_RNAP_2_Kd'                 ,     'fix'
% 'TXTL_PTET_sequestration_Kd'         ,     'est'
% 'TXTL_PTET_sequestration_F'          ,     'est'
% 'TL_AA_Kd'                           ,     'fix'
% 'TL_AGTP_Kd'                         ,     'fix'
% 'TXTL_RNAdeg_Kd'                     ,     'fix'
% 'TXTL_INDUCER_TETR_ATC_Kd'           ,     'est'
% 'TXTL_INDUCER_TETR_ATC_F'            ,     'est'
% 'TXTL_DIMER_tetR_Kd'                 ,     'est'
% 'TXTL_DIMER_tetR_F'                  ,     'est'
% 'TXTL_UTR_UTR1_F'                    ,     'fix'
% 'TXTL_PLAC_RNAPbound_Kd'             ,     'fix'
% 'TXTL_PLAC_RNAPbound_F'              ,     'fix'
% 'TXTL_RNAPBOUND_TERMINATION_RATE'    ,     'fix'
% 'TXTL_NTP_RNAP_1_F'                  ,     'fix'
% 'TXTL_NTP_RNAP_2_F'                  ,     'fix'
% 'TL_AA_F'                            ,     'fix'
% 'TL_AGTP_F'                          ,     'fix'
% 'TXTL_RIBOBOUND_TERMINATION_RATE'    ,     'fix'
% 'TXTL_RNAdeg_F'                      ,     'fix'
% 'TXTL_RNAdeg_kc'                     ,     'fix'
% Thus, the 7 estimated parameters are:
% 'TXTL_PTET_RNAPbound_Kd'             ,     'est'
% 'TXTL_PTET_sequestration_Kd'         ,     'est'
% 'TXTL_PTET_sequestration_F'          ,     'est'
% 'TXTL_INDUCER_TETR_ATC_Kd'           ,     'est'
% 'TXTL_INDUCER_TETR_ATC_F'            ,     'est'
% 'TXTL_DIMER_tetR_Kd'                 ,     'est'
% 'TXTL_DIMER_tetR_F'                  ,     'est'
estParamsIX = [7, 11, 12, 16:19]';
estParams = activeNames(estParamsIX,1)
cell2mat(activeNames(estParamsIX,3))
log(cell2mat(activeNames(estParamsIX,3)))
num2cell(log(cell2mat(activeNames(estParamsIX,3))))
[estParams num2cell(log(cell2mat(activeNames(estParamsIX,3))))]
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(18)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(15)]      %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(12)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(12)]         %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]  };    %34 fixed in mcmc_info_vnprl_F2
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
format short g;
aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(25)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
% Thus, the 10 estimated parameters are:
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
estParamsIX = [1 2 3 7 11 16 21 31 32 33]';
estParams = activeNames(estParamsIX,1);
[estParams num2cell(log(cell2mat(activeNames(estParamsIX,3))))]
analysis_ZSIFFL_mtet_phase2
edit analysis_ZSIFFL_mtet_phase2
clear all
close all
mcmc_plot(marray(:, 1:end,(end-(100)):10:end), parnames(:),...
'savematlabfig', figsave, 'savejpeg', jpgsave,...
'projdir', projdir, 'tstamp', tsToSave, 'extrafignamestring', 'AllW_last150_thin10');
edit analysis_ZSIFFL_mtet_phase2.m
edit mcmc_info_ZSIFFL_training_full.m
edit analysis_ZSIFFL_training_full
edit analysis_ZSIFFL_training_fullB.m
edit analysis_ZSIFFL_training_fullC.m
edit analysis_ZSIFFL_training_fullD.m
edit analysis_ZSIFFL_training_fullE.m
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(-3) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(-20) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(1.3), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(-5) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(1.3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(-2), [exp(-20) exp(20)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(2), [exp(-20) exp(20)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(1.3), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(1.3), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(-1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(12)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(16.57)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [7 21 23 28 31 33 35 37 39 40]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:)
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [23 28 31 33 35 37 39 40]';
estParams = activeNames(estParamsIX,1)
% topologies, the constitutive expression geometry, the repression
% geometry, and the aTc induction geometry.
%
% A lot of the core parameters are set from those estimated from the
% constitutive expression fits to the data in the VNPRL2011 and ACS 2014 papers.
%
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(7)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(7)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(25)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(5)    exp(25)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(10)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(15)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [1 2 7 11 16 21 23 28 31 33 35 37 39 40]';
estParams = activeNames(estParamsIX,1)
% In phase 1, we estimated 7 parameters:
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(1)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(25)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(15)    exp(25)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(10)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(15)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%%
training_fullC_params = ...
{...
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-0.5)     ,[exp(-2)	exp(1)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-2)       ,[exp(-10)	exp(5)]
35      ,       'TXTL_INDUCER_LASR_AHL_Kd'           , exp(13), [exp(5) exp(15)] ...
};
activeNames(cell2mat(training_fullC_params(:,1)),2) = training_fullC_params(:,3);
activeNames(cell2mat(training_fullC_params(:,1)),3) = training_fullC_params(:,4);
estParamsIX = [1 2 7 21 23 28 31 33 37 39 40]';
estParams = activeNames(estParamsIX,1)
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(1)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(25)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(15)    exp(25)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(10)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(15)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%%
training_fullC_params = ...
{...
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-0.5)     ,[exp(-2)	exp(1)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-2)       ,[exp(-10)	exp(5)]
35      ,       'TXTL_INDUCER_LASR_AHL_Kd'           , exp(13), [exp(5) exp(15)] ...
};
activeNames(cell2mat(training_fullC_params(:,1)),2) = training_fullC_params(:,3);
activeNames(cell2mat(training_fullC_params(:,1)),3) = training_fullC_params(:,4);
training_fullD_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(3.121)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.436)      ,[exp(1)    exp(6)]          %2 from est params above
};
activeNames(cell2mat(training_fullD_params(:,1)),2) = training_fullD_params(:,3);
activeNames(cell2mat(training_fullD_params(:,1)),3) = training_fullD_params(:,4);
estParamsIX = [7 21 23 28 31 33 37 39 40]';
estParams = activeNames(estParamsIX,1)
%-- 5/24/19, 10:32 AM --%
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),  [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),   [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),   [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),   [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),   [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),   [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),   [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),   [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),   [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),   [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),   [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),   [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),   [exp(-3) exp(6)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),   [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),   [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),   [exp(0) exp(5)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),   [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(-20) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(1.3), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(-2), [exp(-20) exp(20)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(1.3), [exp(-6) exp(6)]%39-1
'TXTL_PLAS_TFBIND_Kd'                , exp(-2), [exp(-20) exp(20)]%40-1
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(2), [exp(-20) exp(20)]%41-1
'TXTL_PLAS_TFRNAPbound_F'            , exp(1.3), [exp(-6) exp(6)]%42-1
'TXTL_PLAS_TFBIND_F'                 , exp(1.3), [exp(-6) exp(6)]}%43-1
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(-1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(12)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(16.57)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [7 21 31 33 35:42]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:)
%     {'TXTL_PTET_RNAPbound_Kd'    }
%     {'TXTL_PTET_sequestration_Kd'}
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_Kd'  }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% In this phase, we will fix the values of
%     {'TXTL_PTET_sequestration_F' }
%     {'TXTL_INDUCER_TETR_ATC_F'   }
%     {'TXTL_DIMER_tetR_Kd'        }
%     {'TXTL_DIMER_tetR_F'         }
%
% and estimate:
%
%     'TX_elong_glob'                      , exp(2.6),   [exp(0) exp(5)]          %1 % from est params above
%     'TL_elong_glob'                      , exp(3.5),   [exp(0) exp(6)]          %2% from est params above
%     'AGTPdeg_time'                       , exp(8.8),   [exp(6) exp(11)]         %3 % from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),   [exp(0) exp(17)]          %7 % TO BE ESTIMATED HERE
%     'TXTL_PTET_sequestration_Kd'         , exp(12),   [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
%     'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),   [exp(0) exp(18)]          %16 % TO BE ESTIMATED HERE
%     'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
%     'RNAP'                               , exp(1.4419),  [exp(-1) exp(4)]       %31 31% from est params above
%     'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
%     'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 % from est params above
%
% and we also include the pLac data into the estimation problem, since the
% plac part is involved.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
ptetinfo = ['This is the ptet constitutive expression circuit. \n '];
tetrinfo = ['This is the tetR repressing ptet circuit. \n '];
atcinfo = ['This is the aTc inducing (derepressing) the tetR ptet repression circuit. \n '];
placinfo = ['This is the plac constitutive expression circuit. \n '];
plasinfo = ['This is the plas - 3OC12HSL induction circuit. \n '];
% activeNames has the mRNA parameters and the protein parameters.
% first half (up to RNase) are TX and the rest are TL.
% TX params are fixed from previous sims.
%
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged to that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimaed parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
% Here for example we have for the mrna deg sim we only care about
% setting the rna deg parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked. Need to document this before I forget.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(-3) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(-20) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(1.3), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(-5) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(1.3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(-2), [exp(-20) exp(20)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(2), [exp(-20) exp(20)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(1.3), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(1.3), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(0)    exp(5)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(0)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(-1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(12)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(17)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(16.57)    ,[exp(0)    exp(22)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(5)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
estParamsIX = [7 21 23 28 31 33 35 37 39 40]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:)
edit mcmc_info_vnprl_F2.m
close all
%-- 6/6/19, 3:37 PM --%
edit txtl_prom_plas_ptet.m
edit txtl_prom_ptet.m
edit txtl_prom_plas.m
%-- 6/7/19, 7:20 PM --%
edit model_txtl_pLacLasR_pLasdeGFP.m
edit model_txtl_ptetdeGFP_pLactetR_aTc.m
mIFFL = model_txtl_lastetIFFL
mIFFL
mIFFL.Reactions
mIFFL = model_txtl_lastetIFFL
mIFFL.Reactions
edit manual_txtlsim_parameters.m
edit analysis_regen_C1.m
mIFFL.Parameters
mIFFL = model_txtl_lastetIFFL
mIFFL.Parameters
mIFFL = model_txtl_lastetIFFL
mIFFL.Parameters
mIFFL.Reactions
mIFFL.rules
mIFFL.Events
edit proj_ZSIFFL_trainingE.m
edit ZachIFFL_testdata.m
grpData_test
clc
unique(grpData_test.ID)
find(grpData_test.ID, unique(grpData_test.ID))
find(grpData_test.ID == unique(grpData_test.ID))
grpData_test(1:81:35*81,:)
grpData_test(1+1:81:35*81,:)
grpData_test(81:81:35*81,:)
grpData_test(1:81:35*81,:)
grpData_test{1:81,:)
grpData_test(1:81,:)
grpData_test(1:81,2)
grpData_test(1:81,3)
grpData_test(1:10,,)
grpData_test(1:10,)
grpData_test(1:10,:)
grpData_test.GFP(1:10)
i = 2
doseid = 3
((i-1)*(81*7)+((doseid-1)*81)+1:81)
((i-1)*(81*7)+((doseid-1)*81)+(1:81))
for i = 1:2
for doseid = 1:7
tst{i, doseid} = ((i-1)*(81*7)+((doseid-1)*81)+1:81);
end
end
tst
for i = 1:2
for doseid = 1:7
tst{i, doseid} = ((i-1)*(81*7)+((doseid-1)*81)+(1:81));
end
end
tst
tst{1
tst{1}
tst{1,1}
tst{1,2}
tst{1,3}
tst{1,4}
tst{1,5}
tst{1,6}
tst{1,7}
tst{2,7}
tst{2,1}
grpData_test(1:81,:)
da
plot(da{:,1,1,1})
di
clc
di{1}
si
di
di{1}
da1 = squeeze(di{1}.dataArray);
dim(da1)
size(da1)
plot(0:360:28800, da1)
plot(0:360/3600:28800/3600, da1)
figure; for i = 1:5; subplot(5, 1, i); plot(0:360/3600:28800/3600, squeeze(di{i}.dataArray)) end
figure; for i = 1:5; subplot(5, 1, i); plot(0:360/3600:28800/3600, squeeze(di{i}.dataArray)); end
di
di(1)
di
di = ZachIFFL_testdata
close all
di(1)
di(2)
di(3)
di(4)
di = ZachIFFL_testdata
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(1)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(25)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(15)    exp(25)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(10)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(15)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%%
training_fullC_params = ...
{...
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-0.5)     ,[exp(-2)	exp(1)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-2)       ,[exp(-10)	exp(5)]
35      ,       'TXTL_INDUCER_LASR_AHL_Kd'           , exp(13), [exp(5) exp(15)] ...
};
activeNames(cell2mat(training_fullC_params(:,1)),2) = training_fullC_params(:,3);
activeNames(cell2mat(training_fullC_params(:,1)),3) = training_fullC_params(:,4);
training_fullD_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(3.121)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.436)      ,[exp(1)    exp(6)]          %2 from est params above
};
activeNames(cell2mat(training_fullD_params(:,1)),2) = training_fullD_params(:,3);
activeNames(cell2mat(training_fullD_params(:,1)),3) = training_fullD_params(:,4);
estParamsIX = [7 21 23 28 31 33 37 39 40]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:size(activeNames, 1))', estParamsIX);
% for troubleshooting / visualizing the fixed params:
%     log(cell2mat(activeNames2(fixedParamsIX,[2])))
%     activeNames2(fixedParamsIX,[1:2])
% since activeNames2 is a superset of activeNames1, we can just use
% activeNames2 as the master vector.
masterVector = log(cell2mat(activeNames(:,2))); % log transformed.
masterVector
activeNames
[activeNames(:,1) num2cell(log(cell2mat(activeNames(:, 2))))]
activeNames(estParamsIX,:)
exp(6)*100
log(exp(6)*100)
mIFFL.reaction
mIFFL.riles
mIFFL.rul
mIFFL.Reactions(79)
get(mIFFL.Reactions(79))
get(mIFFL.Reactions(65))
proj_ZSIFFL_predictionA
size(mvarray)
mai
mai.fixedParams
mi
mi(1)
load(['/Users/vipulsinghal/Dropbox/Documents/toolbox/txtlsim_vsfork2017/mcmc_simbio/projects/proj_ZSIFFL_predictionA'...
'/simdata_20190613_105424_1_327/full_variable_set_20190613_105424_1_327.mat'])
clear all
load(['/Users/vipulsinghal/Dropbox/Documents/toolbox/txtlsim_vsfork2017/mcmc_simbio/projects/proj_ZSIFFL_predictionA'...
'/simdata_20190613_105424_1_327/full_variable_set_20190613_105424_1_327.mat']
load(['/Users/vipulsinghal/Dropbox/Documents/toolbox/txtlsim_vsfork2017/mcmc_simbio/projects/proj_ZSIFFL_predictionA'...
'/simdata_20190613_105424_1_327/full_variable_set_20190613_105424_1_327.mat'])
whos
mi
mi(1)
close all
clc
mIFFL.reac
mIFFL.param
mIFFL.rules
mi
mi(1).emo
get(mi(1).emo)
aa = get(mi(1).emo)
aa.ValueInfo
aa.ValueInfo(:)
for i = 1:47; aa.ValueInfo(i) end
for i = 1:47; aa.ValueInfo(i);  end
for i = 1:47; currvi{i} = aa.ValueInfo(i);  end
currvi
for i = 1:47; currvi2(i) = aa.ValueInfo(i);  end
currvi2
currvi2(1)
for i = 1:47; currvi2(i)
end
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
oc12info = ['This is the 3OC12 perturbation in the IFFL. \n '];
lasrinfo = ['This is the pLac-lasR DNA perturbation in the IFFL. \n '];
atcinfo = ['This is the aTc perturbation in the IFFL. \n '];
tetrinfo = ['This is the pLas-tetR DNA perturbation in the IFFL. \n '];
gfpinfo = ['This is the pLas-tetO-deGFP DNA perturbation in the IFFL. \n '];
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged so that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimated parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(1)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(25)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(15)    exp(25)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(10)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(15)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%%
training_fullC_params = ...
{...
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-0.5)     ,[exp(-2)	exp(1)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-2)       ,[exp(-10)	exp(5)]
35      ,       'TXTL_INDUCER_LASR_AHL_Kd'           , exp(13), [exp(5) exp(15)] ...
};
activeNames(cell2mat(training_fullC_params(:,1)),2) = training_fullC_params(:,3);
activeNames(cell2mat(training_fullC_params(:,1)),3) = training_fullC_params(:,4);
training_fullD_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(3.121)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.436)      ,[exp(1)    exp(6)]          %2 from est params above
};
activeNames(cell2mat(training_fullD_params(:,1)),2) = training_fullD_params(:,3);
activeNames(cell2mat(training_fullD_params(:,1)),3) = training_fullD_params(:,4);
% add the combinatorial activator knockoff parameter
% 'TXTL_PLAS_TFBIND_Kd', exp(6)
% 'TXTL_PLAS_TFBIND_F', exp(0) % %
multiplier = 100;
plasTFbind_KD = exp(6);
activeNames = [activeNames;
{'TXTL_COMBINATORIAL_ACTIVATOR_KNOCKOFF_Kd', 1/(plasTFbind_KD*multiplier) , [exp(-20) exp(20)]
'TXTL_COMBINATORIAL_ACTIVATOR_KNOCKOFF_F', (plasTFbind_KD*multiplier), [exp(-20) exp(20)]}];
% reverse rate = 1
% forward rate / reverse rate = exp(6)*100/exp(0) ~= exp(10.5) = 1/kD => KD
% = exp(-10.6)
% forward rate = exp(10.5)
%
estParamsIX = [7 21 23 28 31 33 37 39 40]';
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:size(activeNames, 1))', estParamsIX);
% for troubleshooting / visualizing the fixed params:
%     log(cell2mat(activeNames2(fixedParamsIX,[2])))
%     activeNames2(fixedParamsIX,[1:2])
% since activeNames2 is a superset of activeNames1, we can just use
% activeNames2 as the master vector.
masterVector = log(cell2mat(activeNames(:,2))); % log transformed.
[activeNames(:,1) num2cell(log(cell2mat(activeNames(:, 2))))]
mai
mai.mast
mai.masterVector
mi(1)
edit mcmc_runsim
edit mcmc_runsim_v2.m
edit proj_ZSIFFL_predictionA
proj_ZSIFFL_predictionA('nW', 20, 'nPoints', 100, 'nIter', 1, 'parallel', false, 'multiplier', 1, 'thinning', 1)
ep
es
enuo
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
%     'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
%     'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
activeNames
%
% There is only one topology in this example: the IFFL.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
oc12info = ['This is the 3OC12 perturbation in the IFFL. \n '];
lasrinfo = ['This is the pLac-lasR DNA perturbation in the IFFL. \n '];
atcinfo = ['This is the aTc perturbation in the IFFL. \n '];
tetrinfo = ['This is the pLas-tetR DNA perturbation in the IFFL. \n '];
gfpinfo = ['This is the pLas-tetO-deGFP DNA perturbation in the IFFL. \n '];
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged so that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimated parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(1)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(25)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(15)    exp(25)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(10)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(15)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%%
training_fullC_params = ...
{...
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-0.5)     ,[exp(-2)	exp(1)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-2)       ,[exp(-10)	exp(5)]
35      ,       'TXTL_INDUCER_LASR_AHL_Kd'           , exp(13), [exp(5) exp(15)] ...
};
activeNames(cell2mat(training_fullC_params(:,1)),2) = training_fullC_params(:,3);
activeNames(cell2mat(training_fullC_params(:,1)),3) = training_fullC_params(:,4);
training_fullD_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(3.121)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.436)      ,[exp(1)    exp(6)]          %2 from est params above
};
activeNames(cell2mat(training_fullD_params(:,1)),2) = training_fullD_params(:,3);
activeNames(cell2mat(training_fullD_params(:,1)),3) = training_fullD_params(:,4);
% add the combinatorial activator knockoff parameter
% 'TXTL_PLAS_TFBIND_Kd', exp(6)
% 'TXTL_PLAS_TFBIND_F', exp(0) % %
multiplier = 100;
plasTFbind_KD = exp(6);
activeNames = [activeNames;
{'TXTL_COMBINATORIAL_ACTIVATOR_KNOCKOFF_Kd', 1/(plasTFbind_KD*multiplier) , [exp(-20) exp(20)]
'TXTL_COMBINATORIAL_ACTIVATOR_KNOCKOFF_F', (plasTFbind_KD*multiplier), [exp(-20) exp(20)]}];
activeNames
activeNames = activeNames(setdiff(1:44, [7, 8]), :);
activeNames
%
% There is only one topology in this example: the IFFL.
%
%
% mcmc_info has the following substructures:
%
% runsim_info:  information on the mcmc algorithm parameters
% model_info:   array of models, and associated properties like parameters,
%               and the matrices of indices from the master vector
%               to the model parameters.
% master_info:  contains the master vector, and a spec for which parameters
%               get estimated.
%
% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% Some human readable descriptive text.
oc12info = ['This is the 3OC12 perturbation in the IFFL. \n '];
lasrinfo = ['This is the pLac-lasR DNA perturbation in the IFFL. \n '];
atcinfo = ['This is the aTc perturbation in the IFFL. \n '];
tetrinfo = ['This is the pLas-tetR DNA perturbation in the IFFL. \n '];
gfpinfo = ['This is the pLas-tetO-deGFP DNA perturbation in the IFFL. \n '];
% ordering requirements:
% ensure that the following two orderings match up:
% activeNames(orderingIX) == masterVector(paramMaps(orderingIX))
%
% ie, activeNames == masterVector(paramMaps)
%
% This gets satisfied when two conditions hold:
%
% The fixed parameters in the master vector must be arranged so that
% for every paramMap and every corresponding activeNames list, the
% fixed params subset of the elements gets mapped correctly.
%
% for the estimated parameters, again, the estimated parameters need to
% populate the master vector in a way such that the condition
% activeNames == masterVector(paramMaps) holds for all the activeNames
% arrays (each topology will have one), and for each paramMap column
% (geometry) for each topology.
%
%
% of course, the masterVector is built as follows:
% masterVector(estparamIX) == logp
% masterVector(fixedParams) == [marray(:, end-2); marray(:, end-1); marray(:, end);]
%
% So this is all a bit complicated...
% Basically we need to make sure that after we build master vector from
% the fixed parameters (from the previous simulations), when we access
% them using paramMaps, we get the ones corresponding to the names in
% activeNames.
% names of the parameters and species to set allow for setting in the
% exported model. These are both the set parameters and the to estimate
% parameters.
%%
% SEE FILE ZachIFFL_estimation_strategy.txt for the overall strategy.
% first we set up the master vector
%
% then we will set the parameters to fix, and the remaining ones to
% estimate.
%
% Then we will define paramMaps that will be used to distribute the
% master vector among the different topologies.
% parameters of the master vector we fix and estimate
%     The following params are the ones estimaed from the last set of
%     restrictions in the file analysis_vnprl_F2.m
% parnames =
%
%   13×1 cell array
%
%     {'TX_{cat}'    } 1
%     {'\tau_{atp}'  } 3
%     {'\delta_{atp}'} 5
%     {'pol_{Kd}'    } 21 % plac Kd NOT PTET Kd, the Ptet KD gets estimated.
%     {'pol_{term}'  } 23
%     {'RNAse_{Kd}'  } 15
%     {'RNAse_{cat}' } 30
%     {'pol'         } 31
%     {'RNase'       } 32
%     {'TL_{cat}'    } 2
%     {'Ribo_{Kd}'   } 6
%     {'Ribo_{term}' } 28
%     {'Ribo'        } 33
% The following were parameters esitmated in vnprl_F2, and were extracted
% carefully from the accompanying analysis script. see the code there to
% understand how they were picked.
EstimatedParams =[...
2.5234    2.4464    2.6231    2.5976    2.4650    2.4277    2.4806    2.6010    2.4301    2.5499    2.6991    2.4356
8.8054    8.9024    8.8097    8.8014    8.8483    8.8642    8.8394    8.8427    8.8616    8.7634    8.8621    8.7910
-10.0179   -9.7873   -9.9376  -10.0048   -9.9056   -9.8889   -9.9100   -9.9631   -9.9827  -10.0348   -9.8702   -9.9538
13.7327   13.6474   13.8789   13.9325   13.7827   13.7665   13.7762   13.8681   13.8867   13.7211   14.0961   13.8706
2.8000    4.3598    0.0020    2.8127    3.5490    4.4005    4.1178    3.1338    0.3334    2.7831    1.8745    1.7856
15.6977   15.6349   15.7098   15.6858   15.6061   15.6339   15.7103   15.6193   15.6295   15.7294   15.6074   15.5958
0.0535   -0.2251   -0.1516   -0.0709   -0.2109   -0.1276   -0.0340   -0.1752   -0.0117    0.0436   -0.2481   -0.1603
1.5652    1.6167    1.4897    1.5206    1.6080    1.6259    1.6008    1.5196    1.7133    1.5597    1.4531    1.7096
8.3976    8.6141    8.6149    8.5123    8.5710    8.5146    8.4985    8.5494    8.3963    8.4382    8.6104    8.5097
3.6442    3.2731    3.2538    3.3828    3.2633    3.2936    3.2387    3.4129    3.4920    3.3685    3.5169    3.3055
8.2565    0.0542    4.5196   -2.2731   -1.6399   -1.7370   -2.9377    0.6546   -1.7598    3.9814    6.7136   -0.3827
2.5533    2.8328    2.8292    2.7929    2.9282    2.8804    2.9859    2.9519    2.8087    2.7650    2.7130    2.9940
3.9583    4.1863    4.1261    4.0012    4.1922    3.9954    4.0318    3.7330    3.8616    4.1038    3.8526    3.8081];
ParamColumnToUse = 2;
paramVecToUse = EstimatedParams(:, ParamColumnToUse);
indicesMasterVectorEstimated = [1 3 5 21 23 15 30 31 32 2 6 28 33];
activeNames = {... % param name, nominal value, rage of parameters for uniform prior,
'TX_elong_glob'                      , exp(2.6),    [exp(0) exp(5)]          %1 from est params above
'TL_elong_glob'                      , exp(3.5),    [exp(0) exp(6)]          %2 from est params above
'AGTPdeg_time'                       , exp(8.8),    [exp(6) exp(11)]         %3 from est params above
'AGTPreg_ON'                         , exp(-3.9),   [exp(-6) exp(-1)]       %4 fixed in mcmc_info_vnprl_F2
'AGTPdeg_rate'                       , exp(-9.9),   [exp(-13) exp(-7)]       %5 from est params above
'TXTL_UTR_UTR1_Kd'                   , exp(11),     [exp(-3) exp(15)]         %6 from est params above
'TXTL_PTET_RNAPbound_Kd'             , exp(14),     [exp(0) exp(17)]          %7 TO BE ESTIMATED HERE
'TXTL_PTET_RNAPbound_F'              , exp(1.5),    [exp(0) exp(4)]          %8 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_1_Kd'                 , exp(2.9),    [exp(0) exp(5)]          %9 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_Kd'                 , exp(14),     [exp(10) exp(20)]         %10 fixed in mcmc_info_vnprl_F2
'TXTL_PTET_sequestration_Kd'         , exp(12),     [exp(3) exp(15)]          %11 TO BE ESTIMATED HERE
'TXTL_PTET_sequestration_F'          , exp(1.5),    [exp(-2) exp(5)]         %12 TO BE ESTIMATED HERE
'TL_AA_Kd'                           , exp(6.6),    [exp(3) exp(10)]         %13 fixed in mcmc_info_vnprl_F2
'TL_AGTP_Kd'                         , exp(14.5),   [exp(10) exp(18)]       %14 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_Kd'                     , exp(15.2),   [exp(7) exp(17)]        %15 from est params above
'TXTL_INDUCER_TETR_ATC_Kd'           , exp(13),     [exp(0) exp(18)]          %16 TO BE ESTIMATED HERE
'TXTL_INDUCER_TETR_ATC_F'            , exp(2.6),    [exp(-2) exp(5)]         %17 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_Kd'                 , exp(13),     [exp(7) exp(17)]          %18 TO BE ESTIMATED HERE
'TXTL_DIMER_tetR_F'                  , exp(2.6),    [exp(-2) exp(5)]         %19 TO BE ESTIMATED HERE
'TXTL_UTR_UTR1_F'                    , exp(-.2),    [exp(-4) exp(2)]         %20 fixed in mcmc_info_vnprl_F2
'TXTL_PLAC_RNAPbound_Kd'             , exp(13.8),   [exp(5) exp(17)]        %21 from est params above
'TXTL_PLAC_RNAPbound_F'              , exp(2.6),    [exp(-2) exp(5)]         %22 fixed in mcmc_info_vnprl_F2
'TXTL_RNAPBOUND_TERMINATION_RATE'    , exp(1.8),    [exp(0) exp(12)]         %23 from est params above
'TXTL_NTP_RNAP_1_F'                  , exp(0),      [exp(-2) exp(3)]           %24 fixed in mcmc_info_vnprl_F2
'TXTL_NTP_RNAP_2_F'                  , exp(0),      [exp(-2) exp(3)]           %25 fixed in mcmc_info_vnprl_F2
'TL_AA_F'                            , exp(-0.3),   [exp(-3) exp(3)]        %26 fixed in mcmc_info_vnprl_F2
'TL_AGTP_F'                          , exp(-1.2),   [exp(-4) exp(2)]        %27 fixed in mcmc_info_vnprl_F2
'TXTL_RIBOBOUND_TERMINATION_RATE'    , exp(2.3),    [exp(0) exp(12)]          %28 from est params above
'TXTL_RNAdeg_F'                      , exp(0),      [exp(-3) exp(3)]           %29 fixed in mcmc_info_vnprl_F2
'TXTL_RNAdeg_kc'                     , exp(-0.45),   [exp(-5) exp(3)]       %30 from est params above
'RNAP'                               , exp(1.4419),  [exp(-1) exp(8)]       %31 31% from est params above
'RNase'                              , exp(8.5),  [exp(5) exp(10)]          %32 from est params above
'Ribo'                               , exp(3.75),  [exp(1) exp(6)]          %33 from est params above
'TXTL_PROT_deGFP_MATURATION'         , exp(-6.07), [exp(-9) exp(-3)]    %34 fixed in mcmc_info_vnprl_F2
'TXTL_INDUCER_LASR_AHL_Kd'           , exp(-2), [exp(5) exp(20)] %36-1
'TXTL_INDUCER_LASR_AHL_F'            , exp(0), [exp(-6) exp(6)] %37-1
'TXTL_PLAS_RNAPbound_Kd'             , exp(30), [exp(25) exp(40)]%38-1
'TXTL_PLAS_RNAPbound_F'              , exp(3), [exp(-6) exp(6)]%39-1 pol_{F,las}
'TXTL_PLAS_TFBIND_Kd'                , exp(5), [exp(0) exp(10)]%40-1 plas_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_Kd'           , exp(8), [exp(0) exp(15)]%41-1 plas-pol_{tf, Kd} <
'TXTL_PLAS_TFRNAPbound_F'            , exp(0), [exp(-6) exp(6)]%42-1 plas-pol_{tf, F}
'TXTL_PLAS_TFBIND_F'                 , exp(0), [exp(-6) exp(6)]};%43-1 plas_{tf, F}
% Set the master vector values that are set from the values estimated in "vnprl_F2"
activeNames(indicesMasterVectorEstimated, 2) = num2cell(exp(paramVecToUse));
% Set the master vector values that were already fixed in "vnprl_F2"
preFixedParams = {...
4     'AGTPreg_ON'                         , exp( -3.9120)
34    'TXTL_PROT_deGFP_MATURATION'         , exp( -6.0748)
8     'TXTL_PTET_RNAPbound_F'              , exp( 1.5000)
9     'TXTL_NTP_RNAP_1_Kd'                 , exp( 2.9459)
10    'TXTL_NTP_RNAP_2_Kd'                 , exp( 13.9970)
13    'TL_AA_Kd'                           , exp( 6.5566)
14    'TL_AGTP_Kd'                         , exp( 14.5090)
20    'TXTL_UTR_UTR1_F'                    , exp( -0.2000)
22    'TXTL_PLAC_RNAPbound_F'              , exp( 1.5000)
24    'TXTL_NTP_RNAP_1_F'                  , exp(      0)
25    'TXTL_NTP_RNAP_2_F'                  , exp(      0)
26    'TL_AA_F'                            , exp( -0.3000)
27    'TL_AGTP_F'                          , exp( -1.2000)
29    'TXTL_RNAdeg_F'                      , exp(      0)}; % checked and verified.
% set the prefixed params elements in master vector to the values in
% prefixed params.
%
activeNames(cell2mat(preFixedParams(:,1)),2) = preFixedParams(:,3);
% format short g;
% aa = [log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),2))) log(cell2mat(activeNames(cell2mat(preFixedParams(:,1)),3)))]
%
% pdiagnostic = cell2table([num2cell(aa) preFixedParams(:,1) num2cell([-aa(:,1)+aa(:,3) ...
%     aa(:,1)-aa(:,2) (1:length(aa))']) (activeNames(cell2mat(preFixedParams(:,1)),1))],...
%     'VariableNames', {'logval', 'loglb', 'logub', 'mvix', 'ubdiff', 'lbdiff', 'ix', 'name'})
% pdiagnostic.lbdiff./pdiagnostic.ubdiff
% pdiagnostic =
%
%   14×8 table
%
%     logval     loglb    logub    mvix    ubdiff    lbdiff    ix                name
%     _______    _____    _____    ____    ______    ______    __    ____________________________
%
%      -3.912     -6       -1        4      2.912     2.088     1    'AGTPreg_ON'
%     -6.0748     -9       -3       34     3.0748    2.9252     2    'TXTL_PROT_deGFP_MATURATION'
%         1.5      0        4        8        2.5       1.5     3    'TXTL_PTET_RNAPbound_F'
%      2.9459      0        5        9     2.0541    2.9459     4    'TXTL_NTP_RNAP_1_Kd'
%      13.997     10       20       10      6.003     3.997     5    'TXTL_NTP_RNAP_2_Kd'
%      6.5566      3       10       13     3.4434    3.5566     6    'TL_AA_Kd'
%      14.509     10       18       14      3.491     4.509     7    'TL_AGTP_Kd'
%        -0.2     -4        2       20        2.2       3.8     8    'TXTL_UTR_UTR1_F'
%         1.5     -2        5       22        3.5       3.5     9    'TXTL_PLAC_RNAPbound_F'
%           0     -2        3       24          3         2    10    'TXTL_NTP_RNAP_1_F'
%           0     -2        3       25          3         2    11    'TXTL_NTP_RNAP_2_F'
%        -0.3     -3        3       26        3.3       2.7    12    'TL_AA_F'
%        -1.2     -4        2       27        3.2       2.8    13    'TL_AGTP_F'
%           0     -3        3       29          3         3    14    'TXTL_RNAdeg_F'
%% Next set the parameters estimated in mcmc_info_ZSIFFL_mtet_phase1.m
%
% The values estimated are:
mtet_phase1_params = ...
{...
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, 		exp(14)             , 		[exp(0)     exp(17)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, 		exp(-1)             , 		[exp(-10)	exp(5)]
12		, 	    'TXTL_PTET_sequestration_F' 	, 		exp(1.314)          , 		[exp(-2)	exp(5)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, 		exp(-2)             , 		[exp(-15)	exp(5)]
17		, 	    'TXTL_INDUCER_TETR_ATC_F'   	, 		exp(1.577)          , 		[exp(-2)	exp(5)]
18		, 	    'TXTL_DIMER_tetR_Kd'        	, 		exp(-10)            , 		[exp(-20)	exp(-7)]
19		, 	    'TXTL_DIMER_tetR_F'         	, 		exp(1.447)          , 		[exp(-2)	exp(5)]...
};
activeNames(cell2mat(mtet_phase1_params(:,1)),2) = mtet_phase1_params(:,3);
activeNames(cell2mat(mtet_phase1_params(:,1)),3) = mtet_phase1_params(:,4);
%% next we set the parameters estimated from mcmc_info_ZSIFFL_mtet_phase2.m
% The values estimated are:
mtet_phase2_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(2.3)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.7)      ,[exp(1)    exp(6)]          %2 from est params above
3       ,       'AGTPdeg_time'                  , exp(10.05)    ,[exp(8)    exp(12)]         %3 from est params above
31      ,       'RNAP'                          , exp(5.9)      ,[exp(1)   exp(15)]       %31 31% from est params above
32      ,       'RNase'                         , exp(9.2)      ,[exp(7)    exp(11)]          %32 from est params above
33      ,       'Ribo'                          , exp(5.9)      ,[exp(1)    exp(15)]          %33 from est params above
21      ,       'TXTL_PLAC_RNAPbound_Kd'        , exp(10.5)     ,[exp(5)    exp(25)]        %21 from est params above
7		, 	    'TXTL_PTET_RNAPbound_Kd'    	, exp(17)    ,[exp(15)    exp(25)]
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-2.7)     ,[exp(-10)	exp(10)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-6)       ,[exp(-15)	exp(15)]...
};
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%% we also set the forward rate parameters, since those should not matter much, and any value around 1 is good
% the F rate parameters just set the timescale.
mtet_phase2_params = ...
{...
36      ,       'TXTL_INDUCER_LASR_AHL_F'     	,   exp(0)        , [exp(-3)    exp(5)]
38      ,       'TXTL_PLAS_RNAPbound_F'         ,   exp(0)        , [exp(-3)    exp(5)]
41      ,       'TXTL_PLAS_TFRNAPbound_F'       ,   exp(0)        , [exp(-3)    exp(5)]
42      ,       'TXTL_PLAS_TFBIND_F'            ,   exp(0)        , [exp(-3)    exp(5)] };
activeNames(cell2mat(mtet_phase2_params(:,1)),2) = mtet_phase2_params(:,3);
activeNames(cell2mat(mtet_phase2_params(:,1)),3) = mtet_phase2_params(:,4);
%%
training_fullC_params = ...
{...
11		, 	    'TXTL_PTET_sequestration_Kd'	, exp(-0.5)     ,[exp(-2)	exp(1)]
16		, 	    'TXTL_INDUCER_TETR_ATC_Kd'  	, exp(-2)       ,[exp(-10)	exp(5)]
35      ,       'TXTL_INDUCER_LASR_AHL_Kd'           , exp(13), [exp(5) exp(15)] ...
};
activeNames(cell2mat(training_fullC_params(:,1)),2) = training_fullC_params(:,3);
activeNames(cell2mat(training_fullC_params(:,1)),3) = training_fullC_params(:,4);
training_fullD_params = ...
{...
1       ,       'TX_elong_glob'                 , exp(3.121)      ,[exp(1)    exp(6)]          %1 from est params above
2       ,       'TL_elong_glob'                 , exp(3.436)      ,[exp(1)    exp(6)]          %2 from est params above
};
activeNames(cell2mat(training_fullD_params(:,1)),2) = training_fullD_params(:,3);
activeNames(cell2mat(training_fullD_params(:,1)),3) = training_fullD_params(:,4);
% add the combinatorial activator knockoff parameter
% 'TXTL_PLAS_TFBIND_Kd', exp(6)
% 'TXTL_PLAS_TFBIND_F', exp(0) % %
multiplier = 100;
plasTFbind_KD = exp(6);
activeNames = [activeNames;
{'TXTL_COMBINATORIAL_ACTIVATOR_KNOCKOFF_Kd', 1/(plasTFbind_KD*multiplier) , [exp(-20) exp(20)]
'TXTL_COMBINATORIAL_ACTIVATOR_KNOCKOFF_F', (plasTFbind_KD*multiplier), [exp(-20) exp(20)]}];
% reverse rate = 1
% forward rate / reverse rate = exp(6)*100/exp(0) ~= exp(10.5) = 1/kD => KD
% = exp(-10.6)
% forward rate = exp(10.5)
%
%% Next, remove the ptet rnap binding and the forward rate reacton parameters.
% these parameters are not present in the model
activeNames = activeNames(setdiff(1:44, [7, 8]), :);
%%
estParamsIX = [21 23 28 31 33 37 39 40]'-2;
estParams = activeNames(estParamsIX,1);
activeNames(estParamsIX,:);
% skipping AGTPdeg_rate, AGTPreg_ON, TXTL_PROT_deGFP_MATURATION
% fixedParams vector
fixedParamsIX =  setdiff((1:size(activeNames, 1))', estParamsIX);
fixedParamsIX
estParamIx
estParamsIx
estParamsIX
proj_ZSIFFL_predictionA('nW', 18, 'nPoints', 50, 'nIter', 1, 'parallel', false, 'multiplier', 1, 'thinning', 1)
close all
edit exportmobj.m
mi(1)
mi(1).doseReordering
mi(1).dosedNames
currdi
currdi.timeVec
currdi.timeVector
size(marrayOrd)
size(dose)
clc
close all
mIFFL
mIFFL.spec
%-- 6/25/19, 2:35 PM --%
edit schemer_import
addpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB/scottclowe-matlab-schemer-f8115af')
edit schemer_import
schemer_import
%-- 6/25/19, 2:51 PM --%
ls
edit FishWatcherV3c.mlapp
edit AmatPipeline_ver9_filterNdecode.m
edit AmatPipeline_ver9_registration.m
edit LoadAmatPipeline_ver6.m
edit NormalizeMERFISHData2.m
edit NormalizeMERFISHData3.m
edit NormalizeMERFISHData4.m
edit OneCellApplyFilters2p.m
edit OneCellCorrectDrift2_v23_t.m
edit OneCellCorrectDrift2_v3p2.m
schemer_import
addpath('/Users/vipulsinghal/Dropbox/Documents/MATLAB/scottclowe-matlab-schemer-f8115af')
schemer_import
%-- 6/29/19, 12:44 PM --%
dir mcmc_simbio/projects/
edit IFFL_predictionA.m
txtl_init
mcmc_init
edit IFFL_predictionA.m
edit proj_ZSIFFL_predictionA.m
da
ms
ms{1}
whos
mIFFL.reactinos
mIFFL.Reactions
currmi
di
currdi
da
help factors
help twofactors
tfac
mIFFL
mIFFL.species
close all
clear all
clc
IFFL_predictionA
meantraj = mean(currda(:, speciesGrp, :, dID), 3);
size(meantraj)
currda
size(currda)
da
mIFFL.spe
mi
mi.emo
mi(4).emo
get(mi(4).emo)
get(mi(4).emo, 'ValueInfo')
vi = get(mi(4).emo, 'ValueInfo')
vi(:)
vi(1)
vi(47)
vi(46)
vi(45)
vi(44)
get(mi(4).emo, 'ValueInfo')
get(mi(4).emo)
get(mi(4).emo, 'InitialVlaues')
get(mi(4).emo, 'InitialValues')
format short g; get(mi(4).emo, 'InitialValues')
get(mi(4).emo)
for i = 1:47
names{i} = vi(i).Name;
end
names
names'
[names', mat2cell(get(mi(4).emo, 'InitialValues'))]
help num2cell
[names', num2cell(get(mi(4).emo, 'InitialValues'))]
dose
currmi
mi